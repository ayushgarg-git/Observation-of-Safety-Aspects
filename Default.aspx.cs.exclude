using AppCode;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Data;
using System.IO;
using iTextSharp.text;
using iTextSharp.text.html.simpleparser;
using iTextSharp.text.pdf;
using System.Web.UI.HtmlControls;
using iTextSharp.tool.xml;
using System.Globalization;
using CrystalDecisions.CrystalReports.Engine;
using CrystalDecisions.Shared;

public partial class _Default : System.Web.UI.Page
{
    dbFunction objDB = new dbFunction();
    DateTime now = DateTime.Now;

    protected void Page_Load(object sender, EventArgs e)
    {
        lblError.Text = "";
        Session["UserRole"] = null;
        if (Session["USERID"] == null)
        {
            Response.Redirect("Login.aspx");
        }
        else
        {
            if (!IsPostBack)
            {
                //Check_Edit_Rights();
                bindJobNumber();
            }
        }
    }

    public bool Check_Edit_Rights()
    {
        string user_role = Session["User_Role"].ToString();
        if (user_role == "S")
        {
            Session["Edit_Rights"] = "Y";
            return true;
        }
        else
        {
            string User = Session["USERID"].ToString().Trim();
            string Job_no = ddJobNumber.SelectedValue.ToString().Trim();
            StringBuilder sbQuery = new StringBuilder();
            Dictionary<string, string> paramList = new Dictionary<string, string>();
            sbQuery.Append("SELECT count (1) FROM CMR_PROJECT_DATA where (PROJ_MGR=:empno or CONTRACT_MGR =:empno)");
            sbQuery.Append(" and JOB_NO = :JOB_NO ");
            paramList.Add(":empno", User);
            paramList.Add(":JOB_NO", Job_no);
            int gm_cpunt = objDB.ExecuteStatementCount(sbQuery.ToString(), paramList);
            if (gm_cpunt > 0)
            {
                //User_Role - N-Normal user-Edit Access
                Session["Edit_Rights"] = "Y";
                return true;
            }
            else
            {
                Session["Edit_Rights"] = "";
                return false;
            }
        }
    }

    protected void Set_Button_Visible_Logic()
    {
        //string edit_flag = Edit_Rights();
        //Edit access
        string user_role = Session["User_Role"].ToString();
        string Edit_Rights = Session["Edit_Rights"].ToString();
        if ((user_role == "E") || (user_role == "S") || (Edit_Rights == "Y"))
        {
            Visible_True();
        }
        //View access
        //V - (emp level between 18 and 20) GM G-General user
        //Z - Employee is Dir and above
        //ID - Employee is Indepenedant director?
        else if ((user_role == "V") || (user_role == "Z") || (user_role == "ID") && (Edit_Rights == ""))
        {
            Visible_False();
        }

        //if (Edit_Rights == "Y")
        //{
        //    Visible_True();
        //}
        //{
        //    Visible_False();
        //}
    }

    protected void Insert_Default_Grid_data()
    {
        try
        {
            string Job_no = ddJobNumber.SelectedValue.ToString().Trim();
            string Year_Code = ddlYear.SelectedItem.ToString().Trim();
            string Month_Code = ddlMonth.SelectedValue.ToString().Trim();
            string User = Session["USERID"].ToString().Trim();

            //Insert default - Contract Closure Status

            StringBuilder sbCount_Query = new StringBuilder();
            Dictionary<string, string> count_paramList = new Dictionary<string, string>();
            sbCount_Query.Append("SELECT COUNT(1) FROM CM_CONTRACT_CLOSURE where JOB_NO =:JOB_NO_WHR AND MONTH_CODE = :MONTH_CODE_WHR AND YEAR_CODE =:YEAR_CODE_WHR");
            count_paramList.Add(":JOB_NO_WHR", Job_no);
            count_paramList.Add(":MONTH_CODE_WHR", Month_Code);
            count_paramList.Add(":YEAR_CODE_WHR", Year_Code);
            string str_record = objDB.executeScalar(sbCount_Query.ToString(), count_paramList);
            Int32 count_record = Convert.ToInt32(str_record);
            if (count_record == 0)
            {
                StringBuilder sbInsertQuery = new StringBuilder();
                Dictionary<string, string> insertParamList = new Dictionary<string, string>();
                sbInsertQuery.Append("INSERT INTO CM_CONTRACT_CLOSURE (JOB_NO, MONTH_CODE, YEAR_CODE, ITEM_SR_NO, ITEM_DESC, ADDED_DATE, ADDED_BY)");
                sbInsertQuery.Append(" (SELECT :JOB_NO, :MONTH_CODE, :YEAR_CODE, ITEM_SR_NO, ITEM_DESC, SYSDATE, :ADDED_BY FROM CM_LIB_CONTRACT_CLOSURE)");
                insertParamList.Add(":JOB_NO", Job_no);
                insertParamList.Add(":MONTH_CODE", Month_Code);
                insertParamList.Add(":YEAR_CODE", Year_Code);
                insertParamList.Add(":ADDED_BY", User);
                objDB.executeNonQuery(sbInsertQuery.ToString(), insertParamList);
            }

            //Insert default - 5 key concerns in Engineering Phase

            StringBuilder sbCount_Query1 = new StringBuilder();
            Dictionary<string, string> count_paramList1 = new Dictionary<string, string>();
            sbCount_Query1.Append("SELECT COUNT(1) FROM CM_CONCERNS_ENGG where JOB_NO =:JOB_NO_WHR AND MONTH_CODE = :MONTH_CODE_WHR AND YEAR_CODE =:YEAR_CODE_WHR and CONCERNS_CODE=:CONCERNS_CODE_WHR");
            count_paramList1.Add(":JOB_NO_WHR", Job_no);
            count_paramList1.Add(":MONTH_CODE_WHR", Month_Code);
            count_paramList1.Add(":YEAR_CODE_WHR", Year_Code);
            count_paramList1.Add(":CONCERNS_CODE_WHR", Constants.CONCERN_ENGG);
            string str_record1 = objDB.executeScalar(sbCount_Query1.ToString(), count_paramList1);
            Int32 count_record1 = Convert.ToInt32(str_record1);
            if (count_record1 == 0)
            {
                StringBuilder sbInsertQuery1 = new StringBuilder();
                Dictionary<string, string> insertParamList1 = new Dictionary<string, string>();
                sbInsertQuery1.Append("INSERT INTO CM_CONCERNS_ENGG (JOB_NO, MONTH_CODE, YEAR_CODE, CONCERNS_CODE, CONCERNS_SEQ_NO, CONCERNS_SR_NO, ");
                sbInsertQuery1.Append(" CONCERNS_DESC, ADDED_DATE, ADDED_BY)");
                sbInsertQuery1.Append(" (SELECT :JOB_NO, :MONTH_CODE, :YEAR_CODE, :CONCERNS_CODE, SUB_CONCERNS_SEQ_NO, SUB_CONCERNS_SR_NO,  ");
                sbInsertQuery1.Append(" SUB_CONCERNS_DESC, SYSDATE, :ADDED_BY FROM CM_LIB_ENGG_SUB_CONCERNS) ");
                insertParamList1.Add(":JOB_NO", Job_no);
                insertParamList1.Add(":MONTH_CODE", Month_Code);
                insertParamList1.Add(":YEAR_CODE", Year_Code);
                insertParamList1.Add(":CONCERNS_CODE", Constants.CONCERN_ENGG);
                insertParamList1.Add(":ADDED_BY", User);
                objDB.executeNonQuery(sbInsertQuery1.ToString(), insertParamList1);
            }
        }
        catch (Exception)
        {

        }
    }

    protected void Visible_True()
    {
        Session["Visible_false"] = "";
        Set_Textboxes_Enabled();
        tbl_tab1.Visible = true;
        tbl_tab2.Visible = true;
        tbl_tab7.Visible = true;
        gv_ProjDateRemarks.Columns[1].Visible = true;
        gv_ProjFinanceRemarks.Columns[1].Visible = true;
        gv_ProjProgressRemarks.Columns[1].Visible = true;
        gv_ProjResourceRemarks.Columns[1].Visible = true;
        gvMilestone.Columns[1].Visible = true;
        gvRisk.Columns[1].Visible = true;
        gvChangeOrder.Columns[1].Visible = true;
        gvContChangeOrder.Columns[1].Visible = true;
        gvTimeDelay.Columns[1].Visible = true;
        gvTimeDelay_Others.Columns[1].Visible = true;
        gvExtraItems.Columns[1].Visible = true;
        gvExtraItemsVendor.Columns[1].Visible = true;
        gvWarehouseStatus.Columns[1].Visible = true;
        gvContractClosure.Columns[1].Visible = true;
        gvKeyConcerns_Client.Columns[1].Visible = true;
        gvKeyObligations_Client.Columns[1].Visible = true;
        gvKeyConcerns.Columns[1].Visible = true;
        gvKeyConcerns_Constr.Columns[1].Visible = true;
        gvKeyConcerns_Vend.Columns[1].Visible = true;
        gvKeyConcerns_Contrctr.Columns[1].Visible = true;
        gvKeyConcerns_Licn.Columns[1].Visible = true;
    }

    protected void Visible_False()
    {
        Session["Visible_false"] = "Y";
        Set_Textboxes_Disabled();
        tbl_tab1.Visible = false;
        tbl_tab2.Visible = false;
        tbl_tab7.Visible = false;
        gv_ProjDateRemarks.Columns[1].Visible = false;
        gv_ProjFinanceRemarks.Columns[1].Visible = false;
        gv_ProjProgressRemarks.Columns[1].Visible = false;
        gv_ProjResourceRemarks.Columns[1].Visible = false;
        gvMilestone.Columns[1].Visible = false;
        gvRisk.Columns[1].Visible = false;
        gvChangeOrder.Columns[1].Visible = false;
        gvContChangeOrder.Columns[1].Visible = false;
        gvTimeDelay.Columns[1].Visible = false;
        gvTimeDelay_Others.Columns[1].Visible = false;
        gvExtraItems.Columns[1].Visible = false;
        gvExtraItemsVendor.Columns[1].Visible = false;
        gvWarehouseStatus.Columns[1].Visible = false;
        gvContractClosure.Columns[1].Visible = false;
        gvKeyConcerns_Client.Columns[1].Visible = false;
        gvKeyObligations_Client.Columns[1].Visible = false;
        gvKeyConcerns.Columns[1].Visible = false;
        gvKeyConcerns_Constr.Columns[1].Visible = false;
        gvKeyConcerns_Vend.Columns[1].Visible = false;
        gvKeyConcerns_Contrctr.Columns[1].Visible = false;
        gvKeyConcerns_Licn.Columns[1].Visible = false;
    }

    protected void Set_Textboxes_Enabled()
    {
        txtProjectStart_Date.Enabled = true;
        txtProjectZero_Date.Enabled = true;
        txtProjectComp_Date.Enabled = true;
        txtProg_service_Sch.Enabled = true;
        txtProg_service_Act.Enabled = true;
        txtProg_physical_Sch.Enabled = true;
        txtProg_physical_Act.Enabled = true;
        txtHO_ConMamonth.Enabled = true;
        txtSite_ConMamonth.Enabled = true;
        txtHO_SpentMamonth.Enabled = true;
        txtSite_SpentMamonth.Enabled = true;
        txtHO_TaskForce.Enabled = true;
        txtSite_TaskForce.Enabled = true;
        txtAppCostText.Enabled = true;
        txtComCostText.Enabled = true;
        txtServiceLiabilityText.Enabled = true;
        txtOverallLiabilityText.Enabled = true;
        txtFeeText.Enabled = true;
        txtBillText.Enabled = true;
        txtAmtRecText.Enabled = true;
        txtoutmonthAmtText.Enabled = true;
        txtMilestone_No.Enabled = true;
        txtMilestone_Due.Enabled = true;
        txtMilestone_Achieved.Enabled = true;
        txtMilestone_Dates.Enabled = true;
        txtArbitration_Desc.Enabled = true;
        txtGo_desc.Enabled = true;
        ImgProjectStart_Date.Enabled = true;
        ImgProjectZero_Date.Enabled = true;
        ImgProjectComp_Date.Enabled = true;
        ddl_Hotpermits.Enabled = true;
        ddlConstreport.Enabled = true;
        ddlFabYard.Enabled = true;
        ddlOdcStudy.Enabled = true;
        ddlosbl_hookups.Enabled = true;
        ddlShutdown_dates.Enabled = true;
        ddlUnitPlot.Enabled = true;
        ddlUtilityHookups.Enabled = true;
        ddlWarehouse.Enabled = true;
        txt_ho_Saving.Enabled = true;
        txt_site_Saving.Enabled = true;
    }

    protected void Set_Textboxes_Disabled()
    {
        txtProjectStart_Date.Enabled = false;
        txtProjectZero_Date.Enabled = false;
        txtProjectComp_Date.Enabled = false;
        txtProg_service_Sch.Enabled = false;
        txtProg_service_Act.Enabled = false;
        txtProg_physical_Sch.Enabled = false;
        txtProg_physical_Act.Enabled = false;
        txtHO_ConMamonth.Enabled = false;
        txtSite_ConMamonth.Enabled = false;
        txtHO_SpentMamonth.Enabled = false;
        txtSite_SpentMamonth.Enabled = false;
        txtHO_TaskForce.Enabled = false;
        txtSite_TaskForce.Enabled = false;
        txtAppCostText.Enabled = false;
        txtComCostText.Enabled = false;
        txtServiceLiabilityText.Enabled = false;
        txtOverallLiabilityText.Enabled = false;
        txtFeeText.Enabled = false;
        txtBillText.Enabled = false;
        txtAmtRecText.Enabled = false;
        txtoutmonthAmtText.Enabled = false;
        txtMilestone_No.Enabled = false;
        txtMilestone_Due.Enabled = false;
        txtMilestone_Achieved.Enabled = false;
        txtMilestone_Dates.Enabled = false;
        txtArbitration_Desc.Enabled = false;
        txtGo_desc.Enabled = false;
        ImgProjectStart_Date.Enabled = false;
        ImgProjectZero_Date.Enabled = false;
        ImgProjectComp_Date.Enabled = false;
        ddl_Hotpermits.Enabled = false;
        ddlConstreport.Enabled = false;
        ddlFabYard.Enabled = false;
        ddlOdcStudy.Enabled = false;
        ddlosbl_hookups.Enabled = false;
        ddlShutdown_dates.Enabled = false;
        ddlUnitPlot.Enabled = false;
        ddlUtilityHookups.Enabled = false;
        ddlWarehouse.Enabled = false;
        txt_ho_Saving.Enabled = false;
        txt_site_Saving.Enabled = false;
    }

    protected void Set_Textboxes_Null_Values()
    {
        txtProjectStart_Date.Text = "";
        txtProjectZero_Date.Text = "";
        txtProjectComp_Date.Text = "";
        txtProg_service_Sch.Text = "";
        txtProg_service_Act.Text = "";
        txtProg_physical_Sch.Text = "";
        txtProg_physical_Act.Text = "";
        txtHO_ConMamonth.Text = "";
        txtSite_ConMamonth.Text = "";
        txtHO_SpentMamonth.Text = "";
        txtSite_SpentMamonth.Text = "";
        txtHO_TaskForce.Text = "";
        txtSite_TaskForce.Text = "";
        txtAppCostText.Text = "";
        txtComCostText.Text = "";
        txtServiceLiabilityText.Text = "";
        txtOverallLiabilityText.Text = "";
        txtFeeText.Text = "";
        txtBillText.Text = "";
        txtAmtRecText.Text = "";
        txtoutmonthAmtText.Text = "";
        txtMilestone_No.Text = "";
        txtMilestone_Due.Text = "";
        txtMilestone_Achieved.Text = "";
        txtMilestone_Dates.Text = "";
        txtArbitration_Desc.Text = "";
        txtGo_desc.Text = "";
        txt_ho_Saving.Text = "";
        txt_site_Saving.Text = "";
    }

    protected void Reset_Dropdownlist()
    {
        ddl_Hotpermits.SelectedIndex = 0;
        ddlConstreport.SelectedIndex = 0;
        ddlFabYard.SelectedIndex = 0;
        ddlOdcStudy.SelectedIndex = 0;
        ddlosbl_hookups.SelectedIndex = 0;
        ddlShutdown_dates.SelectedIndex = 0;
        ddlUnitPlot.SelectedIndex = 0;
        ddlUtilityHookups.SelectedIndex = 0;
        ddlWarehouse.SelectedIndex = 0;
    }

    //Employee - GM and above
    public string Edit_Rights()
    {
        string edit_flag = "N";
        StringBuilder sbQuery = new StringBuilder();
        Dictionary<string, string> paramList = new Dictionary<string, string>();
        sbQuery.Append("SELECT count (1) FROM CM_USERS where emp_no=:emp_no and EDIT_ROLE = 'Y' ");
        paramList.Add(":emp_no", Session["USERID"].ToString());
        int count = objDB.ExecuteStatementCount(sbQuery.ToString(), paramList);
        if (count > 0)
        {
            edit_flag = "Y";
        }
        return edit_flag;
    }

    protected bool Check_Proj_Mgr()
    {
        bool chk_proj_mgr = false;
        try
        {
            string Job_no = ddJobNumber.SelectedValue.ToString().Trim();
            StringBuilder sbCount_Query = new StringBuilder();
            Dictionary<string, string> count_paramList = new Dictionary<string, string>();
            sbCount_Query.Append("select count (1) from CMR_PROJECT_DATA where (PROJ_MGR IS NOT NULL and CONTRACT_MGR IS NOT NULL) and JOB_NO = :JOB_NO_WHR");
            count_paramList.Add(":JOB_NO_WHR", Job_no);
            string str_record = objDB.executeScalar(sbCount_Query.ToString(), count_paramList);
            Int32 count_record = Convert.ToInt32(str_record);
            if (count_record > 0)
            {
                chk_proj_mgr = true;
            }
        }
        catch (Exception)
        {

        }
        return chk_proj_mgr;
    }

    protected void Get_Data()
    {
        Get_Project_Info();
        Insert_Default_Grid_data();
        Get_Project_Details();
        Get_Milestone_Details();
        Get_Site_Related_Data();
    }

    protected void Get_Project_Info()
    {
        try
        {
            string Job_no = ddJobNumber.SelectedValue.ToString().Trim();
            string Year_Code = ddlYear.SelectedItem.ToString().Trim();
            string Month_Code = ddlMonth.SelectedValue.ToString().Trim();
            //sbQuery.Append(" AND MONTH_CODE = :MONTH_CODE_WHR AND YEAR_CODE =:YEAR_CODE_WHR ");
            StringBuilder sbQuery_1 = new StringBuilder();
            Dictionary<string, string> paramList_1 = new Dictionary<string, string>();
            sbQuery_1.Append(@" SELECT a.PROJECT_TITLE, a.CLIENT, A.PROJ_MGR_NAME, A.CONTRACT_MGR_NAME, ");
            sbQuery_1.Append(" A.PROJECT_GROUP_DESC, A.SERVICE_CAT_DESC as PROJECT_TYPE_DESC, A.JOB_STATUS  ");
            sbQuery_1.Append(" FROM CMR_PROJECT_DATA a where A.JOB_NO = :JOB_NO_WHR ");
            paramList_1.Add(":JOB_NO_WHR", Job_no);
            DataTable dtble_ProjData_1 = new DataTable();
            dtble_ProjData_1 = objDB.bindDataTable(sbQuery_1.ToString(), paramList_1);
            if (dtble_ProjData_1.Rows.Count > 0)
            {
                for (int i = 0; i < dtble_ProjData_1.Rows.Count; i++)
                {
                    DataRow dataRow_1 = dtble_ProjData_1.Rows[i];
                    if (!string.IsNullOrEmpty((string)dataRow_1["PROJECT_TITLE"].ToString()) == true)
                    {
                        lblJobdescText.Text = (string)dataRow_1["PROJECT_TITLE"].ToString();
                    }
                    else
                    {
                        lblJobdescText.Text = "";
                    }
                    if (!string.IsNullOrEmpty((string)dataRow_1["client"].ToString()) == true)
                    {
                        lblClientText.Text = (string)dataRow_1["client"].ToString();
                    }
                    else
                    {
                        lblClientText.Text = "";
                    }
                    if (!string.IsNullOrEmpty((string)dataRow_1["PROJ_MGR_NAME"].ToString()) == true)
                    {
                        lblProjMgrText.Text = (string)dataRow_1["PROJ_MGR_NAME"].ToString();
                    }
                    else
                    {
                        lblProjMgrText.Text = "";
                    }
                    if (!string.IsNullOrEmpty((string)dataRow_1["CONTRACT_MGR_NAME"].ToString()) == true)
                    {
                        lblContractMgrText.Text = (string)dataRow_1["CONTRACT_MGR_NAME"].ToString();
                    }
                    else
                    {
                        lblContractMgrText.Text = "";
                    }
                    if (!string.IsNullOrEmpty((string)dataRow_1["PROJECT_GROUP_DESC"].ToString()) == true)
                    {
                        lblProjGroupText.Text = (string)dataRow_1["PROJECT_GROUP_DESC"].ToString();
                    }
                    else
                    {
                        lblProjGroupText.Text = "";
                    }
                    if (!string.IsNullOrEmpty((string)dataRow_1["PROJECT_TYPE_DESC"].ToString()) == true)
                    {
                        lblProjTypeText.Text = (string)dataRow_1["PROJECT_TYPE_DESC"].ToString();
                    }
                    else
                    {
                        lblProjTypeText.Text = "";
                    }
                }
            }

            StringBuilder sbQuery = new StringBuilder();
            Dictionary<string, string> paramList = new Dictionary<string, string>();
            sbQuery.Append(@" SELECT TO_CHAR (B.FREEZED_ON, 'DD/Mon/YYYY') FREEZED_ON, B.FREEZED_BY  ");
            sbQuery.Append(" FROM CMR_PROJECT_SUMMARY_DATA b WHERE B.JOB_NO = :JOB_NO_WHR ");
            sbQuery.Append(" AND B.MONTH_CODE = :MONTH_CODE_WHR AND B.YEAR_CODE =:YEAR_CODE_WHR ");
            paramList.Add(":JOB_NO_WHR", Job_no);
            paramList.Add(":MONTH_CODE_WHR", Month_Code);
            paramList.Add(":YEAR_CODE_WHR", Year_Code);
            DataTable dtble_ProjData = new DataTable();
            dtble_ProjData = objDB.bindDataTable(sbQuery.ToString(), paramList);
            if (dtble_ProjData.Rows.Count > 0)
            {
                for (int i = 0; i < dtble_ProjData.Rows.Count; i++)
                {
                    DataRow dataRow = dtble_ProjData.Rows[i];
                    if (!string.IsNullOrEmpty((string)dataRow["FREEZED_BY"].ToString()) == true)
                    {
                        lblSubmited_by.Text = (string)dataRow["FREEZED_BY"].ToString();
                    }
                    else
                    {
                        lblSubmited_by.Text = "";
                    }

                    if (!string.IsNullOrEmpty((string)dataRow["FREEZED_ON"].ToString()) == true)
                    {
                        lblSubmited_On.Text = (string)dataRow["FREEZED_ON"].ToString();
                    }
                    else
                    {
                        lblSubmited_On.Text = "";
                    }
                }
            }
        }
        catch (Exception)
        {

        }
    }

    protected void Get_Project_Details()
    {
        try
        {
            string Job_no = ddJobNumber.SelectedValue.ToString().Trim();
            string Year_Code = ddlYear.SelectedItem.ToString().Trim();
            string Month_Code = ddlMonth.SelectedValue.ToString().Trim();
            string User = Session["USERID"].ToString().Trim();
            StringBuilder sbQuery = new StringBuilder();
            Dictionary<string, string> paramList = new Dictionary<string, string>();
            sbQuery.Append(@"SELECT TO_CHAR(PROJECT_START_DATE,'dd/Mon/yyyy') PROJECT_START_DATE,TO_CHAR(PROJECT_ZERO_DATE,'dd/Mon/yyyy') PROJECT_ZERO_DATE,TO_CHAR(PROJECT_SCH_COMP_DATE,'dd/Mon/yyyy') PROJECT_SCH_COMP_DATE, PROGRESS_SCH_SERVICES, PROGRESS_ACT_SERVICES, PROGRESS_SCH_PHYSICAL, PROGRESS_ACT_PHYSICAL, CONTROL_MAN_MONTHS_HO, ");
            sbQuery.Append(" CONTROL_MAN_MONTHS_SITE, SPENT_MAN_MONTHS_HO, SPENT_MAN_MONTHS_SITE, TASK_FORCE_HO, TASK_FORCE_SITE, PROJECT_APPROVED_COST, ");
            sbQuery.Append(" PROJECT_COMMITTED_COST, EIL_SERVICE_LIABILITY, OVERALL_PROJ_LIABILITY, EIL_FEE, BILLED_INVOICE, AMOUNT_RECEIVED, OUTSTANDING_AMOUNT_3MONTHS ");
            //sbQuery.Append(" from CM_PROJECT_DETAILS where JOB_NO =:JOB_NO_WHR AND MONTH_CODE = :MONTH_CODE_WHR AND YEAR_CODE =:YEAR_CODE_WHR ");
            sbQuery.Append(" ,REPEAT_ENGG,SAVING_MAN_MONTHS_HO,SAVING_MAN_MONTHS_SITE from CM_PROJECT_DETAILS where JOB_NO =:JOB_NO_WHR AND MONTH_CODE = :MONTH_CODE_WHR AND YEAR_CODE =:YEAR_CODE_WHR ");
            paramList.Add(":JOB_NO_WHR", Job_no);
            paramList.Add(":MONTH_CODE_WHR", Month_Code);
            paramList.Add(":YEAR_CODE_WHR", Year_Code);
            DataTable dtble_ProjMapper = new DataTable();
            dtble_ProjMapper = objDB.bindDataTable(sbQuery.ToString(), paramList);
            if (dtble_ProjMapper.Rows.Count > 0)
            {
                for (int i = 0; i < dtble_ProjMapper.Rows.Count; i++)
                {
                    DataRow dataRow = dtble_ProjMapper.Rows[i];

                    if (!string.IsNullOrEmpty((string)dataRow["PROJECT_START_DATE"].ToString()) == true)
                    {
                        txtProjectStart_Date.Text = (string)dataRow["PROJECT_START_DATE"].ToString();
                    }
                    if (!string.IsNullOrEmpty((string)dataRow["PROJECT_ZERO_DATE"].ToString()) == true)
                    {
                        txtProjectZero_Date.Text = (string)dataRow["PROJECT_ZERO_DATE"].ToString();
                    }
                    if (!string.IsNullOrEmpty((string)dataRow["PROJECT_SCH_COMP_DATE"].ToString()) == true)
                    {
                        txtProjectComp_Date.Text = (string)dataRow["PROJECT_SCH_COMP_DATE"].ToString();
                    }
                    if (!string.IsNullOrEmpty((string)dataRow["PROGRESS_SCH_SERVICES"].ToString()) == true)
                    {
                        txtProg_service_Sch.Text = (string)dataRow["PROGRESS_SCH_SERVICES"].ToString();
                    }
                    if (!string.IsNullOrEmpty((string)dataRow["PROGRESS_ACT_SERVICES"].ToString()) == true)
                    {
                        txtProg_service_Act.Text = (string)dataRow["PROGRESS_ACT_SERVICES"].ToString();
                    }
                    if (!string.IsNullOrEmpty((string)dataRow["PROGRESS_SCH_PHYSICAL"].ToString()) == true)
                    {
                        txtProg_physical_Sch.Text = (string)dataRow["PROGRESS_SCH_PHYSICAL"].ToString();
                    }
                    if (!string.IsNullOrEmpty((string)dataRow["PROGRESS_ACT_PHYSICAL"].ToString()) == true)
                    {
                        txtProg_physical_Act.Text = (string)dataRow["PROGRESS_ACT_PHYSICAL"].ToString();
                    }
                    if (!string.IsNullOrEmpty((string)dataRow["CONTROL_MAN_MONTHS_HO"].ToString()) == true)
                    {
                        txtHO_ConMamonth.Text = (string)dataRow["CONTROL_MAN_MONTHS_HO"].ToString();
                    }
                    if (!string.IsNullOrEmpty((string)dataRow["CONTROL_MAN_MONTHS_SITE"].ToString()) == true)
                    {
                        txtSite_ConMamonth.Text = (string)dataRow["CONTROL_MAN_MONTHS_SITE"].ToString();
                    }
                    if (!string.IsNullOrEmpty((string)dataRow["SPENT_MAN_MONTHS_HO"].ToString()) == true)
                    {
                        txtHO_SpentMamonth.Text = (string)dataRow["SPENT_MAN_MONTHS_HO"].ToString();
                    }
                    if (!string.IsNullOrEmpty((string)dataRow["SPENT_MAN_MONTHS_SITE"].ToString()) == true)
                    {
                        txtSite_SpentMamonth.Text = (string)dataRow["SPENT_MAN_MONTHS_SITE"].ToString();
                    }
                    if (!string.IsNullOrEmpty((string)dataRow["TASK_FORCE_HO"].ToString()) == true)
                    {
                        txtHO_TaskForce.Text = (string)dataRow["TASK_FORCE_HO"].ToString();
                    }
                    if (!string.IsNullOrEmpty((string)dataRow["TASK_FORCE_SITE"].ToString()) == true)
                    {
                        txtSite_TaskForce.Text = (string)dataRow["TASK_FORCE_SITE"].ToString();
                    }
                    if (!string.IsNullOrEmpty((string)dataRow["PROJECT_APPROVED_COST"].ToString()) == true)
                    {
                        txtAppCostText.Text = (string)dataRow["PROJECT_APPROVED_COST"].ToString();
                    }
                    if (!string.IsNullOrEmpty((string)dataRow["PROJECT_COMMITTED_COST"].ToString()) == true)
                    {
                        txtComCostText.Text = (string)dataRow["PROJECT_COMMITTED_COST"].ToString();
                    }
                    if (!string.IsNullOrEmpty((string)dataRow["EIL_SERVICE_LIABILITY"].ToString()) == true)
                    {
                        txtServiceLiabilityText.Text = (string)dataRow["EIL_SERVICE_LIABILITY"].ToString();
                    }
                    if (!string.IsNullOrEmpty((string)dataRow["OVERALL_PROJ_LIABILITY"].ToString()) == true)
                    {
                        txtOverallLiabilityText.Text = (string)dataRow["OVERALL_PROJ_LIABILITY"].ToString();
                    }
                    if (!string.IsNullOrEmpty((string)dataRow["EIL_FEE"].ToString()) == true)
                    {
                        txtFeeText.Text = (string)dataRow["EIL_FEE"].ToString();
                    }
                    if (!string.IsNullOrEmpty((string)dataRow["BILLED_INVOICE"].ToString()) == true)
                    {
                        txtBillText.Text = (string)dataRow["BILLED_INVOICE"].ToString();
                    }
                    if (!string.IsNullOrEmpty((string)dataRow["AMOUNT_RECEIVED"].ToString()) == true)
                    {
                        txtAmtRecText.Text = (string)dataRow["AMOUNT_RECEIVED"].ToString();
                    }
                    if (!string.IsNullOrEmpty((string)dataRow["OUTSTANDING_AMOUNT_3MONTHS"].ToString()) == true)
                    {
                        txtoutmonthAmtText.Text = (string)dataRow["OUTSTANDING_AMOUNT_3MONTHS"].ToString();
                    }
                    if (!string.IsNullOrEmpty((string)dataRow["REPEAT_ENGG"].ToString()) == true)
                    {
                        ddl_RepeatEngg.SelectedValue = (string)dataRow["REPEAT_ENGG"].ToString();
                    }
                    else
                    {
                        ddl_RepeatEngg.SelectedIndex = 0;
                    }
                    if (ddl_RepeatEngg.SelectedValue == "Y")
                    {
                        tr_saving.Visible = true;
                        if (!string.IsNullOrEmpty((string)dataRow["SAVING_MAN_MONTHS_HO"].ToString()) == true)
                        {
                            txt_ho_Saving.Text = (string)dataRow["SAVING_MAN_MONTHS_HO"].ToString();
                        }
                        if (!string.IsNullOrEmpty((string)dataRow["SAVING_MAN_MONTHS_SITE"].ToString()) == true)
                        {
                            txt_site_Saving.Text = (string)dataRow["SAVING_MAN_MONTHS_SITE"].ToString();
                        }
                    }
                    else
                    {
                        tr_saving.Visible = false;
                    }
                }
            }
        }
        catch (Exception ex)
        {
            lblError.Text = ex.ToString();
        }
    }

    protected void Get_Milestone_Details()
    {
        try
        {
            string Job_no = ddJobNumber.SelectedValue.ToString().Trim();
            string Year_Code = ddlYear.SelectedItem.ToString().Trim();
            string Month_Code = ddlMonth.SelectedValue.ToString().Trim();
            string User = Session["USERID"].ToString().Trim();
            StringBuilder sbQuery = new StringBuilder();
            Dictionary<string, string> paramList = new Dictionary<string, string>();
            sbQuery.Append(@"SELECT MILESTONE_TOTAL_NO, MILESTONE_DUE, MILESTONE_ACHIEVED, MILESTONE_WITH_DATES from CM_MILESTONE_DETAILS ");
            sbQuery.Append(" where JOB_NO =:JOB_NO_WHR AND MONTH_CODE = :MONTH_CODE_WHR AND YEAR_CODE =:YEAR_CODE_WHR");
            paramList.Add(":JOB_NO_WHR", Job_no);
            paramList.Add(":MONTH_CODE_WHR", Month_Code);
            paramList.Add(":YEAR_CODE_WHR", Year_Code);

            DataTable dtble_DataMapper = new DataTable();
            dtble_DataMapper = objDB.bindDataTable(sbQuery.ToString(), paramList);

            if (dtble_DataMapper.Rows.Count > 0)
            {
                for (int i = 0; i < dtble_DataMapper.Rows.Count; i++)
                {
                    DataRow dataRow = dtble_DataMapper.Rows[i];
                    if (!string.IsNullOrEmpty((string)dataRow["MILESTONE_TOTAL_NO"].ToString()) == true)
                    {
                        Int32 int_Total_No = Convert.ToInt32((string)dataRow["MILESTONE_TOTAL_NO"].ToString());
                        txtMilestone_No.Text = int_Total_No.ToString();
                    }
                    if (!string.IsNullOrEmpty((string)dataRow["MILESTONE_DUE"].ToString()) == true)
                    {
                        Int32 int_Due = Convert.ToInt32((string)dataRow["MILESTONE_DUE"].ToString());
                        txtMilestone_Due.Text = int_Due.ToString();
                    }
                    if (!string.IsNullOrEmpty((string)dataRow["MILESTONE_ACHIEVED"].ToString()) == true)
                    {
                        Int32 int_Achieved = Convert.ToInt32((string)dataRow["MILESTONE_ACHIEVED"].ToString());
                        txtMilestone_Achieved.Text = int_Achieved.ToString();
                    }
                    if (!string.IsNullOrEmpty((string)dataRow["MILESTONE_WITH_DATES"].ToString()) == true)
                    {
                        Int32 int_Dates = Convert.ToInt32((string)dataRow["MILESTONE_WITH_DATES"].ToString());
                        txtMilestone_Dates.Text = int_Dates.ToString();
                    }
                }
            }
        }
        catch (Exception ex)
        {
            lblError.Text = ex.ToString();
        }
    }

    protected void Get_Site_Related_Data()
    {
        try
        {
            string Job_no = ddJobNumber.SelectedValue.ToString().Trim();
            string Year_Code = ddlYear.SelectedItem.ToString().Trim();
            string Month_Code = ddlMonth.SelectedValue.ToString().Trim();
            string User = Session["USERID"].ToString().Trim();
            StringBuilder sbQuery = new StringBuilder();
            Dictionary<string, string> paramList = new Dictionary<string, string>();
            sbQuery.Append(@"select UNIT_PLOT_HANDOVER, CONST_REPORT, ODC_STUDY, OSBL_PROCESS_HOOKUPS, FABRICATION_YARD, HOT_PERMITS, UTILITIES_HOOKUP, ");
            sbQuery.Append(" WAREHOUSE, SHUTDOWN_DATES, ARBITRATION_DISPUTED_AMOUNT, GO_DECISION from CM_SITE_QUERY_DETAILS ");
            sbQuery.Append(" where JOB_NO =:JOB_NO_WHR AND MONTH_CODE = :MONTH_CODE_WHR AND YEAR_CODE =:YEAR_CODE_WHR ");
            paramList.Add(":JOB_NO_WHR", Job_no);
            paramList.Add(":MONTH_CODE_WHR", Month_Code);
            paramList.Add(":YEAR_CODE_WHR", Year_Code);

            DataTable dt_SiteData = new DataTable();
            dt_SiteData = objDB.bindDataTable(sbQuery.ToString(), paramList);

            if (dt_SiteData.Rows.Count > 0)
            {
                for (int i = 0; i < dt_SiteData.Rows.Count; i++)
                {
                    DataRow dataRow = dt_SiteData.Rows[i];
                    if (!string.IsNullOrEmpty((string)dataRow["UNIT_PLOT_HANDOVER"].ToString()) == true)
                    {
                        string strUnitPlot = (string)dataRow["UNIT_PLOT_HANDOVER"].ToString();
                        ddlUnitPlot.SelectedValue = strUnitPlot.ToString();
                    }
                    if (!string.IsNullOrEmpty((string)dataRow["CONST_REPORT"].ToString()) == true)
                    {
                        string strConst_Report = (string)dataRow["CONST_REPORT"].ToString();
                        ddlConstreport.SelectedValue = strConst_Report.ToString();
                    }
                    if (!string.IsNullOrEmpty((string)dataRow["ODC_STUDY"].ToString()) == true)
                    {
                        string str_ODC_Study = (string)dataRow["ODC_STUDY"].ToString();
                        ddlOdcStudy.SelectedValue = str_ODC_Study.ToString();
                    }
                    if (!string.IsNullOrEmpty((string)dataRow["OSBL_PROCESS_HOOKUPS"].ToString()) == true)
                    {
                        string str_OSBL_Hook = (string)dataRow["OSBL_PROCESS_HOOKUPS"].ToString();
                        ddlosbl_hookups.SelectedValue = str_OSBL_Hook.ToString();
                    }
                    if (!string.IsNullOrEmpty((string)dataRow["FABRICATION_YARD"].ToString()) == true)
                    {
                        string strFabYard = (string)dataRow["FABRICATION_YARD"].ToString();
                        ddlFabYard.SelectedValue = strFabYard.ToString();
                    }
                    if (!string.IsNullOrEmpty((string)dataRow["HOT_PERMITS"].ToString()) == true)
                    {
                        string strHot_permits = (string)dataRow["HOT_PERMITS"].ToString();
                        ddl_Hotpermits.SelectedValue = strHot_permits.ToString();
                    }
                    if (!string.IsNullOrEmpty((string)dataRow["UTILITIES_HOOKUP"].ToString()) == true)
                    {
                        string strUtility_hook = (string)dataRow["UTILITIES_HOOKUP"].ToString();
                        ddlUtilityHookups.SelectedValue = strUtility_hook.ToString();
                    }
                    if (!string.IsNullOrEmpty((string)dataRow["WAREHOUSE"].ToString()) == true)
                    {
                        string strWarehouse = (string)dataRow["WAREHOUSE"].ToString();
                        ddlWarehouse.SelectedValue = strWarehouse.ToString();
                    }
                    if (!string.IsNullOrEmpty((string)dataRow["SHUTDOWN_DATES"].ToString()) == true)
                    {
                        string strShutdownDate = (string)dataRow["SHUTDOWN_DATES"].ToString();
                        ddlShutdown_dates.SelectedValue = strShutdownDate.ToString();
                    }
                    if (!string.IsNullOrEmpty((string)dataRow["ARBITRATION_DISPUTED_AMOUNT"].ToString()) == true)
                    {
                        string strArbitrationAmt = (string)dataRow["ARBITRATION_DISPUTED_AMOUNT"].ToString();
                        txtArbitration_Desc.Text = strArbitrationAmt.ToString();
                    }
                    if (!string.IsNullOrEmpty((string)dataRow["GO_DECISION"].ToString()) == true)
                    {
                        string strGo_desc = (string)dataRow["GO_DECISION"].ToString();
                        txtGo_desc.Text = strGo_desc.ToString();
                    }
                }
            }
        }
        catch (Exception ex)
        {
            lblError.Text = ex.ToString();
        }
    }

    protected void bindGrids()
    {
        lblError.Text = "";
        bind_Proj_Common_Remarks("CM_PROJ_KEY_DATES_REMARKS", gv_ProjDateRemarks);
        bind_Proj_Common_Remarks("CM_PROJ_FINANCE_REMARKS", gv_ProjFinanceRemarks);
        bind_Proj_Common_Remarks("CM_PROJ_PROGRESS_REMARKS", gv_ProjProgressRemarks);
        bind_Proj_Common_Remarks("CM_PROJ_RESOURCE_REMARKS", gv_ProjResourceRemarks);
        bindMilestone_Details();
        bindRisk_Details();
        bindChangeOrder_Details(Constants.user_eil, gvChangeOrder);
        bindChangeOrder_Details(Constants.user_contractor, gvContChangeOrder);
        bindTimeDelay_eil_Details();
        bindTimeDelay_others_Details();
        bindExtraItems_Details(Constants.user_contractor, gvExtraItems);
        bindExtraItems_Details(Constants.user_vendor, gvExtraItemsVendor);
        bindWarehouse_Details();
        bindContractClosre_Details();
        bindKeyConcernsClient_Details();
        bindKeyObligationsClient_Details();
        bindKeyConcerns_Details(Constants.CONCERN_ENGG, gvKeyConcerns);
        bindKeyConcerns_Details(Constants.CONCERN_CONSTR, gvKeyConcerns_Constr);
        bindKeyConcerns_Details(Constants.CONCERN_VENDOR, gvKeyConcerns_Vend);
        bindKeyConcerns_Details(Constants.CONCERN_CONTRACTOR, gvKeyConcerns_Contrctr);
        bindKeyConcerns_Details(Constants.CONCERN_LICENSOR, gvKeyConcerns_Licn);
    }

    protected bool Check_Month_Data()
    {
        bool data_flag = false;
        try
        {
            string Job_no = ddJobNumber.SelectedValue.ToString().Trim();
            string Year_Code = ddlYear.SelectedItem.ToString().Trim();
            string Month_Code = ddlMonth.SelectedValue.ToString().Trim();
            string User = Session["USERID"].ToString().Trim();
            int new_mnth_code;
            int new_yr_code;
            if (Month_Code == "1")
            {
                new_mnth_code = 12;
                new_yr_code = (Convert.ToInt32(Year_Code)) - 1;
            }
            else
            {
                new_mnth_code = Convert.ToInt32(Month_Code) - 1;
                new_yr_code = Convert.ToInt32(Year_Code);
            }

            StringBuilder sbPrvMnth_Query = new StringBuilder();
            Dictionary<string, string> PrevMnth_paramList = new Dictionary<string, string>();
            sbPrvMnth_Query.Append("select count (1) from CM_PROJECT_DETAILS WHERE JOB_NO =:JOB_NO AND YEAR_CODE =:YEAR_CODE ");
            PrevMnth_paramList.Add("JOB_NO", Job_no);
            PrevMnth_paramList.Add("YEAR_CODE", Convert.ToString(new_yr_code));
            string str_prvrecord = objDB.executeScalar(sbPrvMnth_Query.ToString(), PrevMnth_paramList);
            Int32 count_prvrecord = Convert.ToInt32(str_prvrecord);
            if (count_prvrecord > 0)
            {
                StringBuilder sbPrstMnth_Query = new StringBuilder();
                Dictionary<string, string> PrstMnth_paramList = new Dictionary<string, string>();
                sbPrstMnth_Query.Append("select count (1) from CM_PROJECT_DETAILS WHERE JOB_NO =:JOB_NO AND MONTH_CODE = :MONTH_CODE AND YEAR_CODE =:YEAR_CODE AND FREEZED_FLAG='Y' ");
                PrstMnth_paramList.Add("JOB_NO", Job_no);
                PrstMnth_paramList.Add("MONTH_CODE", Convert.ToString(new_mnth_code));
                PrstMnth_paramList.Add("YEAR_CODE", Convert.ToString(new_yr_code));
                string str_PrstRecord = objDB.executeScalar(sbPrstMnth_Query.ToString(), PrstMnth_paramList);
                Int32 count_PrstRecord = Convert.ToInt32(str_PrstRecord);
                if (count_PrstRecord > 0)
                {
                    data_flag = true;
                }
            }
        }
        catch (Exception)
        {

        }
        return data_flag;
    }

    protected bool Check_Freeze_Month_Data()
    {
        bool data_flag = false;
        try
        {
            string Job_no = ddJobNumber.SelectedValue.ToString().Trim();
            string Year_Code = ddlYear.SelectedItem.ToString().Trim();
            string Month_Code = ddlMonth.SelectedValue.ToString().Trim();
            string User = Session["USERID"].ToString().Trim();

            StringBuilder sbPrstMnth_Query = new StringBuilder();
            Dictionary<string, string> PrstMnth_paramList = new Dictionary<string, string>();
            sbPrstMnth_Query.Append("select count (1) from CM_PROJECT_DETAILS WHERE JOB_NO =:JOB_NO AND MONTH_CODE = :MONTH_CODE AND YEAR_CODE =:YEAR_CODE AND FREEZED_FLAG = 'Y' ");
            PrstMnth_paramList.Add("JOB_NO", Job_no);
            PrstMnth_paramList.Add("MONTH_CODE", Month_Code);
            PrstMnth_paramList.Add("YEAR_CODE", Year_Code);
            string str_PrstRecord = objDB.executeScalar(sbPrstMnth_Query.ToString(), PrstMnth_paramList);
            Int32 count_PrstRecord = Convert.ToInt32(str_PrstRecord);
            if (count_PrstRecord > 0)
            {
                lblFreeze_msg.Text = "( Contract Manager Report has been submited for the selected month )";
                tr_freeze.Visible = true;
                btnFreeze.Visible = false;
                Visible_False();
            }
            else
            {
                string user_role = Session["User_Role"].ToString();
                string Edit_Rights = Session["Edit_Rights"].ToString();
                if ((user_role == "E") || (user_role == "S") || (Edit_Rights == "Y"))
                {
                    Visible_True();
                }
                else
                {
                    Visible_False();
                }
                tr_freeze.Visible = false;
                if (Edit_Rights == "Y")
                {
                    btnFreeze.Visible = true;
                }
                else
                {
                    btnFreeze.Visible = false;
                }
            }
        }
        catch (Exception)
        {

        }
        return data_flag;
    }

    protected bool Check_Save_Data()
    {
        bool data_flag = false;
        try
        {
            string Job_no = ddJobNumber.SelectedValue.ToString().Trim();
            string Year_Code = ddlYear.SelectedItem.ToString().Trim();
            string Month_Code = ddlMonth.SelectedValue.ToString().Trim();
            string User = Session["USERID"].ToString().Trim();

            StringBuilder sbPrstMnth_Query = new StringBuilder();
            Dictionary<string, string> PrstMnth_paramList = new Dictionary<string, string>();
            sbPrstMnth_Query.Append("select count (1) from CM_PROJECT_DETAILS WHERE JOB_NO =:JOB_NO AND MONTH_CODE = :MONTH_CODE AND YEAR_CODE =:YEAR_CODE AND FREEZED_FLAG='N'");
            PrstMnth_paramList.Add("JOB_NO", Job_no);
            PrstMnth_paramList.Add("MONTH_CODE", Month_Code);
            PrstMnth_paramList.Add("YEAR_CODE", Year_Code);
            string str_PrstRecord = objDB.executeScalar(sbPrstMnth_Query.ToString(), PrstMnth_paramList);
            Int32 count_PrstRecord = Convert.ToInt32(str_PrstRecord);
            if (count_PrstRecord == 0)
            {
                data_flag = true;
            }
        }
        catch (Exception)
        {

        }
        return data_flag;
    }

    protected bool Check_Job_Data()
    {
        bool Job_data_flag = false;
        try
        {
            string Job_no = ddJobNumber.SelectedValue.ToString().Trim();
            StringBuilder sbJob_Query = new StringBuilder();
            Dictionary<string, string> Job_paramList = new Dictionary<string, string>();
            sbJob_Query.Append("select count (1) from CM_PROJECT_DETAILS WHERE JOB_NO =:JOB_NO ");
            Job_paramList.Add("JOB_NO", Job_no);
            string str_JobRecord = objDB.executeScalar(sbJob_Query.ToString(), Job_paramList);
            Int32 count_JobRecord = Convert.ToInt32(str_JobRecord);
            if (count_JobRecord == 0)
            {
                Job_data_flag = true;
            }
        }
        catch (Exception)
        {

        }
        return Job_data_flag;
    }

    #region Dropdown_Bind

    protected void populate_Default_Years()
    {

        ddlYear.Items.Clear();
        int prev_years = System.DateTime.Now.Year - 1;
        int Current_Year = System.DateTime.Now.Year;
        ddlYear.Items.Add("--Select Year--");
        for (int i = Current_Year; i >= prev_years; i--)
        {
            ddlYear.Items.Add(i.ToString());
        }
        ddlYear.Items.FindByValue(System.DateTime.Now.Year.ToString()).Selected = true;  //set current year as selected
    }

    protected void populate_Job_Years()
    {
        ddlYear.Items.Clear();
        string Job_no = ddJobNumber.SelectedValue.ToString().Trim();
        StringBuilder sbQuery = new StringBuilder();
        Dictionary<string, string> paramList = new Dictionary<string, string>();
        sbQuery.Append("SELECT DISTINCT YEAR_CODE FROM CM_PROJECT_DETAILS WHERE JOB_NO = :JOB_NO ORDER BY YEAR_CODE DESC");
        paramList.Add(":JOB_NO", Job_no);
        if (sbQuery.Length > 0)
            objDB.bindDropDownList(ddlYear, sbQuery.ToString(), paramList, "YEAR_CODE", "YEAR_CODE", "", "--Select Year--");
    }

    //protected void bindJobNumber_old()
    //{
    //    StringBuilder sbQuery = new StringBuilder();
    //    Dictionary<string, string> paramList = new Dictionary<string, string>();
    //    string user_role = Session["User_Role"].ToString();
    //    string Edit_Rights = Session["Edit_Rights"].ToString();
    //    if ((user_role == "S"))
    //    {
    //        //Super user
    //        //sbQuery.Append("select JOBNO JOB_NO, JOBNO ||'-'|| PROJECT_TITLE JOB_NO_DESC from IMIS.IMIS_QRY_CORPREVIEW ORDER BY JOBNO");
    //        sbQuery.Append("SELECT DISTINCT a.JOB_NO, a.JOB_NO || ' [' || B.DESCRIBE || ']' JOB_NO_DESC FROM CM_JOB_MSTR a,  ");
    //        sbQuery.Append(" projweb.MKTG_PROJECT_MSTR b WHERE A.JOB_NO=B.PROJECTNO ORDER BY A.JOB_NO ");
    //    }
    //    else if (user_role == "E" || Edit_Rights == "Y")
    //    {
    //        //Normal user -Edit access
    //        sbQuery.Append("select distinct JOB_NO, JOB_NO JOB_NO_DESC from CM_JOB_MSTR where (PROJ_MGR=:emp_no or CONTRACT_MGR =:emp_no) order by JOB_NO");
    //        paramList.Add(":emp_no", Session["USERID"].ToString());
    //    }
    //    else if (user_role == "V")
    //    {
    //        //General user - View Access
    //        sbQuery.Append(" select distinct JOB_NO, JOB_NO JOB_NO_DESC from CM_JOB_MSTR order by JOB_NO ");
    //    }
    //    else if (user_role == "Z")
    //    {
    //        //General user - View Access
    //        sbQuery.Append(" select distinct JOB_NO, JOB_NO JOB_NO_DESC from CMR_PROJECT_SUMMARY_DATA order by JOB_NO ");
    //    }

    //    if (sbQuery.Length > 0)
    //        objDB.bindDropDownList(ddJobNumber, sbQuery.ToString(), paramList, "JOB_NO", "JOB_NO_DESC", "", "--Select Job Number--");
    //}

    protected void bindJobNumber()
    {
        ddJobNumber.Items.Clear();
        StringBuilder sbQuery = new StringBuilder();
        Dictionary<string, string> paramList = new Dictionary<string, string>();
        string user_role = Session["User_Role"].ToString();

        //string Edit_Rights = Session["Edit_Rights"].ToString();
        if (user_role == "S")
        {

        }
        else
        {
            if ((user_role == "V"))
            {
                //sbQuery.Append(" AND PROJECT_GROUP_CODE IN  (SELECT DISTINCT C.PROJECT_GROUP FROM (select DISTINCT PROJECT_GROUP from CM_JOB_MSTR ");
                //sbQuery.Append(" where (PROJ_MGR=:empno or CONTRACT_MGR =:empno) UNION SELECT DISTINCT HH.PROJECT_GROUP_CODE ");
                //sbQuery.Append(" FROM vw_divn@pdbview_link gg, CM_LIB_PROJECT_GROUP hh ");
                //sbQuery.Append(" WHERE gg.divn_code = HH.MARKETING_GROUP_CODE AND gg.sectn_code = '0' AND gg.div_hod_no = :empno) C , CM_LIB_PROJECT_GROUP D  ");
                ////sbQuery.Append(" PROJECT_GROUP from vw_divn@pdbview_link  where sectn_code='0' and div_hod_no=:empno) C , CM_LIB_PROJECT_GROUP D  ");
                //sbQuery.Append(" WHERE C.PROJECT_GROUP = D.PROJECT_GROUP_CODE) ");
                //paramList.Add(":empno", Session["USERID"].ToString().Trim());

                sbQuery.Append(" AND (DIVISION_ID IN  (SELECT DISTINCT TO_CHAR (DIVISION_ID) FROM CMR_PROJECT_DATA ");
                sbQuery.Append(" WHERE (PROJ_MGR = :empno OR CONTRACT_MGR = :empno OR  ");
                sbQuery.Append(" DIVISION_ID IN (SELECT DIVN_CODE FROM vw_divn@pdbview_link WHERE sectn_code = '0' AND div_hod_no = :empno)))) ");
                paramList.Add(":empno", Session["USERID"].ToString().Trim());
            }
            else if (user_role == "E")
            {
                sbQuery.Append(" AND (PROJ_MGR=:emp_no or CONTRACT_MGR =:emp_no) ");
                paramList.Add(":emp_no", Session["USERID"].ToString().Trim());
            }
        }
        sbQuery.Append(" ORDER BY JOB_NO ");

        string qryJobWise = @"select DISTINCT JOB_NO, JOB_NO ||'-'|| PROJECT_TITLE JOB_NO_DESC from CMR_PROJECT_DATA where JOB_STATUS = 'O' 
                                 " + sbQuery.ToString() + " ";

        if (qryJobWise.Length > 0)
            objDB.bindDropDownList(ddJobNumber, qryJobWise.ToString(), paramList, "JOB_NO", "JOB_NO_DESC", "", "--Select Job Number--");
    }

    protected void bindMonth()
    {
        string Job_no = ddJobNumber.SelectedValue.ToString().Trim();
        string Year_Code = ddlYear.SelectedItem.ToString().Trim();

        string user_role = Session["User_Role"].ToString();
        string Edit_Rights = Session["Edit_Rights"].ToString();
        StringBuilder sbQuery = new StringBuilder();
        Dictionary<string, string> paramList = new Dictionary<string, string>();
        if ((user_role == "E") || (user_role == "S") || (Edit_Rights == "Y"))
        {
            sbQuery.Append("SELECT MONTH_CODE, MONTH_DESC FROM CM_LIB_MONTH order by MONTH_CODE");

        }
        else if ((user_role == "V") || (user_role == "Z") || (user_role == "ID") && (Edit_Rights == ""))
        {
            sbQuery.Append("SELECT DISTINCT A.MONTH_CODE, B.MONTH_DESC FROM CMR_PROJECT_SUMMARY_DATA A, CM_LIB_MONTH B ");
            sbQuery.Append(" WHERE A.JOB_NO=:JOB_NO and A.YEAR_CODE = :YEAR_CODE AND A.MONTH_CODE = B.MONTH_CODE B ");
            sbQuery.Append(" and A.FREEZED_FLAG ='Y' ORDER BY A.MONTH_CODE");
            paramList.Add(":JOB_NO", Job_no);
            paramList.Add(":YEAR_CODE", Year_Code);
        }
        if (sbQuery.Length > 0)
            objDB.bindDropDownList(ddlMonth, sbQuery.ToString(), paramList, "MONTH_CODE", "MONTH_DESC", "", "--Select Month--");

        //ddlMonth.Items.FindByValue(System.DateTime.Now.Month.ToString()).Selected = true; // Set current month as selected
    }

    private void populate_Default_Month()
    {
        ddlMonth.Items.Clear();
        ddlMonth.Items.Add(new System.Web.UI.WebControls.ListItem("Select", 0.ToString()));
        string[] months = DateTimeFormatInfo.CurrentInfo.MonthNames;
        for (int i = 0; i < months.Length - 1; i++)
        {
            ddlMonth.Items.Add(new System.Web.UI.WebControls.ListItem(months[i], (i + 1).ToString()));
        }
    }

    private void populate_Job_Month()
    {
        string Job_no = ddJobNumber.SelectedValue.ToString().Trim();
        string Year_Code = ddlYear.SelectedItem.ToString().Trim();
        string user_role = Session["User_Role"].ToString();
        string Edit_Rights = Session["Edit_Rights"].ToString();
        StringBuilder sbQuery = new StringBuilder();
        Dictionary<string, string> paramList = new Dictionary<string, string>();
        if ((user_role == "E") || (user_role == "S") || (Edit_Rights == "Y"))
        {
            sbQuery.Append("SELECT DISTINCT A.MONTH_CODE,B.MONTH_DESC FROM CM_PROJECT_DETAILS A,CM_LIB_MONTH B WHERE A.YEAR_CODE=:YEAR_CODE AND A.MONTH_CODE=B.MONTH_CODE AND A.JOB_NO =:JOB_NO ");
            sbQuery.Append(" AND A.MONTH_CODE <= (CASE WHEN A.YEAR_CODE = (SELECT TO_NUMBER (TO_CHAR (SYSDATE, 'yyyy')) FROM DUAL) ");
            sbQuery.Append(" THEN (SELECT TO_NUMBER (TO_CHAR (SYSDATE, 'mm')) FROM DUAL) ELSE 12 END)  ORDER BY A.MONTH_CODE");
            paramList.Add(":YEAR_CODE", Year_Code);
            paramList.Add("JOB_NO", Job_no);
        }
        else if ((user_role == "V") || (user_role == "Z") || (user_role == "ID") && (Edit_Rights == ""))
        {
            sbQuery.Append("SELECT DISTINCT A.MONTH_CODE, B.MONTH_DESC FROM CMR_PROJECT_SUMMARY_DATA A, CM_LIB_MONTH B ");
            sbQuery.Append(" WHERE A.JOB_NO=:JOB_NO and A.YEAR_CODE = :YEAR_CODE AND A.MONTH_CODE = B.MONTH_CODE ");
            sbQuery.Append(" and A.FREEZED_FLAG ='Y' ORDER BY A.MONTH_CODE");
            paramList.Add(":JOB_NO", Job_no);
            paramList.Add(":YEAR_CODE", Year_Code);
        }
        if (sbQuery.Length > 0)
            objDB.bindDropDownList(ddlMonth, sbQuery.ToString(), paramList, "MONTH_CODE", "MONTH_DESC", "", "--Select Month--");
    }

    protected void ddJobNumber_SelectedIndexChanged(object sender, EventArgs e)
    {
        btnFreeze.Visible = false;
        ddlYear.Items.Clear();
        ddlMonth.Items.Clear();
        if (ddJobNumber.SelectedIndex > 0)
        {
            Check_Edit_Rights();
            if (Check_Proj_Mgr() == true)
            {
                if (Check_Job_Data() == true)
                {
                    //Populate default year and Month
                    populate_Default_Years();
                    populate_Default_Month();
                }
                else
                {
                    //Populate Job year and Month
                    populate_Job_Years();
                }

                Set_Button_Visible_Logic();
            }
            else
            {
                Common.Show("Contractor Maganer not defined for the selected Project");
            }
            tr_freeze.Visible = false;
            pnl_Detail.Visible = false;
            Set_Textboxes_Null_Values();
            Reset_Dropdownlist();
        }
        else
        {
            Common.Show("Please select Job Number.");
        }
    }

    protected void ddlYear_SelectedIndexChanged(object sender, EventArgs e)
    {
        btnFreeze.Visible = false;
        if (ddlYear.SelectedIndex > 0)
        {
            if (Check_Job_Data() == false)
            {
                populate_Job_Month();
            }
            Set_Button_Visible_Logic();
            tr_freeze.Visible = false;
            pnl_Detail.Visible = false;
            Set_Textboxes_Null_Values();
            Reset_Dropdownlist();
            ddlMonth.SelectedIndex = 0;
        }
        else
        {
            Common.Show("Please select Year");
        }
    }

    protected void ddlMonth_SelectedIndexChanged(object sender, EventArgs e)
    {
        btnFreeze.Visible = false;

        if (ddlMonth.SelectedIndex > 0)
        {
            //if (Check_Month_Data() == true)
            //{
            //    btnProceed.Enabled = false;
            //    Common.Show("Kindly submit previous month data and try again for the next month data");
            //}
            //else
            //{
            //    btnProceed.Enabled = true;
            //}
            tr_freeze.Visible = false;
            Set_Button_Visible_Logic();
            pnl_Detail.Visible = false;
            Set_Textboxes_Null_Values();
            Reset_Dropdownlist();
        }
        else
        {
            Common.Show("Please select Month");
        }
    }

    #endregion

    #region Milestones_details_Bind

    protected void bindMilestone_Details()
    {
        string Job_no = ddJobNumber.SelectedValue.ToString().Trim();
        string Year_Code = ddlYear.SelectedItem.ToString().Trim();
        string Month_Code = ddlMonth.SelectedValue.ToString().Trim();
        string User = Session["USERID"].ToString().Trim();
        StringBuilder sbQuery = new StringBuilder();
        Dictionary<string, string> paramList = new Dictionary<string, string>();
        sbQuery.Append("select REMARKS_SR_NO,REMARKS from CM_MILESTONE_REMARKS  ");
        sbQuery.Append(" where JOB_NO =:JOB_NO_WHR AND MONTH_CODE = :MONTH_CODE_WHR AND YEAR_CODE =:YEAR_CODE_WHR ORDER BY REMARKS_SR_NO");
        paramList.Add(":JOB_NO_WHR", Job_no);
        paramList.Add(":MONTH_CODE_WHR", Month_Code);
        paramList.Add(":YEAR_CODE_WHR", Year_Code);
        objDB.bindGridView(gvMilestone, sbQuery.ToString(), paramList);
    }

    protected void gvMilestone_RowEditing(object sender, GridViewEditEventArgs e)
    {
        gvMilestone.EditIndex = e.NewEditIndex;
        bindMilestone_Details();
    }

    protected void gvMilestone_RowCancelingEdit(object sender, GridViewCancelEditEventArgs e)
    {
        gvMilestone.EditIndex = -1;
        bindMilestone_Details();
    }

    protected void gvMilestone_RowCommand(object sender, GridViewCommandEventArgs e)
    {
        try
        {
            lblError.Text = "";
            LinkButton senderBtn = (LinkButton)e.CommandSource;
            GridViewRow row = (GridViewRow)senderBtn.NamingContainer;
            GridView grid = (GridView)row.NamingContainer;
            string Job_no = ddJobNumber.SelectedValue.ToString().Trim();
            string Year_Code = ddlYear.SelectedItem.ToString().Trim();
            string Month_Code = ddlMonth.SelectedValue.ToString().Trim();
            string User = Session["USERID"].ToString().Trim();

            if (e.CommandName == "Update")
            {
                Label Remarks_SrNo = (Label)row.FindControl("lblM_srno");
                TextBox EditRemarksDesc = (TextBox)row.FindControl("txtedit_M_Desc");
                if (string.IsNullOrEmpty(EditRemarksDesc.Text) == true)
                {
                    lblError.Text = "Milestone Desc can not be empty";
                }
                else
                {
                    StringBuilder sbEdit_Query = new StringBuilder();
                    Dictionary<string, string> Edit_ParamList = new Dictionary<string, string>();
                    sbEdit_Query.Append(" UPDATE CM_MILESTONE_REMARKS SET  REMARKS = :REMARKS_DESC, ");
                    sbEdit_Query.Append(" UPDATED_ON = SYSDATE , UPDATED_BY=:UPDATED_BY ");
                    sbEdit_Query.Append(" WHERE JOB_NO =:JOB_NO_WHR AND MONTH_CODE = :MONTH_CODE_WHR AND YEAR_CODE =:YEAR_CODE_WHR and REMARKS_SR_NO= :REMARKS_SR_NO");
                    Edit_ParamList.Add(":REMARKS_DESC", EditRemarksDesc.Text.ToString());
                    Edit_ParamList.Add(":UPDATED_BY", User);
                    Edit_ParamList.Add(":JOB_NO_WHR", Job_no);
                    Edit_ParamList.Add(":MONTH_CODE_WHR", Month_Code);
                    Edit_ParamList.Add(":YEAR_CODE_WHR", Year_Code);
                    Edit_ParamList.Add(":REMARKS_SR_NO", Remarks_SrNo.Text.ToString());
                    int i = objDB.executeNonQuery(sbEdit_Query.ToString(), Edit_ParamList);
                    if (i > 0)
                    {
                        gvMilestone.EditIndex = -1;
                        lblError.Text = "Data updated Successfully!!";
                    }
                    else
                    {
                        lblError.Text = "Error";
                    }
                }
            }
            else if (e.CommandName == "Add")
            {
                gvMilestone.ShowFooter = true;
            }
            else if (e.CommandName == "EmptyCancel")
            {
                gvMilestone.ShowFooter = false;
            }
            else if (e.CommandName == "Insert")
            {
                //Label CaseRowID = (Label)row.FindControl("lblCaseID");
                TextBox Ftr_Remarks_desc = (TextBox)row.FindControl("txtFooter_M_Desc");
                if (string.IsNullOrEmpty(Ftr_Remarks_desc.Text) == true)
                {
                    lblError.Text = "Milestone Desc can not be empty";
                }
                else
                {
                    StringBuilder sbFooter_InsertQuery = new StringBuilder();
                    Dictionary<string, string> Footer_insertParamList = new Dictionary<string, string>();
                    sbFooter_InsertQuery.Append("INSERT INTO CM_MILESTONE_REMARKS (JOB_NO, MONTH_CODE, YEAR_CODE, REMARKS_SR_NO, REMARKS, ADDED_DATE, ADDED_BY) VALUES ");
                    sbFooter_InsertQuery.Append("(:JOB_NO_TEXT,:MONTH_CODE_TEXT,:YEAR_CODE_TEXT, (SELECT NVL (MAX (REMARKS_SR_NO), 0) + 1 countdata FROM CM_MILESTONE_REMARKS ");
                    sbFooter_InsertQuery.Append(" WHERE JOB_NO =:JOB_NO_WHR AND MONTH_CODE = :MONTH_CODE_WHR AND YEAR_CODE =:YEAR_CODE_WHR),:REMARKS_desc, sysdate, :Added_by)");
                    Footer_insertParamList.Add(":JOB_NO_TEXT", Job_no);
                    Footer_insertParamList.Add(":MONTH_CODE_TEXT", Month_Code);
                    Footer_insertParamList.Add(":YEAR_CODE_TEXT", Year_Code);
                    Footer_insertParamList.Add(":JOB_NO_WHR", Job_no);
                    Footer_insertParamList.Add(":MONTH_CODE_WHR", Month_Code);
                    Footer_insertParamList.Add(":YEAR_CODE_WHR", Year_Code);
                    Footer_insertParamList.Add(":REMARKS_desc", Ftr_Remarks_desc.Text.ToString());
                    Footer_insertParamList.Add(":Added_by", User);
                    int i = objDB.executeNonQuery(sbFooter_InsertQuery.ToString(), Footer_insertParamList);
                    if (i > 0)
                    {
                        gvMilestone.ShowFooter = false;
                        lblError.Text = "Milestone Inserted Successfully!!";
                    }
                    else
                    {
                        lblError.Text = "Error";
                    }
                }
            }
            else if (e.CommandName == "EmptyInsert")
            {
                TextBox Empty_Remarks_desc = (TextBox)row.FindControl("txtEmpty_Milestone");
                if (string.IsNullOrEmpty(Empty_Remarks_desc.Text) == true)
                {
                    lblError.Text = "Milestone Desc can not be empty";
                }
                else
                {
                    StringBuilder sbEmpty_InsertQuery = new StringBuilder();
                    Dictionary<string, string> Empty_insertParamList = new Dictionary<string, string>();
                    sbEmpty_InsertQuery.Append("INSERT INTO CM_MILESTONE_REMARKS (JOB_NO, MONTH_CODE, YEAR_CODE, REMARKS_SR_NO, REMARKS,ADDED_DATE, ADDED_BY) VALUES ");
                    sbEmpty_InsertQuery.Append(" (:JOB_NO_TEXT,:MONTH_CODE_TEXT,:YEAR_CODE_TEXT, (SELECT NVL (MAX (REMARKS_SR_NO), 0) + 1 countdata FROM CM_MILESTONE_REMARKS ");
                    sbEmpty_InsertQuery.Append(" WHERE JOB_NO =:JOB_NO_WHR AND MONTH_CODE = :MONTH_CODE_WHR AND YEAR_CODE =:YEAR_CODE_WHR),:REMARKS_desc, sysdate, :Added_by) ");
                    Empty_insertParamList.Add(":JOB_NO_TEXT", Job_no);
                    Empty_insertParamList.Add(":MONTH_CODE_TEXT", Month_Code);
                    Empty_insertParamList.Add(":YEAR_CODE_TEXT", Year_Code);
                    Empty_insertParamList.Add(":JOB_NO_WHR", Job_no);
                    Empty_insertParamList.Add(":MONTH_CODE_WHR", Month_Code);
                    Empty_insertParamList.Add(":YEAR_CODE_WHR", Year_Code);
                    Empty_insertParamList.Add(":REMARKS_desc", Empty_Remarks_desc.Text.ToString());
                    Empty_insertParamList.Add(":Added_by", User);
                    int i = objDB.executeNonQuery(sbEmpty_InsertQuery.ToString(), Empty_insertParamList);
                    if (i > 0)
                    {
                        lblError.Text = "Milestone Inserted Successfully!!";
                    }
                    else
                    {
                        lblError.Text = "Error";
                    }
                }
            }
            else if (e.CommandName == "Delete")
            {
                Label REMARKS_SrNo = (Label)row.FindControl("lblM_srno");
                StringBuilder sbDelete_Query = new StringBuilder();
                Dictionary<string, string> Delete_ParamList = new Dictionary<string, string>();
                sbDelete_Query.Append(" DELETE FROM CM_MILESTONE_REMARKS WHERE JOB_NO =:JOB_NO_WHR AND MONTH_CODE = :MONTH_CODE_WHR AND YEAR_CODE =:YEAR_CODE_WHR ");
                sbDelete_Query.Append(" and REMARKS_SR_NO= :REMARKS_SR_NO");
                Delete_ParamList.Add(":JOB_NO_WHR", Job_no);
                Delete_ParamList.Add(":MONTH_CODE_WHR", Month_Code);
                Delete_ParamList.Add(":YEAR_CODE_WHR", Year_Code);
                Delete_ParamList.Add(":REMARKS_SR_NO", REMARKS_SrNo.Text.ToString());
                int i = objDB.executeNonQuery(sbDelete_Query.ToString(), Delete_ParamList);
                if (i > 0)
                {
                    lblError.Text = "Milestone Deleted Successfully!!";
                }
                else
                {
                    lblError.Text = "Error";
                }
            }
            //gvMilestone.EditIndex = -1;
            bindMilestone_Details();
        }
        catch (Exception ex)
        {
            lblError.Text = ex.ToString();
        }
    }

    protected void gvMilestone_RowUpdating(object sender, GridViewUpdateEventArgs e)
    {
        //do nothing
    }

    protected void gvMilestone_RowDeleting(object sender, GridViewDeleteEventArgs e)
    {
        //do nothing
    }

    protected void gvMilestone_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        string user_role = Session["User_Role"].ToString();
        string Edit_Rights = Session["Edit_Rights"].ToString();
        string Visible_false = Session["Visible_false"].ToString();
        if ((((user_role == "V") || (user_role == "Z") || (user_role == "ID")) && (Edit_Rights == "")) || (Visible_false == "Y"))
        {
            if (e.Row.RowType == DataControlRowType.EmptyDataRow)
            {
                //here you can access the div control
                HtmlGenericControl htmlhideDiv = (HtmlGenericControl)e.Row.FindControl("hideDivMilestone");
                htmlhideDiv.Style.Add("Display", "none");
            }
        }
    }

    #endregion

    #region Risk_Mitigation_Bind

    protected void bindRisk_Details()
    {
        string Job_no = ddJobNumber.SelectedValue.ToString().Trim();
        string Year_Code = ddlYear.SelectedItem.ToString().Trim();
        string Month_Code = ddlMonth.SelectedValue.ToString().Trim();
        string User = Session["USERID"].ToString().Trim();
        StringBuilder sbQuery = new StringBuilder();
        Dictionary<string, string> paramList = new Dictionary<string, string>();
        sbQuery.Append("select RISK_SR_NO, RISK_DESC,  MITIGATION_DESC from CM_RISK_DETAILS ");
        sbQuery.Append(" where JOB_NO =:JOB_NO_WHR AND MONTH_CODE = :MONTH_CODE_WHR AND YEAR_CODE =:YEAR_CODE_WHR ORDER BY RISK_SR_NO");
        paramList.Add(":JOB_NO_WHR", Job_no);
        paramList.Add(":MONTH_CODE_WHR", Month_Code);
        paramList.Add(":YEAR_CODE_WHR", Year_Code);
        objDB.bindGridView(gvRisk, sbQuery.ToString(), paramList);
    }

    protected void gvRisk_RowEditing(object sender, GridViewEditEventArgs e)
    {
        gvRisk.EditIndex = e.NewEditIndex;
        bindRisk_Details();
    }

    protected void gvRisk_RowCancelingEdit(object sender, GridViewCancelEditEventArgs e)
    {
        gvRisk.EditIndex = -1;
        bindRisk_Details();
    }

    protected void gvRisk_RowCommand(object sender, GridViewCommandEventArgs e)
    {
        try
        {
            lblError.Text = "";
            LinkButton senderBtn = (LinkButton)e.CommandSource;
            GridViewRow row = (GridViewRow)senderBtn.NamingContainer;
            GridView grid = (GridView)row.NamingContainer;
            string Job_no = ddJobNumber.SelectedValue.ToString().Trim();
            string Year_Code = ddlYear.SelectedItem.ToString().Trim();
            string Month_Code = ddlMonth.SelectedValue.ToString().Trim();
            string User = Session["USERID"].ToString().Trim();

            if (e.CommandName == "Update")
            {
                Label RiskDesc_SrNo = (Label)row.FindControl("lblRM_srno");
                TextBox EditRisk_Desc = (TextBox)row.FindControl("txtedit_Risk_Desc");
                TextBox EditMiti_Desc = (TextBox)row.FindControl("txtedit_Miti_Desc");
                if (string.IsNullOrEmpty(EditRisk_Desc.Text) == true)
                {
                    lblError.Text = "Risk Desc can not be empty";
                }
                else
                {
                    StringBuilder sbEdit_Query = new StringBuilder();
                    Dictionary<string, string> Edit_ParamList = new Dictionary<string, string>();
                    sbEdit_Query.Append(" UPDATE CM_RISK_DETAILS SET RISK_DESC = :Risk_desc, MITIGATION_DESC = :Mitigation_desc, ");
                    sbEdit_Query.Append(" UPDATED_ON = SYSDATE , UPDATED_BY=:UPDATED_BY ");
                    sbEdit_Query.Append(" WHERE JOB_NO =:JOB_NO_WHR AND MONTH_CODE = :MONTH_CODE_WHR AND YEAR_CODE =:YEAR_CODE_WHR and RISK_SR_NO= :RISK_SR_NO");
                    Edit_ParamList.Add(":Risk_desc", EditRisk_Desc.Text.ToString());
                    Edit_ParamList.Add(":Mitigation_desc", EditMiti_Desc.Text.ToString());
                    Edit_ParamList.Add(":UPDATED_BY", User);
                    Edit_ParamList.Add(":JOB_NO_WHR", Job_no);
                    Edit_ParamList.Add(":MONTH_CODE_WHR", Month_Code);
                    Edit_ParamList.Add(":YEAR_CODE_WHR", Year_Code);
                    Edit_ParamList.Add(":RISK_SR_NO", RiskDesc_SrNo.Text.ToString());
                    int i = objDB.executeNonQuery(sbEdit_Query.ToString(), Edit_ParamList);
                    if (i > 0)
                    {
                        gvRisk.EditIndex = -1;
                        lblError.Text = "Data updated Successfully!!";
                    }
                    else
                    {
                        lblError.Text = "Error";
                    }
                }
            }
            else if (e.CommandName == "Add")
            {
                gvRisk.ShowFooter = true;
            }
            else if (e.CommandName == "EmptyCancel")
            {
                gvRisk.ShowFooter = false;
            }
            else if (e.CommandName == "Insert")
            {
                //Label CaseRowID = (Label)row.FindControl("lblCaseID");
                TextBox Ftr_Risk_desc = (TextBox)row.FindControl("txtFooter_Risk_Desc");
                TextBox Ftr_Miti_desc = (TextBox)row.FindControl("txtFooter_Miti_Desc");
                if (string.IsNullOrEmpty(Ftr_Risk_desc.Text) == true)
                {
                    lblError.Text = "Risk Desc can not be empty";
                }
                else
                {
                    StringBuilder sbFooter_InsertQuery = new StringBuilder();
                    Dictionary<string, string> Footer_insertParamList = new Dictionary<string, string>();
                    sbFooter_InsertQuery.Append("INSERT INTO CM_RISK_DETAILS (JOB_NO, MONTH_CODE, YEAR_CODE, RISK_DESC, MITIGATION_DESC,RISK_SR_NO, ADDED_DATE, ADDED_BY) VALUES ");
                    sbFooter_InsertQuery.Append("(:JOB_NO_TEXT,:MONTH_CODE_TEXT,:YEAR_CODE_TEXT,:Risk_desc,:Mitigation_desc, (SELECT NVL (MAX (RISK_SR_NO), 0) + 1 countdata FROM CM_RISK_DETAILS ");
                    sbFooter_InsertQuery.Append(" WHERE JOB_NO =:JOB_NO_WHR AND MONTH_CODE = :MONTH_CODE_WHR AND YEAR_CODE =:YEAR_CODE_WHR), sysdate, :Added_by)");
                    Footer_insertParamList.Add(":JOB_NO_TEXT", Job_no);
                    Footer_insertParamList.Add(":MONTH_CODE_TEXT", Month_Code);
                    Footer_insertParamList.Add(":YEAR_CODE_TEXT", Year_Code);
                    Footer_insertParamList.Add(":Risk_desc", Ftr_Risk_desc.Text.ToString());
                    Footer_insertParamList.Add(":Mitigation_desc", Ftr_Miti_desc.Text.ToString());
                    Footer_insertParamList.Add(":JOB_NO_WHR", Job_no);
                    Footer_insertParamList.Add(":MONTH_CODE_WHR", Month_Code);
                    Footer_insertParamList.Add(":YEAR_CODE_WHR", Year_Code);
                    Footer_insertParamList.Add(":Added_by", User);
                    int i = objDB.executeNonQuery(sbFooter_InsertQuery.ToString(), Footer_insertParamList);
                    if (i > 0)
                    {
                        gvRisk.ShowFooter = false;
                        lblError.Text = "Data Inserted Successfully!!";
                        lblRiskMandatory.Text = "";
                    }
                    else
                    {
                        lblError.Text = "Error";
                    }
                }
            }
            else if (e.CommandName == "EmptyInsert")
            {
                TextBox Empty_Risk_desc = (TextBox)row.FindControl("txtEmpty_RiskDesc");
                TextBox Empty_Miti_desc = (TextBox)row.FindControl("txtEmpty_MitiDesc");
                if (string.IsNullOrEmpty(Empty_Risk_desc.Text) == true)
                {
                    lblError.Text = "Risk Desc can not be empty";
                }
                else
                {
                    StringBuilder sbEmpty_InsertQuery = new StringBuilder();
                    Dictionary<string, string> Empty_insertParamList = new Dictionary<string, string>();
                    sbEmpty_InsertQuery.Append("INSERT INTO CM_RISK_DETAILS (JOB_NO, MONTH_CODE, YEAR_CODE, RISK_DESC, MITIGATION_DESC,RISK_SR_NO, ADDED_DATE, ADDED_BY) VALUES ");
                    sbEmpty_InsertQuery.Append(" (:JOB_NO_TEXT,:MONTH_CODE_TEXT,:YEAR_CODE_TEXT, :Risk_desc,:Mitigation_desc, (SELECT NVL (MAX (RISK_SR_NO), 0) + 1 countdata FROM CM_RISK_DETAILS ");
                    sbEmpty_InsertQuery.Append(" WHERE JOB_NO =:JOB_NO_WHR AND MONTH_CODE = :MONTH_CODE_WHR AND YEAR_CODE =:YEAR_CODE_WHR), sysdate, :Added_by) ");
                    Empty_insertParamList.Add(":JOB_NO_TEXT", Job_no);
                    Empty_insertParamList.Add(":MONTH_CODE_TEXT", Month_Code);
                    Empty_insertParamList.Add(":YEAR_CODE_TEXT", Year_Code);
                    Empty_insertParamList.Add(":Risk_desc", Empty_Risk_desc.Text.ToString());
                    Empty_insertParamList.Add(":Mitigation_desc", Empty_Miti_desc.Text.ToString());
                    Empty_insertParamList.Add(":JOB_NO_WHR", Job_no);
                    Empty_insertParamList.Add(":MONTH_CODE_WHR", Month_Code);
                    Empty_insertParamList.Add(":YEAR_CODE_WHR", Year_Code);
                    Empty_insertParamList.Add(":Added_by", User);
                    int i = objDB.executeNonQuery(sbEmpty_InsertQuery.ToString(), Empty_insertParamList);
                    if (i > 0)
                    {
                        lblError.Text = "Data Inserted Successfully!!";
                        lblRiskMandatory.Text = "";
                    }
                    else
                    {
                        lblError.Text = "Error";
                    }
                }
            }
            else if (e.CommandName == "Delete")
            {
                Label Risk_SrNo = (Label)row.FindControl("lblRM_srno");
                StringBuilder sbDelete_Query = new StringBuilder();
                Dictionary<string, string> Delete_ParamList = new Dictionary<string, string>();
                sbDelete_Query.Append(" DELETE FROM CM_RISK_DETAILS ");
                sbDelete_Query.Append(" WHERE JOB_NO =:JOB_NO_WHR AND MONTH_CODE = :MONTH_CODE_WHR AND YEAR_CODE =:YEAR_CODE_WHR and RISK_SR_NO= :RISK_SR_NO");
                Delete_ParamList.Add(":JOB_NO_WHR", Job_no);
                Delete_ParamList.Add(":MONTH_CODE_WHR", Month_Code);
                Delete_ParamList.Add(":YEAR_CODE_WHR", Year_Code);
                Delete_ParamList.Add(":RISK_SR_NO", Risk_SrNo.Text.ToString());
                int i = objDB.executeNonQuery(sbDelete_Query.ToString(), Delete_ParamList);
                if (i > 0)
                {
                    lblError.Text = "Data Deleted Successfully!!";
                }
                else
                {
                    lblError.Text = "Error";
                }
            }
            //gvRisk.EditIndex = -1;
            bindRisk_Details();
        }
        catch (Exception ex)
        {
            lblError.Text = ex.ToString();
        }
    }

    protected void gvRisk_RowUpdating(object sender, GridViewUpdateEventArgs e)
    {
        //do nothing
    }

    protected void gvRisk_RowDeleting(object sender, GridViewDeleteEventArgs e)
    {
        //do nothing
    }

    protected void gvRisk_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        string user_role = Session["User_Role"].ToString();
        string Edit_Rights = Session["Edit_Rights"].ToString();
        string Visible_false = Session["Visible_false"].ToString();
        if ((((user_role == "V") || (user_role == "Z") || (user_role == "ID")) && (Edit_Rights == "")) || (Visible_false == "Y"))
        {
            if (e.Row.RowType == DataControlRowType.EmptyDataRow)
            {
                //here you can access the div control
                HtmlGenericControl htmlhideDiv = (HtmlGenericControl)e.Row.FindControl("hideDivRisk");
                htmlhideDiv.Style.Add("Display", "none");
                //TextBox txtRisk = e.Row.FindControl("txtEmpty_RiskDesc") as TextBox;
                //TextBox txtMitign = e.Row.FindControl("txtEmpty_MitiDesc") as TextBox;
                //LinkButton lnkbtn_RiskSave = e.Row.FindControl("lnkbtnRiskftr_add") as LinkButton;
                //txtRisk.Enabled = false;
                //txtMitign.Enabled = false;
                //lnkbtn_RiskSave.Visible = false;
            }
        }
    }

    public bool Check_Risk_Count()
    {
        bool chk_flag = false;
        string Job_no = ddJobNumber.SelectedValue.ToString().Trim();
        string Year_Code = ddlYear.SelectedItem.ToString().Trim();
        string Month_Code = ddlMonth.SelectedValue.ToString().Trim();
        StringBuilder sbQuery = new StringBuilder();
        Dictionary<string, string> paramList = new Dictionary<string, string>();
        sbQuery.Append("select count (1) from CM_RISK_DETAILS where JOB_NO = :JOB_NO_WHR AND MONTH_CODE = :MONTH_CODE_WHR AND YEAR_CODE = :YEAR_CODE_WHR ");
        paramList.Add(":JOB_NO_WHR", Job_no);
        paramList.Add(":MONTH_CODE_WHR", Month_Code);
        paramList.Add(":YEAR_CODE_WHR", Year_Code);
        int count = objDB.ExecuteStatementCount(sbQuery.ToString(), paramList);
        if (count == 0)
        {
            chk_flag = true;
        }
        return chk_flag;
    }

    #endregion

    #region Change_Order_Variations_Bind

    protected void bindChangeOrder_Details(string User_Code, GridView gvChangeOrder_Common)
    {
        string Job_no = ddJobNumber.SelectedValue.ToString().Trim();
        string Year_Code = ddlYear.SelectedItem.ToString().Trim();
        string Month_Code = ddlMonth.SelectedValue.ToString().Trim();
        string User = Session["USERID"].ToString().Trim();
        StringBuilder sbQuery = new StringBuilder();
        Dictionary<string, string> paramList = new Dictionary<string, string>();
        sbQuery.Append("SELECT CHANGE_ORDER_NO, CHANGE_ORDER_SR_NO,TO_CHAR(DATE_RAISED,'dd/Mon/yyyy') DATE_RAISED, AMOUNT, CURRENCY_CODE, ");
        sbQuery.Append(" DECODE (ACCEPTED_FLAG,'Y','YES','N','NO','P','PART') ACCEPTED_FLAG_TEXT,ACCEPTED_FLAG, ACCEPTED_AMOUNT, ");
        sbQuery.Append(" TO_CHAR(ACCEPTED_DATE,'dd/Mon/yyyy') ACCEPTED_DATE, DECODE (STATUS ,'CO','CO ACCEPTED') STATUS_TEXT,STATUS, REMARKS FROM CM_CHANGE_ORDER_DETAILS ");
        sbQuery.Append(" where JOB_NO =:JOB_NO_WHR AND MONTH_CODE = :MONTH_CODE_WHR AND YEAR_CODE =:YEAR_CODE_WHR and USER_CODE=:USER_CODE ORDER BY CHANGE_ORDER_SR_NO");
        paramList.Add(":JOB_NO_WHR", Job_no);
        paramList.Add(":MONTH_CODE_WHR", Month_Code);
        paramList.Add(":YEAR_CODE_WHR", Year_Code);
        paramList.Add(":USER_CODE", User_Code);
        objDB.bindGridView(gvChangeOrder_Common, sbQuery.ToString(), paramList);
    }

    protected void gvChangeOrder_RowEditing(object sender, GridViewEditEventArgs e)
    {
        gvChangeOrder.EditIndex = e.NewEditIndex;
        bindChangeOrder_Details(Constants.user_eil, gvChangeOrder);
    }

    protected void gvChangeOrder_RowCancelingEdit(object sender, GridViewCancelEditEventArgs e)
    {
        gvChangeOrder.EditIndex = -1;
        bindChangeOrder_Details(Constants.user_eil, gvChangeOrder);
    }

    protected void gvChangeOrder_RowCommand(object sender, GridViewCommandEventArgs e)
    {
        gvChangeOrder_Common_Query(e, Constants.user_eil, gvChangeOrder);
    }

    protected void gvChangeOrder_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        gvChangeOrder_Common_RowData(e, Constants.user_eil, gvChangeOrder);
    }

    protected void gvChangeOrder_RowUpdating(object sender, GridViewUpdateEventArgs e)
    {
        //do nothing
    }

    protected void gvChangeOrder_RowDeleting(object sender, GridViewDeleteEventArgs e)
    {
        //do nothing
    }

    //Common code
    protected void gvChangeOrder_Common_Query(GridViewCommandEventArgs e, string user_code, GridView gvChangeOrder_Common)
    {
        try
        {
            lblError.Text = "";
            LinkButton senderBtn = (LinkButton)e.CommandSource;
            GridViewRow row = (GridViewRow)senderBtn.NamingContainer;
            GridView grid = (GridView)row.NamingContainer;
            string Job_no = ddJobNumber.SelectedValue.ToString().Trim();
            string Year_Code = ddlYear.SelectedItem.ToString().Trim();
            string Month_Code = ddlMonth.SelectedValue.ToString().Trim();
            string User = Session["USERID"].ToString().Trim();

            if (e.CommandName == "Update")
            {
                string str_Change_SrNo = null;
                string str_edt_Change_Order = null;
                string str_edt_dateraised = null;
                string str_edt_AmountRaised = null;
                string str_edt_accept = null;
                string str_edt_Accpetedfor = null;
                string str_edt_AccpetanceDate = null;
                string str_edt_Status = null;
                string str_edt_Remarks = null;
                if (user_code == Constants.user_eil)
                {
                    str_Change_SrNo = "lblChange_srno";
                    str_edt_Change_Order = "txt_edit_changeorder";
                    str_edt_dateraised = "txt_edit_dateraised";
                    str_edt_AmountRaised = "txt_edit_amount";
                    str_edt_accept = "ddledit_accept";
                    str_edt_Accpetedfor = "txt_editaccept_amt";
                    str_edt_AccpetanceDate = "txt_editaccept_date";
                    str_edt_Status = "ddledit_Status";
                    str_edt_Remarks = "txtedit_Remarks_Desc";
                }
                else if (user_code == Constants.user_contractor)
                {
                    str_Change_SrNo = "lblContChange_srno";
                    str_edt_Change_Order = "txt_edit_Contchangeorder";
                    str_edt_dateraised = "txt_edit_Contdateraised";
                    str_edt_AmountRaised = "txt_edit_Contamount";
                    str_edt_accept = "ddledit_Contaccept";
                    str_edt_Accpetedfor = "txt_editaccept_Contamt";
                    str_edt_AccpetanceDate = "txt_editContaccept_date";
                    str_edt_Status = "ddledit_ContStatus";
                    str_edt_Remarks = "txtedit_ContRemarks_Desc";
                }
                Label ChangeOrder_SrNo = (Label)row.FindControl(str_Change_SrNo);
                TextBox edit_Change_Order = (TextBox)row.FindControl(str_edt_Change_Order);
                TextBox edit_dateraised = (TextBox)row.FindControl(str_edt_dateraised);
                TextBox edit_AmountRaised = (TextBox)row.FindControl(str_edt_AmountRaised);
                DropDownList edit_accept = (DropDownList)row.FindControl(str_edt_accept);
                TextBox edit_Accpetedfor = (TextBox)row.FindControl(str_edt_Accpetedfor);
                TextBox edit_AccpetanceDate = (TextBox)row.FindControl(str_edt_AccpetanceDate);
                DropDownList edit_Status = (DropDownList)row.FindControl(str_edt_Status);
                TextBox edit_Remarks = (TextBox)row.FindControl(str_edt_Remarks);
                if (string.IsNullOrEmpty(ChangeOrder_SrNo.Text) == true)
                {
                    lblError.Text = "Change order Sr no be empty";
                }
                else
                {
                    StringBuilder sbEdit_Query = new StringBuilder();
                    Dictionary<string, string> Edit_ParamList = new Dictionary<string, string>();
                    sbEdit_Query.Append(" UPDATE CM_CHANGE_ORDER_DETAILS SET DATE_RAISED = :DATE_RAISED, AMOUNT = :AMOUNT, ");
                    sbEdit_Query.Append(" ACCEPTED_FLAG = :ACCEPTED_FLAG, ACCEPTED_AMOUNT = :ACCEPTED_AMOUNT, ACCEPTED_DATE = :ACCEPTED_DATE,");
                    sbEdit_Query.Append(" STATUS = :STATUS, REMARKS = :REMARKS, UPDATED_ON = SYSDATE , UPDATED_BY=:UPDATED_BY ");
                    sbEdit_Query.Append(" WHERE JOB_NO =:JOB_NO_WHR AND MONTH_CODE = :MONTH_CODE_WHR AND YEAR_CODE =:YEAR_CODE_WHR and USER_CODE= :USER_CODE_WHR AND CHANGE_ORDER_SR_NO=:CHANGE_ORDER_SR_NO");
                    Edit_ParamList.Add(":DATE_RAISED", edit_dateraised.Text.ToString());
                    Edit_ParamList.Add(":AMOUNT", edit_AmountRaised.Text.ToString());
                    Edit_ParamList.Add(":ACCEPTED_FLAG", edit_accept.SelectedValue.ToString());
                    Edit_ParamList.Add(":ACCEPTED_AMOUNT", edit_Accpetedfor.Text.ToString());
                    Edit_ParamList.Add(":ACCEPTED_DATE", edit_AccpetanceDate.Text.ToString());
                    Edit_ParamList.Add(":STATUS", edit_Status.SelectedValue.ToString());
                    Edit_ParamList.Add(":REMARKS", edit_Remarks.Text.ToString());
                    Edit_ParamList.Add(":UPDATED_BY", User);
                    Edit_ParamList.Add(":JOB_NO_WHR", Job_no);
                    Edit_ParamList.Add(":MONTH_CODE_WHR", Month_Code);
                    Edit_ParamList.Add(":YEAR_CODE_WHR", Year_Code);
                    Edit_ParamList.Add(":USER_CODE_WHR", user_code);
                    Edit_ParamList.Add(":CHANGE_ORDER_SR_NO", ChangeOrder_SrNo.Text.ToString());
                    int i = objDB.executeNonQuery(sbEdit_Query.ToString(), Edit_ParamList);
                    if (i > 0)
                    {
                        gvChangeOrder_Common.EditIndex = -1;
                        lblError.Text = "Data updated Successfully!!";
                    }
                    else
                    {
                        lblError.Text = "Error";
                    }
                }
            }
            else if (e.CommandName == "Insert")
            {
                string str_ftr_Change_Order = null;
                string str_ftr_dateraised = null;
                string str_ftr_AmountRaised = null;
                string str_ftr_accept = null;
                string str_ftr_Accpetedfor = null;
                string str_ftr_AccpetanceDate = null;
                string str_ftr_Status = null;
                string str_ftr_Remarks = null;
                if (user_code == Constants.user_eil)
                {
                    str_ftr_Change_Order = "txt_ftr_changeorder";
                    str_ftr_dateraised = "txt_ftr_dateraised";
                    str_ftr_AmountRaised = "txt_ftr_amount";
                    str_ftr_accept = "ddlFtr_accept";
                    str_ftr_Accpetedfor = "txt_ftraccept_amt";
                    str_ftr_AccpetanceDate = "txt_ftraccept_date";
                    str_ftr_Status = "ddlftr_Status";
                    str_ftr_Remarks = "txtftr_Remarks_Desc";
                }
                else if (user_code == Constants.user_contractor)
                {
                    str_ftr_Change_Order = "txt_ftr_Contchangeorder";
                    str_ftr_dateraised = "txt_ftr_Contdateraised";
                    str_ftr_AmountRaised = "txt_ftr_Contamount";
                    str_ftr_accept = "ddlFtr_Contaccept";
                    str_ftr_Accpetedfor = "txt_ftraccept_Contamt";
                    str_ftr_AccpetanceDate = "txt_ftrContaccept_date";
                    str_ftr_Status = "ddlftr_ContStatus";
                    str_ftr_Remarks = "txtftr_ContRemarks_Desc";
                }

                TextBox ftr_Change_Order = (TextBox)row.FindControl(str_ftr_Change_Order);
                TextBox ftr_dateraised = (TextBox)row.FindControl(str_ftr_dateraised);
                TextBox ftr_AmountRaised = (TextBox)row.FindControl(str_ftr_AmountRaised);
                DropDownList ftr_accept = (DropDownList)row.FindControl(str_ftr_accept);
                TextBox ftr_Accpetedfor = (TextBox)row.FindControl(str_ftr_Accpetedfor);
                TextBox ftr_AccpetanceDate = (TextBox)row.FindControl(str_ftr_AccpetanceDate);
                DropDownList ftr_Status = (DropDownList)row.FindControl(str_ftr_Status);
                TextBox ftr_Remarks = (TextBox)row.FindControl(str_ftr_Remarks);
                if (string.IsNullOrEmpty(ftr_Change_Order.Text) == true)
                {
                    lblError.Text = "Change Order can not be empty";
                }
                else
                {
                    StringBuilder sbInsertQuery = new StringBuilder();
                    Dictionary<string, string> insertParamList = new Dictionary<string, string>();
                    sbInsertQuery.Append("INSERT INTO CM_CHANGE_ORDER_DETAILS (JOB_NO, MONTH_CODE, YEAR_CODE, USER_CODE, CHANGE_ORDER_NO,");
                    sbInsertQuery.Append(" CHANGE_ORDER_SR_NO, DATE_RAISED, AMOUNT,  ACCEPTED_FLAG, ACCEPTED_AMOUNT, ACCEPTED_DATE,");
                    sbInsertQuery.Append(" STATUS, REMARKS, ADDED_DATE, ADDED_BY ) VALUES ");
                    sbInsertQuery.Append(" (:JOB_NO_TEXT,:MONTH_CODE_TEXT,:YEAR_CODE_TEXT,:USER_CODE,:CHANGE_ORDER_NO, (SELECT NVL (MAX (CHANGE_ORDER_SR_NO), 0) + 1 countdata FROM CM_CHANGE_ORDER_DETAILS ");
                    sbInsertQuery.Append(" WHERE JOB_NO =:JOB_NO_WHR AND MONTH_CODE = :MONTH_CODE_WHR AND YEAR_CODE =:YEAR_CODE_WHR AND USER_CODE=:USER_CODE_WHR), ");
                    sbInsertQuery.Append(" :DATE_RAISED,:AMOUNT,:ACCEPTED_FLAG,:ACCEPTED_AMOUNT,:ACCEPTED_DATE,:STATUS,:REMARKS, sysdate, :Added_by) ");
                    insertParamList.Add(":JOB_NO_TEXT", Job_no);
                    insertParamList.Add(":MONTH_CODE_TEXT", Month_Code);
                    insertParamList.Add(":YEAR_CODE_TEXT", Year_Code);
                    insertParamList.Add(":USER_CODE", user_code);
                    insertParamList.Add(":CHANGE_ORDER_NO", ftr_Change_Order.Text.ToString().Trim());
                    insertParamList.Add(":JOB_NO_WHR", Job_no);
                    insertParamList.Add(":MONTH_CODE_WHR", Month_Code);
                    insertParamList.Add(":YEAR_CODE_WHR", Year_Code);
                    insertParamList.Add(":USER_CODE_WHR", user_code);
                    insertParamList.Add(":DATE_RAISED", ftr_dateraised.Text.ToString());
                    insertParamList.Add(":AMOUNT", ftr_AmountRaised.Text.ToString());
                    insertParamList.Add(":ACCEPTED_FLAG", ftr_accept.SelectedValue.ToString());
                    insertParamList.Add(":ACCEPTED_AMOUNT", ftr_Accpetedfor.Text.ToString());
                    insertParamList.Add(":ACCEPTED_DATE", ftr_AccpetanceDate.Text.ToString());
                    insertParamList.Add(":STATUS", ftr_Status.SelectedValue.ToString());
                    insertParamList.Add(":REMARKS", ftr_Remarks.Text.ToString());
                    insertParamList.Add(":Added_by", User);
                    int i = objDB.executeNonQuery(sbInsertQuery.ToString(), insertParamList);
                    if (i > 0)
                    {
                        gvChangeOrder_Common.ShowFooter = false;
                        lblError.Text = "Data Inserted Successfully!!";
                    }
                    else
                    {
                        lblError.Text = "Error";
                    }
                }
            }
            else if (e.CommandName == "Add")
            {
                gvChangeOrder_Common.ShowFooter = true;
            }
            else if (e.CommandName == "EmptyCancel")
            {
                gvChangeOrder_Common.ShowFooter = false;
            }
            else if (e.CommandName == "EmptyInsert")
            {
                string str_Empty_Change_Order = null;
                string str_Empty_dateraised = null;
                string str_Empty_AmountRaised = null;
                string str_Empty_accept = null;
                string str_Empty_Accpetedfor = null;
                string str_Empty_AccpetanceDate = null;
                string str_Empty_Status = null;
                string str_Empty_Remarks = null;
                if (user_code == Constants.user_eil)
                {
                    str_Empty_Change_Order = "txtEmpty_ChangeOrder";
                    str_Empty_dateraised = "txt_empty_dateraised";
                    str_Empty_AmountRaised = "txtEmpty_AmountRaised";
                    str_Empty_accept = "ddlempty_accept";
                    str_Empty_Accpetedfor = "txtEmpty_Accpetedfor";
                    str_Empty_AccpetanceDate = "txtEmpty_AccpetanceDate";
                    str_Empty_Status = "ddlempty_Status";
                    str_Empty_Remarks = "txtEmpty_Remarks";
                }
                else if (user_code == Constants.user_contractor)
                {
                    str_Empty_Change_Order = "txtEmpty_ContChangeOrder";
                    str_Empty_dateraised = "txt_empty_Contdateraised";
                    str_Empty_AmountRaised = "txtEmpty_ContAmountRaised";
                    str_Empty_accept = "ddlempty_Contaccept";
                    str_Empty_Accpetedfor = "txtEmpty_ContAccpetedfor";
                    str_Empty_AccpetanceDate = "txtEmpty_ContAccpetanceDate";
                    str_Empty_Status = "ddlempty_ContStatus";
                    str_Empty_Remarks = "txtEmpty_ContRemarks";
                }

                TextBox Empty_Change_Order = (TextBox)row.FindControl(str_Empty_Change_Order);
                TextBox Empty_dateraised = (TextBox)row.FindControl(str_Empty_dateraised);
                TextBox Empty_AmountRaised = (TextBox)row.FindControl(str_Empty_AmountRaised);
                DropDownList Empty_accept = (DropDownList)row.FindControl(str_Empty_accept);
                TextBox Empty_Accpetedfor = (TextBox)row.FindControl(str_Empty_Accpetedfor);
                TextBox Empty_AccpetanceDate = (TextBox)row.FindControl(str_Empty_AccpetanceDate);
                DropDownList Empty_Status = (DropDownList)row.FindControl(str_Empty_Status);
                TextBox Empty_Remarks = (TextBox)row.FindControl(str_Empty_Remarks);
                if (string.IsNullOrEmpty(Empty_Change_Order.Text) == true)
                {
                    lblError.Text = "Change Order can not be empty";
                }
                else
                {
                    StringBuilder sbEmpty_InsertQuery = new StringBuilder();
                    Dictionary<string, string> Empty_insertParamList = new Dictionary<string, string>();
                    sbEmpty_InsertQuery.Append("INSERT INTO CM_CHANGE_ORDER_DETAILS (JOB_NO, MONTH_CODE, YEAR_CODE, USER_CODE, CHANGE_ORDER_NO,");
                    sbEmpty_InsertQuery.Append(" CHANGE_ORDER_SR_NO, DATE_RAISED, AMOUNT,  ACCEPTED_FLAG, ACCEPTED_AMOUNT, ACCEPTED_DATE,");
                    sbEmpty_InsertQuery.Append(" STATUS, REMARKS, ADDED_DATE, ADDED_BY ) VALUES ");
                    sbEmpty_InsertQuery.Append(" (:JOB_NO_TEXT,:MONTH_CODE_TEXT,:YEAR_CODE_TEXT,:USER_CODE,:CHANGE_ORDER_NO, (SELECT NVL (MAX (CHANGE_ORDER_SR_NO), 0) + 1 countdata FROM CM_CHANGE_ORDER_DETAILS ");
                    sbEmpty_InsertQuery.Append(" WHERE JOB_NO =:JOB_NO_WHR AND MONTH_CODE = :MONTH_CODE_WHR AND YEAR_CODE =:YEAR_CODE_WHR AND USER_CODE=:USER_CODE_WHR), ");
                    sbEmpty_InsertQuery.Append(" :DATE_RAISED,:AMOUNT,:ACCEPTED_FLAG,:ACCEPTED_AMOUNT,:ACCEPTED_DATE,:STATUS,:REMARKS, sysdate, :Added_by) ");
                    Empty_insertParamList.Add(":JOB_NO_TEXT", Job_no);
                    Empty_insertParamList.Add(":MONTH_CODE_TEXT", Month_Code);
                    Empty_insertParamList.Add(":YEAR_CODE_TEXT", Year_Code);
                    Empty_insertParamList.Add(":USER_CODE", user_code);
                    Empty_insertParamList.Add(":CHANGE_ORDER_NO", Empty_Change_Order.Text.ToString().Trim());
                    Empty_insertParamList.Add(":JOB_NO_WHR", Job_no);
                    Empty_insertParamList.Add(":MONTH_CODE_WHR", Month_Code);
                    Empty_insertParamList.Add(":YEAR_CODE_WHR", Year_Code);
                    Empty_insertParamList.Add(":USER_CODE_WHR", user_code);
                    Empty_insertParamList.Add(":DATE_RAISED", Empty_dateraised.Text.ToString());
                    Empty_insertParamList.Add(":AMOUNT", Empty_AmountRaised.Text.ToString());
                    Empty_insertParamList.Add(":ACCEPTED_FLAG", Empty_accept.SelectedValue.ToString());
                    Empty_insertParamList.Add(":ACCEPTED_AMOUNT", Empty_Accpetedfor.Text.ToString());
                    Empty_insertParamList.Add(":ACCEPTED_DATE", Empty_AccpetanceDate.Text.ToString());
                    Empty_insertParamList.Add(":STATUS", Empty_Status.SelectedValue.ToString());
                    Empty_insertParamList.Add(":REMARKS", Empty_Remarks.Text.ToString());
                    Empty_insertParamList.Add(":Added_by", User);
                    int i = objDB.executeNonQuery(sbEmpty_InsertQuery.ToString(), Empty_insertParamList);
                    if (i > 0)
                    {
                        lblError.Text = "Data Inserted Successfully!!";
                    }
                    else
                    {
                        lblError.Text = "Error";
                    }
                }
            }
            else if (e.CommandName == "Delete")
            {
                string str_Change_SrNo = null;
                if (user_code == Constants.user_eil)
                {
                    str_Change_SrNo = "lblChange_srno";
                }
                else if (user_code == Constants.user_contractor)
                {
                    str_Change_SrNo = "lblContChange_srno";
                }

                Label Change_SrNo = (Label)row.FindControl(str_Change_SrNo);
                StringBuilder sbDelete_Query = new StringBuilder();
                Dictionary<string, string> Delete_ParamList = new Dictionary<string, string>();
                sbDelete_Query.Append(" DELETE FROM CM_CHANGE_ORDER_DETAILS ");
                sbDelete_Query.Append(" WHERE JOB_NO =:JOB_NO_WHR AND MONTH_CODE = :MONTH_CODE_WHR AND YEAR_CODE =:YEAR_CODE_WHR AND USER_CODE = :USER_CODE AND CHANGE_ORDER_SR_NO=:CHANGE_ORDER_SR_NO ");
                Delete_ParamList.Add(":JOB_NO_WHR", Job_no);
                Delete_ParamList.Add(":MONTH_CODE_WHR", Month_Code);
                Delete_ParamList.Add(":YEAR_CODE_WHR", Year_Code);
                Delete_ParamList.Add(":USER_CODE", user_code);
                Delete_ParamList.Add(":CHANGE_ORDER_SR_NO", Change_SrNo.Text.ToString());
                int i = objDB.executeNonQuery(sbDelete_Query.ToString(), Delete_ParamList);
                if (i > 0)
                {
                    lblError.Text = "Data Deleted Successfully!!";
                }
                else
                {
                    lblError.Text = "Error";
                }
            }
            //gvChangeOrder_Common.EditIndex = -1;
            bindChangeOrder_Details(user_code, gvChangeOrder_Common);
        }
        catch (Exception ex)
        {
            lblError.Text = ex.ToString();
        }
    }

    protected void gvChangeOrder_Common_RowData(GridViewRowEventArgs e, string user_code, GridView gvChangeOrder_Common)
    {

        if (e.Row.RowType == DataControlRowType.DataRow)
        {
            if ((e.Row.RowState & DataControlRowState.Edit) > 0)
            {
                string str_Accept = null;
                string str_Status = null;
                string ddl_Accept = null;
                string ddl_Status = null;
                string lbl_Accept = null;
                string lbl_Status = null;
                if (user_code == Constants.user_eil)
                {
                    ddl_Accept = "ddledit_accept";
                    ddl_Status = "ddledit_Status";
                    lbl_Accept = "lbleditaccept";
                    lbl_Status = "lbleditStatus";
                }
                else if (user_code == Constants.user_contractor)
                {
                    ddl_Accept = "ddledit_Contaccept";
                    ddl_Status = "ddledit_ContStatus";
                    lbl_Accept = "lbleditContaccept";
                    lbl_Status = "lbleditContStatus";
                }
                else if (user_code == Constants.user_vendor)
                {
                    ddl_Accept = "ddledit_accept";
                    ddl_Status = "ddledit_Status";
                    lbl_Accept = "lbleditaccept";
                    lbl_Status = "lbleditStatus";
                }
                DropDownList ddlEdit_Accept = ((DropDownList)e.Row.FindControl(ddl_Accept));
                DropDownList ddlEdit_Status = ((DropDownList)e.Row.FindControl(ddl_Status));
                Label lblEdit_Accept = ((Label)e.Row.FindControl(lbl_Accept));
                Label lblEdit_Status = ((Label)e.Row.FindControl(lbl_Status));
                str_Accept = lblEdit_Accept.Text.Trim();
                if (str_Accept != string.Empty)
                {
                    ddlEdit_Accept.SelectedValue = str_Accept;
                }
                str_Status = lblEdit_Status.Text.Trim();
                if (str_Status != string.Empty)
                {
                    ddlEdit_Status.SelectedValue = str_Status;
                }
            }
        }
        else if (e.Row.RowType == DataControlRowType.EmptyDataRow)
        {
            string user_role = Session["User_Role"].ToString();
            string Edit_Rights = Session["Edit_Rights"].ToString();
            string Visible_false = Session["Visible_false"].ToString();
            if ((((user_role == "V") || (user_role == "Z") || (user_role == "ID")) && (Edit_Rights == "")) || (Visible_false == "Y"))
            {
                //here you can access the div control
                HtmlGenericControl htmlhideDiv = (HtmlGenericControl)e.Row.FindControl("hideDivChangeOrder");
                htmlhideDiv.Style.Add("Display", "none");
            }
        }
    }

    protected void gvContChangeOrder_RowEditing(object sender, GridViewEditEventArgs e)
    {
        gvContChangeOrder.EditIndex = e.NewEditIndex;
        bindChangeOrder_Details(Constants.user_contractor, gvContChangeOrder);
    }

    protected void gvContChangeOrder_RowCancelingEdit(object sender, GridViewCancelEditEventArgs e)
    {
        gvContChangeOrder.EditIndex = -1;
        bindChangeOrder_Details(Constants.user_contractor, gvContChangeOrder);
    }

    protected void gvContChangeOrder_RowCommand(object sender, GridViewCommandEventArgs e)
    {
        gvChangeOrder_Common_Query(e, Constants.user_contractor, gvContChangeOrder);
    }

    protected void gvContChangeOrder_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        gvChangeOrder_Common_RowData(e, Constants.user_contractor, gvContChangeOrder);
    }

    protected void gvContChangeOrder_RowDeleting(object sender, GridViewDeleteEventArgs e)
    {
        //do nothing
    }

    protected void gvContChangeOrder_RowUpdating(object sender, GridViewUpdateEventArgs e)
    {
        //do nothing
    }

    #endregion

    #region Time_Extension_EIL_Bind

    protected void bindTimeDelay_eil_Details()
    {
        string Job_no = ddJobNumber.SelectedValue.ToString().Trim();
        string Year_Code = ddlYear.SelectedItem.ToString().Trim();
        string Month_Code = ddlMonth.SelectedValue.ToString().Trim();
        string User = Session["USERID"].ToString().Trim();
        StringBuilder sbQuery = new StringBuilder();
        Dictionary<string, string> paramList = new Dictionary<string, string>();
        sbQuery.Append("select  TIME_DELAY_DESC, TIME_EXTN_SR_NO, IMPACT, GEN_RAMIFICATIOONS, JUSTIFICATIONS, REMARKS  from CM_TIME_DELAY_EIL");
        sbQuery.Append(" where JOB_NO =:JOB_NO_WHR AND MONTH_CODE = :MONTH_CODE_WHR AND YEAR_CODE =:YEAR_CODE_WHR ORDER BY TIME_EXTN_SR_NO");
        paramList.Add(":JOB_NO_WHR", Job_no);
        paramList.Add(":MONTH_CODE_WHR", Month_Code);
        paramList.Add(":YEAR_CODE_WHR", Year_Code);
        objDB.bindGridView(gvTimeDelay, sbQuery.ToString(), paramList);
    }

    protected void gvTimeDelay_RowEditing(object sender, GridViewEditEventArgs e)
    {
        gvTimeDelay.EditIndex = e.NewEditIndex;
        bindTimeDelay_eil_Details();
    }

    protected void gvTimeDelay_RowCancelingEdit(object sender, GridViewCancelEditEventArgs e)
    {
        gvTimeDelay.EditIndex = -1;
        bindTimeDelay_eil_Details();
    }

    protected void gvTimeDelay_RowCommand(object sender, GridViewCommandEventArgs e)
    {
        try
        {
            lblError.Text = "";
            LinkButton senderBtn = (LinkButton)e.CommandSource;
            GridViewRow row = (GridViewRow)senderBtn.NamingContainer;
            GridView grid = (GridView)row.NamingContainer;
            string Job_no = ddJobNumber.SelectedValue.ToString().Trim();
            string Year_Code = ddlYear.SelectedItem.ToString().Trim();
            string Month_Code = ddlMonth.SelectedValue.ToString().Trim();
            string User = Session["USERID"].ToString().Trim();

            if (e.CommandName == "Update")
            {
                Label TimeEil_SrNo = (Label)row.FindControl("lbltimeextn_srno");
                TextBox Edit_ETimeDelayDesc = (TextBox)row.FindControl("txt_edit_delaydesc");
                TextBox Edit_EImpact = (TextBox)row.FindControl("txt_edit_Impact");
                TextBox Edit_EGenRamifn = (TextBox)row.FindControl("txt_edit_GenRamificn");
                TextBox Edit_EJustifn = (TextBox)row.FindControl("txt_edit_Justificn");
                TextBox Edit_ERemarks = (TextBox)row.FindControl("txtedit_Remarks_Desc");
                if (string.IsNullOrEmpty(TimeEil_SrNo.Text) == true)
                {
                    lblError.Text = "Change order Sr no be empty";
                }
                else
                {
                    StringBuilder sbEdit_Query = new StringBuilder();
                    Dictionary<string, string> Edit_ParamList = new Dictionary<string, string>();
                    sbEdit_Query.Append(" UPDATE CM_TIME_DELAY_EIL SET TIME_DELAY_DESC = :TIME_DELAY_DESC, IMPACT = :IMPACT, ");
                    sbEdit_Query.Append(" GEN_RAMIFICATIOONS = :GEN_RAMIFICATIOONS, JUSTIFICATIONS = :JUSTIFICATIONS, REMARKS = :REMARKS,");
                    sbEdit_Query.Append(" UPDATED_ON = SYSDATE , UPDATED_BY=:UPDATED_BY ");
                    sbEdit_Query.Append(" WHERE JOB_NO =:JOB_NO_WHR AND MONTH_CODE = :MONTH_CODE_WHR AND YEAR_CODE =:YEAR_CODE_WHR AND TIME_EXTN_SR_NO=:TIME_EXTN_SR_NO");
                    Edit_ParamList.Add(":TIME_DELAY_DESC", Edit_ETimeDelayDesc.Text.ToString());
                    Edit_ParamList.Add(":IMPACT", Edit_EImpact.Text.ToString());
                    Edit_ParamList.Add(":GEN_RAMIFICATIOONS", Edit_EGenRamifn.Text.ToString());
                    Edit_ParamList.Add(":JUSTIFICATIONS", Edit_EJustifn.Text.ToString());
                    Edit_ParamList.Add(":REMARKS", Edit_ERemarks.Text.ToString());
                    Edit_ParamList.Add(":UPDATED_BY", User);
                    Edit_ParamList.Add(":JOB_NO_WHR", Job_no);
                    Edit_ParamList.Add(":MONTH_CODE_WHR", Month_Code);
                    Edit_ParamList.Add(":YEAR_CODE_WHR", Year_Code);
                    Edit_ParamList.Add(":TIME_EXTN_SR_NO", TimeEil_SrNo.Text.ToString());
                    int i = objDB.executeNonQuery(sbEdit_Query.ToString(), Edit_ParamList);
                    if (i > 0)
                    {
                        gvTimeDelay.EditIndex = -1;
                        lblError.Text = "Data updated Successfully!!";
                    }
                    else
                    {
                        lblError.Text = "Error";
                    }
                }
            }
            else if (e.CommandName == "Insert")
            {
                TextBox Insert_ETimeDelayDesc = (TextBox)row.FindControl("txt_ftr_delaydesc");
                TextBox Insert_EImpact = (TextBox)row.FindControl("txt_ftr_Impact");
                TextBox Insert_EGenRamifn = (TextBox)row.FindControl("txt_ftr_GenRamificn");
                TextBox Insert_EJustifn = (TextBox)row.FindControl("txt_ftr_Justificn");
                TextBox Insert_ERemarks = (TextBox)row.FindControl("txtftr_Remarks_Desc");
                if (string.IsNullOrEmpty(Insert_ETimeDelayDesc.Text) == true)
                {
                    lblError.Text = "Change Order can not be empty";
                }
                else
                {
                    StringBuilder sbInsertQuery = new StringBuilder();
                    Dictionary<string, string> insertParamList = new Dictionary<string, string>();
                    sbInsertQuery.Append("INSERT INTO CM_TIME_DELAY_EIL (JOB_NO, MONTH_CODE, YEAR_CODE, TIME_DELAY_DESC,");
                    sbInsertQuery.Append(" TIME_EXTN_SR_NO, IMPACT, GEN_RAMIFICATIOONS, JUSTIFICATIONS, REMARKS, ADDED_DATE, ADDED_BY ) VALUES ");
                    sbInsertQuery.Append(" (:JOB_NO_TEXT,:MONTH_CODE_TEXT,:YEAR_CODE_TEXT,:TIME_DELAY_DESC, (SELECT NVL (MAX (TIME_EXTN_SR_NO), 0) + 1 countdata FROM CM_TIME_DELAY_EIL ");
                    sbInsertQuery.Append(" WHERE JOB_NO =:JOB_NO_WHR AND MONTH_CODE = :MONTH_CODE_WHR AND YEAR_CODE =:YEAR_CODE_WHR), ");
                    sbInsertQuery.Append(" :IMPACT,:GEN_RAMIFICATIOONS,:JUSTIFICATIONS,:REMARKS, sysdate, :Added_by) ");
                    insertParamList.Add(":JOB_NO_TEXT", Job_no);
                    insertParamList.Add(":MONTH_CODE_TEXT", Month_Code);
                    insertParamList.Add(":YEAR_CODE_TEXT", Year_Code);
                    insertParamList.Add(":TIME_DELAY_DESC", Insert_ETimeDelayDesc.Text.ToString().Trim());
                    insertParamList.Add(":JOB_NO_WHR", Job_no);
                    insertParamList.Add(":MONTH_CODE_WHR", Month_Code);
                    insertParamList.Add(":YEAR_CODE_WHR", Year_Code);
                    insertParamList.Add(":IMPACT", Insert_EImpact.Text.ToString());
                    insertParamList.Add(":GEN_RAMIFICATIOONS", Insert_EGenRamifn.Text.ToString());
                    insertParamList.Add(":JUSTIFICATIONS", Insert_EJustifn.Text.ToString());
                    insertParamList.Add(":REMARKS", Insert_ERemarks.Text.ToString());
                    insertParamList.Add(":Added_by", User);
                    int i = objDB.executeNonQuery(sbInsertQuery.ToString(), insertParamList);
                    if (i > 0)
                    {
                        gvTimeDelay.ShowFooter = false;
                        lblError.Text = "Record Inserted Successfully!!";
                    }
                    else
                    {
                        lblError.Text = "Error";
                    }
                }
            }
            else if (e.CommandName == "Add")
            {
                gvTimeDelay.ShowFooter = true;
            }
            else if (e.CommandName == "EmptyCancel")
            {
                gvTimeDelay.ShowFooter = false;
            }
            else if (e.CommandName == "EmptyInsert")
            {
                TextBox Empty_ETimeDelayDesc = (TextBox)row.FindControl("txtEmpty_DelayDesc");
                TextBox Empty_EImpact = (TextBox)row.FindControl("txtEmpty_Impact");
                TextBox Empty_EGenRamifn = (TextBox)row.FindControl("txtEmpty_GenRamifn");
                TextBox Empty_EJustifn = (TextBox)row.FindControl("txtEmpty_Justifn");
                TextBox Empty_ERemarks = (TextBox)row.FindControl("txtEmpty_Remarks");
                if (string.IsNullOrEmpty(Empty_ETimeDelayDesc.Text) == true)
                {
                    lblError.Text = "Change Order can not be empty";
                }
                else
                {
                    StringBuilder sbEmpty_InsertQuery = new StringBuilder();
                    Dictionary<string, string> Empty_insertParamList = new Dictionary<string, string>();
                    sbEmpty_InsertQuery.Append("INSERT INTO CM_TIME_DELAY_EIL (JOB_NO, MONTH_CODE, YEAR_CODE, TIME_DELAY_DESC,");
                    sbEmpty_InsertQuery.Append(" TIME_EXTN_SR_NO, IMPACT, GEN_RAMIFICATIOONS, JUSTIFICATIONS, REMARKS, ADDED_DATE, ADDED_BY ) VALUES ");
                    sbEmpty_InsertQuery.Append(" (:JOB_NO_TEXT,:MONTH_CODE_TEXT,:YEAR_CODE_TEXT,:TIME_DELAY_DESC, (SELECT NVL (MAX (TIME_EXTN_SR_NO), 0) + 1 countdata FROM CM_TIME_DELAY_EIL ");
                    sbEmpty_InsertQuery.Append(" WHERE JOB_NO =:JOB_NO_WHR AND MONTH_CODE = :MONTH_CODE_WHR AND YEAR_CODE =:YEAR_CODE_WHR), ");
                    sbEmpty_InsertQuery.Append(" :IMPACT,:GEN_RAMIFICATIOONS,:JUSTIFICATIONS,:REMARKS, sysdate, :Added_by) ");
                    Empty_insertParamList.Add(":JOB_NO_TEXT", Job_no);
                    Empty_insertParamList.Add(":MONTH_CODE_TEXT", Month_Code);
                    Empty_insertParamList.Add(":YEAR_CODE_TEXT", Year_Code);
                    Empty_insertParamList.Add(":TIME_DELAY_DESC", Empty_ETimeDelayDesc.Text.ToString().Trim());
                    Empty_insertParamList.Add(":JOB_NO_WHR", Job_no);
                    Empty_insertParamList.Add(":MONTH_CODE_WHR", Month_Code);
                    Empty_insertParamList.Add(":YEAR_CODE_WHR", Year_Code);
                    Empty_insertParamList.Add(":IMPACT", Empty_EImpact.Text.ToString());
                    Empty_insertParamList.Add(":GEN_RAMIFICATIOONS", Empty_EGenRamifn.Text.ToString());
                    Empty_insertParamList.Add(":JUSTIFICATIONS", Empty_EJustifn.Text.ToString());
                    Empty_insertParamList.Add(":REMARKS", Empty_ERemarks.Text.ToString());
                    Empty_insertParamList.Add(":Added_by", User);
                    int i = objDB.executeNonQuery(sbEmpty_InsertQuery.ToString(), Empty_insertParamList);
                    if (i > 0)
                    {

                        lblError.Text = "Record Inserted Successfully!!";
                    }
                    else
                    {
                        lblError.Text = "Error";
                    }
                }
            }
            else if (e.CommandName == "Delete")
            {
                Label Time_SrNo = (Label)row.FindControl("lbltimeextn_srno");
                StringBuilder sbDelete_Query = new StringBuilder();
                Dictionary<string, string> Delete_ParamList = new Dictionary<string, string>();
                sbDelete_Query.Append(" DELETE FROM CM_TIME_DELAY_EIL ");
                sbDelete_Query.Append(" WHERE JOB_NO =:JOB_NO_WHR AND MONTH_CODE = :MONTH_CODE_WHR AND YEAR_CODE =:YEAR_CODE_WHR AND TIME_EXTN_SR_NO=:TIME_EXTN_SR_NO");
                Delete_ParamList.Add(":JOB_NO_WHR", Job_no);
                Delete_ParamList.Add(":MONTH_CODE_WHR", Month_Code);
                Delete_ParamList.Add(":YEAR_CODE_WHR", Year_Code);
                Delete_ParamList.Add(":TIME_EXTN_SR_NO", Time_SrNo.Text.ToString());
                int i = objDB.executeNonQuery(sbDelete_Query.ToString(), Delete_ParamList);
                if (i > 0)
                {

                    lblError.Text = "Data Deleted Successfully!!";
                }
                else
                {
                    lblError.Text = "Error";
                }
            }
            //gvTimeDelay.EditIndex = -1;
            bindTimeDelay_eil_Details();
        }
        catch (Exception ex)
        {
            lblError.Text = ex.ToString();
        }
    }

    protected void gvTimeDelay_RowUpdating(object sender, GridViewUpdateEventArgs e)
    {
        //do nothing
    }

    protected void gvTimeDelay_RowDeleting(object sender, GridViewDeleteEventArgs e)
    {
        //do nothing
    }

    protected void gvTimeDelay_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        string user_role = Session["User_Role"].ToString();
        string Edit_Rights = Session["Edit_Rights"].ToString();
        string Visible_false = Session["Visible_false"].ToString();
        if ((((user_role == "V") || (user_role == "Z") || (user_role == "ID")) && (Edit_Rights == "")) || (Visible_false == "Y"))
        {
            if (e.Row.RowType == DataControlRowType.EmptyDataRow)
            {
                //here you can access the div control
                HtmlGenericControl htmlhideDiv = (HtmlGenericControl)e.Row.FindControl("hideDivTimeDelay");
                htmlhideDiv.Style.Add("Display", "none");
            }
        }
    }

    #endregion

    #region Time_Extension_others_Bind

    protected void bindTimeDelay_others_Details()
    {
        string Job_no = ddJobNumber.SelectedValue.ToString().Trim();
        string Year_Code = ddlYear.SelectedItem.ToString().Trim();
        string Month_Code = ddlMonth.SelectedValue.ToString().Trim();
        string User = Session["USERID"].ToString().Trim();
        string User_code = Constants.user_contractor;
        StringBuilder sbQuery = new StringBuilder();
        Dictionary<string, string> paramList = new Dictionary<string, string>();
        sbQuery.Append("select CONTRACTOR_SR_NO, CONTRACTOR_VENDOR_NO, IMPACT_ON_SITE, IMPACT_ON_EIL_FEE, MITIGATIONS, REMARKS from CM_TIME_DELAY_OTHERS");
        sbQuery.Append(" where JOB_NO =:JOB_NO_WHR AND MONTH_CODE = :MONTH_CODE_WHR AND YEAR_CODE =:YEAR_CODE_WHR and USER_CODE=:USER_CODE ORDER BY CONTRACTOR_SR_NO");
        paramList.Add(":JOB_NO_WHR", Job_no);
        paramList.Add(":MONTH_CODE_WHR", Month_Code);
        paramList.Add(":YEAR_CODE_WHR", Year_Code);
        paramList.Add(":USER_CODE", User_code);
        objDB.bindGridView(gvTimeDelay_Others, sbQuery.ToString(), paramList);
    }

    protected void gvTimeDelay_Others_RowEditing(object sender, GridViewEditEventArgs e)
    {
        gvTimeDelay_Others.EditIndex = e.NewEditIndex;
        bindTimeDelay_others_Details();
    }

    protected void gvTimeDelay_Others_RowCancelingEdit(object sender, GridViewCancelEditEventArgs e)
    {
        gvTimeDelay_Others.EditIndex = -1;
        bindTimeDelay_others_Details();
    }

    protected void gvTimeDelay_Others_RowCommand(object sender, GridViewCommandEventArgs e)
    {
        try
        {
            lblError.Text = "";
            LinkButton senderBtn = (LinkButton)e.CommandSource;
            GridViewRow row = (GridViewRow)senderBtn.NamingContainer;
            GridView grid = (GridView)row.NamingContainer;
            string Job_no = ddJobNumber.SelectedValue.ToString().Trim();
            string Year_Code = ddlYear.SelectedItem.ToString().Trim();
            string Month_Code = ddlMonth.SelectedValue.ToString().Trim();
            string User = Session["USERID"].ToString().Trim();
            string User_code = Constants.user_contractor;
            Label Contractor_SrNo = (Label)row.FindControl("lblContractr_Srno");
            if (e.CommandName == "Update")
            {
                TextBox Edit_contvend_name = (TextBox)row.FindControl("txt_edit_contvend_name");
                TextBox Edit_ImpactSite = (TextBox)row.FindControl("txt_edit_Impact_site");
                TextBox Edit_ImpactEIL = (TextBox)row.FindControl("txt_edit_Impact_eil");
                TextBox Edit_Mitign = (TextBox)row.FindControl("txt_edit_Mitigations");
                TextBox Edit_ERemarks = (TextBox)row.FindControl("txtedit_Remarks_Desc_others");
                if (string.IsNullOrEmpty(Contractor_SrNo.Text) == true)
                {
                    lblError.Text = "Change order Sr no be empty";
                }
                else
                {
                    StringBuilder sbEdit_Query = new StringBuilder();
                    Dictionary<string, string> Edit_ParamList = new Dictionary<string, string>();
                    sbEdit_Query.Append(" UPDATE CM_TIME_DELAY_OTHERS SET CONTRACTOR_VENDOR_NO = :CONTRACTOR_VENDOR_NO, IMPACT_ON_SITE = :IMPACT_ON_SITE, ");
                    sbEdit_Query.Append(" IMPACT_ON_EIL_FEE = :IMPACT_ON_EIL_FEE, MITIGATIONS = :MITIGATIONS, REMARKS = :REMARKS,");
                    sbEdit_Query.Append(" UPDATED_ON = SYSDATE , UPDATED_BY=:UPDATED_BY ");
                    sbEdit_Query.Append(" WHERE JOB_NO =:JOB_NO_WHR AND MONTH_CODE = :MONTH_CODE_WHR AND YEAR_CODE =:YEAR_CODE_WHR and USER_CODE=:USER_CODE_WHR AND CONTRACTOR_SR_NO=:CONTRACTOR_SR_NO");
                    Edit_ParamList.Add(":CONTRACTOR_VENDOR_NO", Edit_contvend_name.Text.ToString());
                    Edit_ParamList.Add(":IMPACT_ON_SITE", Edit_ImpactSite.Text.ToString());
                    Edit_ParamList.Add(":IMPACT_ON_EIL_FEE", Edit_ImpactEIL.Text.ToString());
                    Edit_ParamList.Add(":MITIGATIONS", Edit_Mitign.Text.ToString());
                    Edit_ParamList.Add(":REMARKS", Edit_ERemarks.Text.ToString());
                    Edit_ParamList.Add(":UPDATED_BY", User);
                    Edit_ParamList.Add(":JOB_NO_WHR", Job_no);
                    Edit_ParamList.Add(":MONTH_CODE_WHR", Month_Code);
                    Edit_ParamList.Add(":YEAR_CODE_WHR", Year_Code);
                    Edit_ParamList.Add(":USER_CODE_WHR", User_code);
                    Edit_ParamList.Add(":CONTRACTOR_SR_NO", Contractor_SrNo.Text.ToString());
                    int i = objDB.executeNonQuery(sbEdit_Query.ToString(), Edit_ParamList);
                    if (i > 0)
                    {
                        gvTimeDelay_Others.EditIndex = -1;
                        lblError.Text = "Data updated Successfully!!";
                    }
                    else
                    {
                        lblError.Text = "Error";
                    }
                }
            }
            else if (e.CommandName == "Insert")
            {
                TextBox Insert_contvend_name = (TextBox)row.FindControl("txt_ftr_contvend_name");
                TextBox Insert_ImpactSite = (TextBox)row.FindControl("txt_ftr_Impact_site");
                TextBox Insert_ImpactEIL = (TextBox)row.FindControl("txt_ftr_Impact_eil");
                TextBox Insert_Mitign = (TextBox)row.FindControl("txt_ftr_Mitigations");
                TextBox Insert_Remarks = (TextBox)row.FindControl("txtftr_Remarks_Desc_others");
                if (string.IsNullOrEmpty(Insert_contvend_name.Text) == true)
                {
                    lblError.Text = "Contractor/Vendor name can not be empty";
                }
                else
                {
                    StringBuilder sbInsertQuery = new StringBuilder();
                    Dictionary<string, string> insertParamList = new Dictionary<string, string>();
                    sbInsertQuery.Append("INSERT INTO CM_TIME_DELAY_OTHERS (JOB_NO, MONTH_CODE, YEAR_CODE, USER_CODE, CONTRACTOR_SR_NO, ");
                    sbInsertQuery.Append(" CONTRACTOR_VENDOR_NO, IMPACT_ON_SITE, IMPACT_ON_EIL_FEE, MITIGATIONS, REMARKS, ADDED_DATE, ADDED_BY ) VALUES ");
                    sbInsertQuery.Append(" (:JOB_NO_TEXT,:MONTH_CODE_TEXT,:YEAR_CODE_TEXT,:USER_CODE_TEXT, (SELECT NVL (MAX (CONTRACTOR_SR_NO), 0) + 1 countdata FROM CM_TIME_DELAY_OTHERS ");
                    sbInsertQuery.Append(" WHERE JOB_NO =:JOB_NO_WHR AND MONTH_CODE = :MONTH_CODE_WHR AND YEAR_CODE =:YEAR_CODE_WHR AND USER_CODE=:USER_CODE_WHR), ");
                    sbInsertQuery.Append(" :CONTRACTOR_VENDOR_NO,:IMPACT_ON_SITE,:IMPACT_ON_EIL_FEE,:MITIGATIONS,:REMARKS, sysdate, :Added_by) ");
                    insertParamList.Add(":JOB_NO_TEXT", Job_no);
                    insertParamList.Add(":MONTH_CODE_TEXT", Month_Code);
                    insertParamList.Add(":YEAR_CODE_TEXT", Year_Code);
                    insertParamList.Add(":USER_CODE_TEXT", User_code);
                    insertParamList.Add(":JOB_NO_WHR", Job_no);
                    insertParamList.Add(":MONTH_CODE_WHR", Month_Code);
                    insertParamList.Add(":YEAR_CODE_WHR", Year_Code);
                    insertParamList.Add(":USER_CODE_WHR", User_code);
                    insertParamList.Add(":CONTRACTOR_VENDOR_NO", Insert_contvend_name.Text.ToString().Trim());
                    insertParamList.Add(":IMPACT_ON_SITE", Insert_ImpactSite.Text.ToString());
                    insertParamList.Add(":IMPACT_ON_EIL_FEE", Insert_ImpactEIL.Text.ToString());
                    insertParamList.Add(":MITIGATIONS", Insert_Mitign.Text.ToString());
                    insertParamList.Add(":REMARKS", Insert_Remarks.Text.ToString());
                    insertParamList.Add(":Added_by", User);
                    int i = objDB.executeNonQuery(sbInsertQuery.ToString(), insertParamList);
                    if (i > 0)
                    {
                        gvTimeDelay_Others.ShowFooter = false;
                        lblError.Text = "Record Inserted Successfully!!";
                    }
                    else
                    {
                        lblError.Text = "Error";
                    }
                }
            }
            else if (e.CommandName == "Add")
            {
                gvTimeDelay_Others.ShowFooter = true;
            }
            else if (e.CommandName == "EmptyCancel")
            {
                gvTimeDelay_Others.ShowFooter = false;
            }
            else if (e.CommandName == "EmptyInsert")
            {
                TextBox Empty_contvend_name = (TextBox)row.FindControl("txtEmpty_DelayDesc");
                TextBox Empty_ImpactSite = (TextBox)row.FindControl("txtEmpty_ImpactSite");
                TextBox Empty_ImpactEIL = (TextBox)row.FindControl("txtEmpty_Impacteil");
                TextBox Empty_Mitign = (TextBox)row.FindControl("txtEmpty_Mitign");
                TextBox Empty_Remarks = (TextBox)row.FindControl("txtEmpty_ORemarks");
                if (string.IsNullOrEmpty(Empty_contvend_name.Text) == true)
                {
                    lblError.Text = "Contractor/Vendor name can not be empty";
                }
                else
                {
                    StringBuilder sbEmpty_InsertQuery = new StringBuilder();
                    Dictionary<string, string> Empty_insertParamList = new Dictionary<string, string>();
                    sbEmpty_InsertQuery.Append("INSERT INTO CM_TIME_DELAY_OTHERS (JOB_NO, MONTH_CODE, YEAR_CODE, USER_CODE, CONTRACTOR_SR_NO, ");
                    sbEmpty_InsertQuery.Append(" CONTRACTOR_VENDOR_NO, IMPACT_ON_SITE, IMPACT_ON_EIL_FEE, MITIGATIONS, REMARKS, ADDED_DATE, ADDED_BY ) VALUES ");
                    sbEmpty_InsertQuery.Append(" (:JOB_NO_TEXT,:MONTH_CODE_TEXT,:YEAR_CODE_TEXT,:USER_CODE_TEXT, (SELECT NVL (MAX (CONTRACTOR_SR_NO), 0) + 1 countdata FROM CM_TIME_DELAY_OTHERS ");
                    sbEmpty_InsertQuery.Append(" WHERE JOB_NO =:JOB_NO_WHR AND MONTH_CODE = :MONTH_CODE_WHR AND YEAR_CODE =:YEAR_CODE_WHR AND USER_CODE=:USER_CODE_WHR), ");
                    sbEmpty_InsertQuery.Append(" :CONTRACTOR_VENDOR_NO,:IMPACT_ON_SITE,:IMPACT_ON_EIL_FEE,:MITIGATIONS,:REMARKS, sysdate, :Added_by) ");
                    Empty_insertParamList.Add(":JOB_NO_TEXT", Job_no);
                    Empty_insertParamList.Add(":MONTH_CODE_TEXT", Month_Code);
                    Empty_insertParamList.Add(":YEAR_CODE_TEXT", Year_Code);
                    Empty_insertParamList.Add(":USER_CODE_TEXT", User_code);
                    Empty_insertParamList.Add(":JOB_NO_WHR", Job_no);
                    Empty_insertParamList.Add(":MONTH_CODE_WHR", Month_Code);
                    Empty_insertParamList.Add(":YEAR_CODE_WHR", Year_Code);
                    Empty_insertParamList.Add(":USER_CODE_WHR", User_code);
                    Empty_insertParamList.Add(":CONTRACTOR_VENDOR_NO", Empty_contvend_name.Text.ToString().Trim());
                    Empty_insertParamList.Add(":IMPACT_ON_SITE", Empty_ImpactSite.Text.ToString());
                    Empty_insertParamList.Add(":IMPACT_ON_EIL_FEE", Empty_ImpactEIL.Text.ToString());
                    Empty_insertParamList.Add(":MITIGATIONS", Empty_Mitign.Text.ToString());
                    Empty_insertParamList.Add(":REMARKS", Empty_Remarks.Text.ToString());
                    Empty_insertParamList.Add(":Added_by", User);
                    int i = objDB.executeNonQuery(sbEmpty_InsertQuery.ToString(), Empty_insertParamList);
                    if (i > 0)
                    {
                        lblError.Text = "Record Inserted Successfully!!";
                    }
                    else
                    {
                        lblError.Text = "Error";
                    }
                }
            }
            else if (e.CommandName == "Delete")
            {
                StringBuilder sbDelete_Query = new StringBuilder();
                Dictionary<string, string> Delete_ParamList = new Dictionary<string, string>();
                sbDelete_Query.Append(" DELETE FROM CM_TIME_DELAY_OTHERS ");
                sbDelete_Query.Append(" WHERE JOB_NO =:JOB_NO_WHR AND MONTH_CODE = :MONTH_CODE_WHR AND YEAR_CODE =:YEAR_CODE_WHR ");
                sbDelete_Query.Append(" AND USER_CODE=:USER_CODE_WHR AND CONTRACTOR_SR_NO=:CONTRACTOR_SR_NO");
                Delete_ParamList.Add(":JOB_NO_WHR", Job_no);
                Delete_ParamList.Add(":MONTH_CODE_WHR", Month_Code);
                Delete_ParamList.Add(":YEAR_CODE_WHR", Year_Code);
                Delete_ParamList.Add(":USER_CODE_WHR", User_code);
                Delete_ParamList.Add(":CONTRACTOR_SR_NO", Contractor_SrNo.Text.ToString());
                int i = objDB.executeNonQuery(sbDelete_Query.ToString(), Delete_ParamList);
                if (i > 0)
                {
                    lblError.Text = "Data Deleted Successfully!!";
                }
                else
                {
                    lblError.Text = "Error";
                }
            }
            //gvTimeDelay_Others.EditIndex = -1;
            bindTimeDelay_others_Details();
        }
        catch (Exception ex)
        {
            lblError.Text = ex.ToString();
        }
    }

    protected void gvTimeDelay_Others_RowUpdating(object sender, GridViewUpdateEventArgs e)
    {
        //do nothing
    }

    protected void gvTimeDelay_Others_RowDeleting(object sender, GridViewDeleteEventArgs e)
    {
        //do nothing
    }

    protected void gvTimeDelay_Others_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        string user_role = Session["User_Role"].ToString();
        string Edit_Rights = Session["Edit_Rights"].ToString();
        string Visible_false = Session["Visible_false"].ToString();
        if ((((user_role == "V") || (user_role == "Z") || (user_role == "ID")) && (Edit_Rights == "")) || (Visible_false == "Y"))
        {
            if (e.Row.RowType == DataControlRowType.EmptyDataRow)
            {
                //here you can access the div control
                HtmlGenericControl htmlhideDiv = (HtmlGenericControl)e.Row.FindControl("hideDivTimeDelayOthers");
                htmlhideDiv.Style.Add("Display", "none");
            }
        }
    }

    #endregion

    #region Extra Items

    protected void bindExtraItems_Details(string user_code, GridView gvExtra)
    {
        string Job_no = ddJobNumber.SelectedValue.ToString().Trim();
        string Year_Code = ddlYear.SelectedItem.ToString().Trim();
        string Month_Code = ddlMonth.SelectedValue.ToString().Trim();
        string User = Session["USERID"].ToString().Trim();
        StringBuilder sbQuery = new StringBuilder();
        Dictionary<string, string> paramList = new Dictionary<string, string>();
        sbQuery.Append("select CONTRACTOR_VENDOR_NO, ITEM_SR_NO, TO_CHAR(ITEM_DATE,'dd/Mon/yyyy') ITEM_DATE, RESOLUTION, AMOUNT, REASONS from CM_EXTRA_ITEM_DETAILS");
        sbQuery.Append(" where JOB_NO =:JOB_NO_WHR AND MONTH_CODE = :MONTH_CODE_WHR AND YEAR_CODE =:YEAR_CODE_WHR and USER_CODE=:USER_CODE_WHR ORDER BY ITEM_SR_NO");
        paramList.Add(":JOB_NO_WHR", Job_no);
        paramList.Add(":MONTH_CODE_WHR", Month_Code);
        paramList.Add(":YEAR_CODE_WHR", Year_Code);
        paramList.Add(":USER_CODE_WHR", user_code);
        objDB.bindGridView(gvExtra, sbQuery.ToString(), paramList);
    }

    protected void gvExtraItems_RowEditing(object sender, GridViewEditEventArgs e)
    {
        gvExtraItems.EditIndex = e.NewEditIndex;
        bindExtraItems_Details(Constants.user_contractor, gvExtraItems);
    }

    protected void gvExtraItems_RowCancelingEdit(object sender, GridViewCancelEditEventArgs e)
    {
        gvExtraItems.EditIndex = -1;
        bindExtraItems_Details(Constants.user_contractor, gvExtraItems);
    }

    protected void gvExtraItems_RowCommand(object sender, GridViewCommandEventArgs e)
    {
        gvExtraItems_DB_Query(e, Constants.user_contractor, gvExtraItems);
    }

    protected void gvExtraItems_RowUpdating(object sender, GridViewUpdateEventArgs e)
    {
        //do nothing
    }

    protected void gvExtraItems_RowDeleting(object sender, GridViewDeleteEventArgs e)
    {
        //do nothing
    }

    protected void gvExtraItems_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        string user_role = Session["User_Role"].ToString();
        string Edit_Rights = Session["Edit_Rights"].ToString();
        string Visible_false = Session["Visible_false"].ToString();
        if ((((user_role == "V") || (user_role == "Z") || (user_role == "ID")) && (Edit_Rights == "")) || (Visible_false == "Y"))
        {
            if (e.Row.RowType == DataControlRowType.EmptyDataRow)
            {
                //here you can access the div control
                HtmlGenericControl htmlhideDiv = (HtmlGenericControl)e.Row.FindControl("hideDivExtraItems");
                htmlhideDiv.Style.Add("Display", "none");
            }
        }
    }

    //Common code
    protected void gvExtraItems_DB_Query(GridViewCommandEventArgs e, string user_code, GridView gvExtra)
    {
        try
        {
            lblError.Text = "";
            LinkButton senderBtn = (LinkButton)e.CommandSource;
            GridViewRow row = (GridViewRow)senderBtn.NamingContainer;
            GridView grid = (GridView)row.NamingContainer;
            string Job_no = ddJobNumber.SelectedValue.ToString().Trim();
            string Year_Code = ddlYear.SelectedItem.ToString().Trim();
            string Month_Code = ddlMonth.SelectedValue.ToString().Trim();
            string User = Session["USERID"].ToString().Trim();

            if (e.CommandName == "Update")
            {
                string itemsrno = null;
                string contname = null;
                string itemdate = null;
                string itemAmt = null;
                string Resoln = null;
                string Reason = null;
                if (user_code == Constants.user_contractor)
                {
                    itemsrno = "lblExItem_SrNo";
                    contname = "txt_edt_contractor_name";
                    itemdate = "txt_edit_ItemDate";
                    itemAmt = "txt_edit_ItemAmount";
                    Resoln = "txt_edit_Resoln";
                    Reason = "txtedit_Reasons_Desc";
                }
                else if (user_code == Constants.user_vendor)
                {
                    itemsrno = "lblExItem_SrNo";
                    contname = "txt_edt_vendor_name";
                    itemdate = "txt_edit_VItemDate";
                    itemAmt = "txt_edit_VItemAmount";
                    Resoln = "txt_edit_VResoln";
                    Reason = "txtedit_VReasons_Desc";
                }

                Label ExtraItem_SrNo = (Label)row.FindControl(itemsrno);
                TextBox edit_cont_name = (TextBox)row.FindControl(contname);
                TextBox edit_Itemdate = (TextBox)row.FindControl(itemdate);
                TextBox edit_Amount = (TextBox)row.FindControl(itemAmt);
                TextBox edit_Resolution = (TextBox)row.FindControl(Resoln);
                TextBox edit_Reasons = (TextBox)row.FindControl(Reason);

                if (string.IsNullOrEmpty(ExtraItem_SrNo.Text) == true)
                {
                    lblError.Text = "Contractor/Vendor name can not be empty";
                }
                else
                {
                    StringBuilder sbEdit_Query = new StringBuilder();
                    Dictionary<string, string> Edit_ParamList = new Dictionary<string, string>();
                    sbEdit_Query.Append(" UPDATE CM_EXTRA_ITEM_DETAILS SET CONTRACTOR_VENDOR_NO = :CONTRACTOR_VENDOR_NO,ITEM_DATE = :ITEM_DATE, ");
                    sbEdit_Query.Append(" AMOUNT = :AMOUNT,  RESOLUTION = :RESOLUTION, REASONS = :REASONS,");
                    sbEdit_Query.Append(" UPDATED_ON = SYSDATE , UPDATED_BY=:UPDATED_BY ");
                    sbEdit_Query.Append(" WHERE JOB_NO =:JOB_NO_WHR AND MONTH_CODE = :MONTH_CODE_WHR AND YEAR_CODE =:YEAR_CODE_WHR and USER_CODE= :USER_CODE_WHR AND ITEM_SR_NO=:ITEM_SR_NO");
                    Edit_ParamList.Add(":CONTRACTOR_VENDOR_NO", edit_cont_name.Text.ToString());
                    Edit_ParamList.Add(":ITEM_DATE", edit_Itemdate.Text.ToString());
                    Edit_ParamList.Add(":AMOUNT", edit_Amount.Text.ToString());
                    Edit_ParamList.Add(":RESOLUTION", edit_Resolution.Text.ToString());
                    Edit_ParamList.Add(":REASONS", edit_Reasons.Text.ToString());
                    Edit_ParamList.Add(":UPDATED_BY", User);
                    Edit_ParamList.Add(":JOB_NO_WHR", Job_no);
                    Edit_ParamList.Add(":MONTH_CODE_WHR", Month_Code);
                    Edit_ParamList.Add(":YEAR_CODE_WHR", Year_Code);
                    Edit_ParamList.Add(":USER_CODE_WHR", user_code);
                    Edit_ParamList.Add(":ITEM_SR_NO", ExtraItem_SrNo.Text.ToString());
                    int i = objDB.executeNonQuery(sbEdit_Query.ToString(), Edit_ParamList);
                    if (i > 0)
                    {
                        gvExtra.EditIndex = -1;
                        lblError.Text = "Data updated Successfully!!";
                    }
                    else
                    {
                        lblError.Text = "Error";
                    }
                }
            }
            else if (e.CommandName == "Insert")
            {
                string ftr_contname = null;
                string ftr_itemdate = null;
                string ftr_itemAmt = null;
                string ftr_Resoln = null;
                string ftr_Reason = null;
                if (user_code == Constants.user_contractor)
                {
                    ftr_contname = "txt_ftr_contractor_name";
                    ftr_itemdate = "txt_ftr_ItemDate";
                    ftr_itemAmt = "txt_ftr_ItemAmount";
                    ftr_Resoln = "txt_ftr_Resoln";
                    ftr_Reason = "txtftr_Reasons_Desc";
                }
                else if (user_code == Constants.user_vendor)
                {
                    ftr_contname = "txt_ftr_vendor_name";
                    ftr_itemdate = "txt_ftr_VItemDate";
                    ftr_itemAmt = "txt_ftr_VItemAmount";
                    ftr_Resoln = "txt_ftr_VResoln";
                    ftr_Reason = "txtftr_VReasons_Desc";
                }

                TextBox ftr_cont_name = (TextBox)row.FindControl(ftr_contname);
                TextBox ftr_Itemdate = (TextBox)row.FindControl(ftr_itemdate);
                TextBox ftr_Amount = (TextBox)row.FindControl(ftr_itemAmt);
                TextBox ftr_Resolution = (TextBox)row.FindControl(ftr_Resoln);
                TextBox ftr_Reasons = (TextBox)row.FindControl(ftr_Reason);
                if (string.IsNullOrEmpty(ftr_cont_name.Text) == true)
                {
                    lblError.Text = "Contractor/Vendor name can not be empty";
                }
                else
                {
                    StringBuilder sbInsertQuery = new StringBuilder();
                    Dictionary<string, string> insertParamList = new Dictionary<string, string>();
                    sbInsertQuery.Append("INSERT INTO CM_EXTRA_ITEM_DETAILS (JOB_NO, MONTH_CODE, YEAR_CODE, USER_CODE,");
                    sbInsertQuery.Append(" CONTRACTOR_VENDOR_NO, ITEM_SR_NO, ITEM_DATE, RESOLUTION, AMOUNT, REASONS,");
                    sbInsertQuery.Append(" ADDED_DATE, ADDED_BY ) VALUES ");
                    sbInsertQuery.Append(" (:JOB_NO_TEXT,:MONTH_CODE_TEXT,:YEAR_CODE_TEXT,:USER_CODE,:CONT_NAME, (SELECT NVL (MAX (ITEM_SR_NO), 0) + 1 countdata FROM CM_EXTRA_ITEM_DETAILS ");
                    sbInsertQuery.Append(" WHERE JOB_NO =:JOB_NO_WHR AND MONTH_CODE = :MONTH_CODE_WHR AND YEAR_CODE =:YEAR_CODE_WHR AND USER_CODE=:USER_CODE_WHR), ");
                    sbInsertQuery.Append(" :ITEM_DATE,:RESOLUTION,:AMOUNT,:REASONS,sysdate, :Added_by) ");
                    insertParamList.Add(":JOB_NO_TEXT", Job_no);
                    insertParamList.Add(":MONTH_CODE_TEXT", Month_Code);
                    insertParamList.Add(":YEAR_CODE_TEXT", Year_Code);
                    insertParamList.Add(":USER_CODE", user_code);
                    insertParamList.Add(":CONT_NAME", ftr_cont_name.Text.ToString().Trim());
                    insertParamList.Add(":JOB_NO_WHR", Job_no);
                    insertParamList.Add(":MONTH_CODE_WHR", Month_Code);
                    insertParamList.Add(":YEAR_CODE_WHR", Year_Code);
                    insertParamList.Add(":USER_CODE_WHR", user_code);
                    insertParamList.Add(":ITEM_DATE", ftr_Itemdate.Text.ToString());
                    insertParamList.Add(":RESOLUTION", ftr_Resolution.Text.ToString());
                    insertParamList.Add(":AMOUNT", ftr_Amount.Text.ToString());
                    insertParamList.Add(":REASONS", ftr_Reasons.Text.ToString());
                    insertParamList.Add(":Added_by", User);
                    int i = objDB.executeNonQuery(sbInsertQuery.ToString(), insertParamList);
                    if (i > 0)
                    {
                        gvExtra.ShowFooter = false;
                        lblError.Text = "Data Inserted Successfully!!";
                    }
                    else
                    {
                        lblError.Text = "Error";
                    }
                }
            }
            else if (e.CommandName == "Add")
            {
                gvExtraItems.ShowFooter = true;
            }
            else if (e.CommandName == "EmptyCancel")
            {
                gvExtraItems.ShowFooter = false;
            }
            else if (e.CommandName == "EmptyInsert")
            {
                string empty_contname = null;
                string empty_itemdate = null;
                string empty_itemAmt = null;
                string empty_Resoln = null;
                string empty_Reason = null;
                if (user_code == Constants.user_contractor)
                {
                    empty_contname = "txtEmpty_contractor_name";
                    empty_itemdate = "txt_empty_ItemDate";
                    empty_itemAmt = "txtEmpty_Amount";
                    empty_Resoln = "txtEmpty_Resoln";
                    empty_Reason = "txtEmpty_Reasons";
                }
                else if (user_code == Constants.user_vendor)
                {
                    empty_contname = "txtEmpty_vendor_name";
                    empty_itemdate = "txt_empty_VItemDate";
                    empty_itemAmt = "txtEmpty_VAmount";
                    empty_Resoln = "txtEmpty_VResoln";
                    empty_Reason = "txtEmpty_VReasons";
                }

                TextBox Empty_cont_name = (TextBox)row.FindControl(empty_contname);
                TextBox Empty_Itemdate = (TextBox)row.FindControl(empty_itemdate);
                TextBox Empty_Amount = (TextBox)row.FindControl(empty_itemAmt);
                TextBox Empty_Resolution = (TextBox)row.FindControl(empty_Resoln);
                TextBox Empty_Reasons = (TextBox)row.FindControl(empty_Reason);
                if (string.IsNullOrEmpty(Empty_cont_name.Text) == true)
                {
                    lblError.Text = "Contractor/Vendor name can not be empty";
                }
                else
                {
                    StringBuilder sbEmpty_InsertQuery = new StringBuilder();
                    Dictionary<string, string> Empty_insertParamList = new Dictionary<string, string>();
                    sbEmpty_InsertQuery.Append("INSERT INTO CM_EXTRA_ITEM_DETAILS (JOB_NO, MONTH_CODE, YEAR_CODE, USER_CODE,");
                    sbEmpty_InsertQuery.Append(" CONTRACTOR_VENDOR_NO, ITEM_SR_NO, ITEM_DATE, RESOLUTION, AMOUNT, REASONS,");
                    sbEmpty_InsertQuery.Append(" ADDED_DATE, ADDED_BY ) VALUES ");
                    sbEmpty_InsertQuery.Append(" (:JOB_NO_TEXT,:MONTH_CODE_TEXT,:YEAR_CODE_TEXT,:USER_CODE,:CONT_NAME, (SELECT NVL (MAX (ITEM_SR_NO), 0) + 1 countdata FROM CM_EXTRA_ITEM_DETAILS ");
                    sbEmpty_InsertQuery.Append(" WHERE JOB_NO =:JOB_NO_WHR AND MONTH_CODE = :MONTH_CODE_WHR AND YEAR_CODE =:YEAR_CODE_WHR AND USER_CODE=:USER_CODE_WHR), ");
                    sbEmpty_InsertQuery.Append(" :ITEM_DATE,:RESOLUTION,:AMOUNT,:REASONS,sysdate, :Added_by) ");
                    Empty_insertParamList.Add(":JOB_NO_TEXT", Job_no);
                    Empty_insertParamList.Add(":MONTH_CODE_TEXT", Month_Code);
                    Empty_insertParamList.Add(":YEAR_CODE_TEXT", Year_Code);
                    Empty_insertParamList.Add(":USER_CODE", user_code);
                    Empty_insertParamList.Add(":CONT_NAME", Empty_cont_name.Text.ToString().Trim());
                    Empty_insertParamList.Add(":JOB_NO_WHR", Job_no);
                    Empty_insertParamList.Add(":MONTH_CODE_WHR", Month_Code);
                    Empty_insertParamList.Add(":YEAR_CODE_WHR", Year_Code);
                    Empty_insertParamList.Add(":USER_CODE_WHR", user_code);
                    Empty_insertParamList.Add(":ITEM_DATE", Empty_Itemdate.Text.ToString());
                    Empty_insertParamList.Add(":RESOLUTION", Empty_Resolution.Text.ToString());
                    Empty_insertParamList.Add(":AMOUNT", Empty_Amount.Text.ToString());
                    Empty_insertParamList.Add(":REASONS", Empty_Reasons.Text.ToString());
                    Empty_insertParamList.Add(":Added_by", User);
                    int i = objDB.executeNonQuery(sbEmpty_InsertQuery.ToString(), Empty_insertParamList);
                    if (i > 0)
                    {
                        lblError.Text = "Data Inserted Successfully!!";
                    }
                    else
                    {
                        lblError.Text = "Error";
                    }
                }
            }
            else if (e.CommandName == "Delete")
            {
                string Del_Item_SrNo = null;
                if (user_code == Constants.user_contractor)
                {
                    Del_Item_SrNo = "lblExItem_SrNo";
                }
                else if (user_code == Constants.user_vendor)
                {
                    Del_Item_SrNo = "lblVExItem_SrNo";
                }
                Label ExItem_SrNo = (Label)row.FindControl(Del_Item_SrNo);

                StringBuilder sbDelete_Query = new StringBuilder();
                Dictionary<string, string> Delete_ParamList = new Dictionary<string, string>();
                sbDelete_Query.Append(" DELETE FROM CM_EXTRA_ITEM_DETAILS ");
                sbDelete_Query.Append(" WHERE JOB_NO =:JOB_NO_WHR AND MONTH_CODE = :MONTH_CODE_WHR AND YEAR_CODE =:YEAR_CODE_WHR AND USER_CODE = :USER_CODE AND ITEM_SR_NO=:ITEM_SR_NO ");
                Delete_ParamList.Add(":JOB_NO_WHR", Job_no);
                Delete_ParamList.Add(":MONTH_CODE_WHR", Month_Code);
                Delete_ParamList.Add(":YEAR_CODE_WHR", Year_Code);
                Delete_ParamList.Add(":USER_CODE", user_code);
                Delete_ParamList.Add(":ITEM_SR_NO", ExItem_SrNo.Text.ToString());
                int i = objDB.executeNonQuery(sbDelete_Query.ToString(), Delete_ParamList);
                if (i > 0)
                {
                    lblError.Text = "Data Deleted Successfully!!";
                }
                else
                {
                    lblError.Text = "Error";
                }
            }
            //gvExtra.EditIndex = -1;
            bindExtraItems_Details(user_code, gvExtra);
        }
        catch (Exception ex)
        {
            lblError.Text = ex.ToString();
        }
    }

    //gv Extra Item -Vendor
    protected void gvExtraItemsVendor_RowEditing(object sender, GridViewEditEventArgs e)
    {
        gvExtraItemsVendor.EditIndex = e.NewEditIndex;
        bindExtraItems_Details(Constants.user_vendor, gvExtraItemsVendor);
    }

    protected void gvExtraItemsVendor_RowCancelingEdit(object sender, GridViewCancelEditEventArgs e)
    {
        gvExtraItemsVendor.EditIndex = -1;
        bindExtraItems_Details(Constants.user_vendor, gvExtraItemsVendor);
    }

    protected void gvExtraItemsVendor_RowCommand(object sender, GridViewCommandEventArgs e)
    {
        gvExtraItems_DB_Query(e, Constants.user_vendor, gvExtraItemsVendor);
    }

    protected void gvExtraItemsVendor_RowUpdating(object sender, GridViewUpdateEventArgs e)
    {
        //do nothing
    }

    protected void gvExtraItemsVendor_RowDeleting(object sender, GridViewDeleteEventArgs e)
    {
        //do nothing
    }

    protected void gvExtraItemsVendor_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        string user_role = Session["User_Role"].ToString();
        string Edit_Rights = Session["Edit_Rights"].ToString();
        string Visible_false = Session["Visible_false"].ToString();
        if ((((user_role == "V") || (user_role == "Z") || (user_role == "ID")) && (Edit_Rights == "")) || (Visible_false == "Y"))
        {
            if (e.Row.RowType == DataControlRowType.EmptyDataRow)
            {
                //here you can access the div control
                HtmlGenericControl htmlhideDiv = (HtmlGenericControl)e.Row.FindControl("hideDivExtraItemsVendor");
                htmlhideDiv.Style.Add("Display", "none");
            }
        }
    }

    #endregion

    #region Warehouse_details_Bind

    protected void bindWarehouse_Details()
    {
        string Job_no = ddJobNumber.SelectedValue.ToString().Trim();
        string Year_Code = ddlYear.SelectedItem.ToString().Trim();
        string Month_Code = ddlMonth.SelectedValue.ToString().Trim();
        string User = Session["USERID"].ToString().Trim();
        StringBuilder sbQuery = new StringBuilder();
        Dictionary<string, string> paramList = new Dictionary<string, string>();
        sbQuery.Append("select WH_SR_NO, WH_DESC, REMARKS  from CM_WAREHOUSE_DETAILS");
        sbQuery.Append(" where JOB_NO =:JOB_NO_WHR AND MONTH_CODE = :MONTH_CODE_WHR AND YEAR_CODE =:YEAR_CODE_WHR ORDER BY WH_SR_NO");
        paramList.Add(":JOB_NO_WHR", Job_no);
        paramList.Add(":MONTH_CODE_WHR", Month_Code);
        paramList.Add(":YEAR_CODE_WHR", Year_Code);
        objDB.bindGridView(gvWarehouseStatus, sbQuery.ToString(), paramList);
    }

    protected void gvWarehouseStatus_RowCancelingEdit(object sender, GridViewCancelEditEventArgs e)
    {
        gvWarehouseStatus.EditIndex = -1;
        bindWarehouse_Details();
    }

    protected void gvWarehouseStatus_RowEditing(object sender, GridViewEditEventArgs e)
    {
        gvWarehouseStatus.EditIndex = e.NewEditIndex;
        bindWarehouse_Details();
    }

    protected void gvWarehouseStatus_RowCommand(object sender, GridViewCommandEventArgs e)
    {
        try
        {
            lblError.Text = "";
            LinkButton senderBtn = (LinkButton)e.CommandSource;
            GridViewRow row = (GridViewRow)senderBtn.NamingContainer;
            GridView grid = (GridView)row.NamingContainer;
            string Job_no = ddJobNumber.SelectedValue.ToString().Trim();
            string Year_Code = ddlYear.SelectedItem.ToString().Trim();
            string Month_Code = ddlMonth.SelectedValue.ToString().Trim();
            string User = Session["USERID"].ToString().Trim();

            if (e.CommandName == "Update")
            {
                Label Wh_SrNo = (Label)row.FindControl("lblWarehouse_srno");
                TextBox Edit_WH_desc = (TextBox)row.FindControl("txtedit_Warehouse_Desc");
                TextBox Edit_Remarks = (TextBox)row.FindControl("txtedit_WHRemarks");
                if (string.IsNullOrEmpty(Edit_WH_desc.Text) == true)
                {
                    lblError.Text = "Warehouse/Material desc can not be empty";
                }
                else
                {
                    StringBuilder sbEdit_Query = new StringBuilder();
                    Dictionary<string, string> Edit_ParamList = new Dictionary<string, string>();
                    sbEdit_Query.Append(" UPDATE CM_WAREHOUSE_DETAILS SET WH_DESC = :WH_DESC,REMARKS = :REMARKS, ");
                    sbEdit_Query.Append(" UPDATED_ON = SYSDATE , UPDATED_BY=:UPDATED_BY ");
                    sbEdit_Query.Append(" WHERE JOB_NO =:JOB_NO_WHR AND MONTH_CODE = :MONTH_CODE_WHR AND YEAR_CODE =:YEAR_CODE_WHR AND WH_SR_NO=:WH_SR_NO");
                    Edit_ParamList.Add(":WH_DESC", Edit_WH_desc.Text.ToString());
                    Edit_ParamList.Add(":REMARKS", Edit_Remarks.Text.ToString());
                    Edit_ParamList.Add(":UPDATED_BY", User);
                    Edit_ParamList.Add(":JOB_NO_WHR", Job_no);
                    Edit_ParamList.Add(":MONTH_CODE_WHR", Month_Code);
                    Edit_ParamList.Add(":YEAR_CODE_WHR", Year_Code);
                    Edit_ParamList.Add(":WH_SR_NO", Wh_SrNo.Text.ToString());
                    int i = objDB.executeNonQuery(sbEdit_Query.ToString(), Edit_ParamList);
                    if (i > 0)
                    {
                        gvWarehouseStatus.EditIndex = -1;
                        lblError.Text = "Data updated Successfully!!";
                    }
                    else
                    {
                        lblError.Text = "Error";
                    }
                }
            }
            else if (e.CommandName == "Insert")
            {
                TextBox Insert_WH_desc = (TextBox)row.FindControl("txtFtr_Warehouse_Desc");
                TextBox Insert_Remarks = (TextBox)row.FindControl("txtftr_WHRemarks");
                if (string.IsNullOrEmpty(Insert_WH_desc.Text) == true)
                {
                    lblError.Text = "Warehouse/Material desc can not be empty";
                }
                else
                {
                    StringBuilder sbInsertQuery = new StringBuilder();
                    Dictionary<string, string> insertParamList = new Dictionary<string, string>();
                    sbInsertQuery.Append("INSERT INTO CM_WAREHOUSE_DETAILS (JOB_NO, MONTH_CODE, YEAR_CODE,");
                    sbInsertQuery.Append(" WH_DESC, WH_SR_NO, REMARKS, ADDED_DATE, ADDED_BY ) VALUES ");
                    sbInsertQuery.Append(" (:JOB_NO_TEXT,:MONTH_CODE_TEXT,:YEAR_CODE_TEXT,:WH_DESC, (SELECT NVL (MAX (WH_SR_NO), 0) + 1 countdata FROM CM_WAREHOUSE_DETAILS ");
                    sbInsertQuery.Append(" WHERE JOB_NO =:JOB_NO_WHR AND MONTH_CODE = :MONTH_CODE_WHR AND YEAR_CODE =:YEAR_CODE_WHR), ");
                    sbInsertQuery.Append(" :REMARKS,sysdate, :Added_by) ");
                    insertParamList.Add(":JOB_NO_TEXT", Job_no);
                    insertParamList.Add(":MONTH_CODE_TEXT", Month_Code);
                    insertParamList.Add(":YEAR_CODE_TEXT", Year_Code);
                    insertParamList.Add(":WH_DESC", Insert_WH_desc.Text.ToString().Trim());
                    insertParamList.Add(":JOB_NO_WHR", Job_no);
                    insertParamList.Add(":MONTH_CODE_WHR", Month_Code);
                    insertParamList.Add(":YEAR_CODE_WHR", Year_Code);
                    insertParamList.Add(":REMARKS", Insert_Remarks.Text.ToString());
                    insertParamList.Add(":Added_by", User);
                    int i = objDB.executeNonQuery(sbInsertQuery.ToString(), insertParamList);
                    if (i > 0)
                    {
                        gvWarehouseStatus.ShowFooter = false;
                        lblError.Text = "Data Inserted Successfully!!";
                    }
                    else
                    {
                        lblError.Text = "Error";
                    }
                }
            }
            else if (e.CommandName == "Add")
            {
                gvWarehouseStatus.ShowFooter = true;
            }
            else if (e.CommandName == "EmptyCancel")
            {
                gvWarehouseStatus.ShowFooter = false;
            }
            else if (e.CommandName == "EmptyInsert")
            {
                TextBox Empty_WH_desc = (TextBox)row.FindControl("txtEmpty_wh_desc");
                TextBox Empty_Remarks = (TextBox)row.FindControl("txtEmpty_Remarks");
                if (string.IsNullOrEmpty(Empty_WH_desc.Text) == true)
                {
                    lblError.Text = "Warehouse/Material desc can not be empty";
                }
                else
                {
                    StringBuilder sbEmpty_InsertQuery = new StringBuilder();
                    Dictionary<string, string> Empty_insertParamList = new Dictionary<string, string>();
                    sbEmpty_InsertQuery.Append("INSERT INTO CM_WAREHOUSE_DETAILS (JOB_NO, MONTH_CODE, YEAR_CODE,");
                    sbEmpty_InsertQuery.Append(" WH_DESC, WH_SR_NO, REMARKS, ADDED_DATE, ADDED_BY ) VALUES ");
                    sbEmpty_InsertQuery.Append(" (:JOB_NO_TEXT,:MONTH_CODE_TEXT,:YEAR_CODE_TEXT,:WH_DESC, (SELECT NVL (MAX (WH_SR_NO), 0) + 1 countdata FROM CM_WAREHOUSE_DETAILS ");
                    sbEmpty_InsertQuery.Append(" WHERE JOB_NO =:JOB_NO_WHR AND MONTH_CODE = :MONTH_CODE_WHR AND YEAR_CODE =:YEAR_CODE_WHR), ");
                    sbEmpty_InsertQuery.Append(" :REMARKS,sysdate, :Added_by) ");
                    Empty_insertParamList.Add(":JOB_NO_TEXT", Job_no);
                    Empty_insertParamList.Add(":MONTH_CODE_TEXT", Month_Code);
                    Empty_insertParamList.Add(":YEAR_CODE_TEXT", Year_Code);
                    Empty_insertParamList.Add(":WH_DESC", Empty_WH_desc.Text.ToString().Trim());
                    Empty_insertParamList.Add(":JOB_NO_WHR", Job_no);
                    Empty_insertParamList.Add(":MONTH_CODE_WHR", Month_Code);
                    Empty_insertParamList.Add(":YEAR_CODE_WHR", Year_Code);
                    Empty_insertParamList.Add(":REMARKS", Empty_Remarks.Text.ToString());
                    Empty_insertParamList.Add(":Added_by", User);
                    int i = objDB.executeNonQuery(sbEmpty_InsertQuery.ToString(), Empty_insertParamList);
                    if (i > 0)
                    {
                        lblError.Text = "Data Inserted Successfully!!";
                    }
                    else
                    {
                        lblError.Text = "Error";
                    }
                }
            }
            else if (e.CommandName == "Delete")
            {
                Label Wh_SrNo = (Label)row.FindControl("lblWarehouse_srno");
                StringBuilder sbDelete_Query = new StringBuilder();
                Dictionary<string, string> Delete_ParamList = new Dictionary<string, string>();
                sbDelete_Query.Append(" DELETE FROM CM_WAREHOUSE_DETAILS ");
                sbDelete_Query.Append(" WHERE JOB_NO =:JOB_NO_WHR AND MONTH_CODE = :MONTH_CODE_WHR AND YEAR_CODE =:YEAR_CODE_WHR AND WH_SR_NO=:WH_SR_NO ");
                Delete_ParamList.Add(":JOB_NO_WHR", Job_no);
                Delete_ParamList.Add(":MONTH_CODE_WHR", Month_Code);
                Delete_ParamList.Add(":YEAR_CODE_WHR", Year_Code);
                Delete_ParamList.Add(":WH_SR_NO", Wh_SrNo.Text.ToString());
                int i = objDB.executeNonQuery(sbDelete_Query.ToString(), Delete_ParamList);
                if (i > 0)
                {
                    lblError.Text = "Data Deleted Successfully!!";
                }
                else
                {
                    lblError.Text = "Error";
                }
            }
            //gvWarehouseStatus.EditIndex = -1;
            bindWarehouse_Details();
        }
        catch (Exception ex)
        {
            lblError.Text = ex.ToString();
        }
    }

    protected void gvWarehouseStatus_RowUpdating(object sender, GridViewUpdateEventArgs e)
    {
        //do nothing
    }

    protected void gvWarehouseStatus_RowDeleting(object sender, GridViewDeleteEventArgs e)
    {
        //do nothing
    }

    protected void gvWarehouseStatus_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        string user_role = Session["User_Role"].ToString();
        string Edit_Rights = Session["Edit_Rights"].ToString();
        string Visible_false = Session["Visible_false"].ToString();
        if ((((user_role == "V") || (user_role == "Z") || (user_role == "ID")) && (Edit_Rights == "")) || (Visible_false == "Y"))
        {
            if (e.Row.RowType == DataControlRowType.EmptyDataRow)
            {
                //here you can access the div control
                HtmlGenericControl htmlhideDiv = (HtmlGenericControl)e.Row.FindControl("hideDivWarehouse");
                htmlhideDiv.Style.Add("Display", "none");
            }
        }
    }

    #endregion

    #region Contract_Closure_Bind

    protected void bindContractClosre_Details()
    {
        string Job_no = ddJobNumber.SelectedValue.ToString().Trim();
        string Year_Code = ddlYear.SelectedItem.ToString().Trim();
        string Month_Code = ddlMonth.SelectedValue.ToString().Trim();
        string User = Session["USERID"].ToString().Trim();
        StringBuilder sbQuery = new StringBuilder();
        Dictionary<string, string> paramList = new Dictionary<string, string>();
        sbQuery.Append("select  ITEM_SEQ_NO, ITEM_SR_NO, ITEM_DESC, TOTAL_NO, CLOSED_NO, TO_CHAR(BALANCE_BY_DATE,'dd/Mon/yyyy') BALANCE_BY_DATE, REMARKS from CM_CONTRACT_CLOSURE");
        sbQuery.Append(" where JOB_NO =:JOB_NO_WHR AND MONTH_CODE = :MONTH_CODE_WHR AND YEAR_CODE =:YEAR_CODE_WHR ORDER BY ITEM_SR_NO");
        paramList.Add(":JOB_NO_WHR", Job_no);
        paramList.Add(":MONTH_CODE_WHR", Month_Code);
        paramList.Add(":YEAR_CODE_WHR", Year_Code);
        objDB.bindGridView(gvContractClosure, sbQuery.ToString(), paramList);
    }

    protected void gvContractClosure_RowCancelingEdit(object sender, GridViewCancelEditEventArgs e)
    {
        gvContractClosure.EditIndex = -1;
        bindContractClosre_Details();
    }

    protected void gvContractClosure_RowEditing(object sender, GridViewEditEventArgs e)
    {
        gvContractClosure.EditIndex = e.NewEditIndex;
        bindContractClosre_Details();
    }

    protected void gvContractClosure_RowCommand(object sender, GridViewCommandEventArgs e)
    {
        try
        {
            lblError.Text = "";
            LinkButton senderBtn = (LinkButton)e.CommandSource;
            GridViewRow row = (GridViewRow)senderBtn.NamingContainer;
            GridView grid = (GridView)row.NamingContainer;
            string Job_no = ddJobNumber.SelectedValue.ToString().Trim();
            string Year_Code = ddlYear.SelectedItem.ToString().Trim();
            string Month_Code = ddlMonth.SelectedValue.ToString().Trim();
            string User = Session["USERID"].ToString().Trim();

            if (e.CommandName == "Update")
            {
                Label CC_SrNo = (Label)row.FindControl("lblCCItem_srno");
                TextBox Edit_Item_desc = (TextBox)row.FindControl("txtedit_Item_Desc");
                TextBox Edit_TotalNo = (TextBox)row.FindControl("txt_edit_TotalNo");
                TextBox Edit_ClosedNo = (TextBox)row.FindControl("txt_edit_ClosedNo");
                TextBox Edit_BalanceDate = (TextBox)row.FindControl("txt_editbalance_date");
                TextBox Edit_Remarks = (TextBox)row.FindControl("txtedit_Remarks_Desc_others");
                if (string.IsNullOrEmpty(Edit_Item_desc.Text) == true)
                {
                    lblError.Text = "Item desc can not be empty";
                }
                else
                {
                    StringBuilder sbEdit_Query = new StringBuilder();
                    Dictionary<string, string> Edit_ParamList = new Dictionary<string, string>();
                    sbEdit_Query.Append(" UPDATE CM_CONTRACT_CLOSURE SET ITEM_DESC = :ITEM_DESC, ");
                    sbEdit_Query.Append(" TOTAL_NO = :TOTAL_NO , CLOSED_NO=:CLOSED_NO, ");
                    sbEdit_Query.Append(" BALANCE_BY_DATE = :BALANCE_BY_DATE ,REMARKS = :REMARKS, ");
                    sbEdit_Query.Append(" UPDATED_ON = SYSDATE , UPDATED_BY=:UPDATED_BY ");
                    sbEdit_Query.Append(" WHERE JOB_NO =:JOB_NO_WHR AND MONTH_CODE = :MONTH_CODE_WHR AND YEAR_CODE =:YEAR_CODE_WHR AND ITEM_SR_NO=:ITEM_SR_NO");
                    Edit_ParamList.Add(":ITEM_DESC", Edit_Item_desc.Text.ToString());
                    Edit_ParamList.Add(":TOTAL_NO", Edit_TotalNo.Text.ToString());
                    Edit_ParamList.Add(":CLOSED_NO", Edit_ClosedNo.Text.ToString());
                    Edit_ParamList.Add(":BALANCE_BY_DATE", Edit_BalanceDate.Text.ToString());
                    Edit_ParamList.Add(":REMARKS", Edit_Remarks.Text.ToString());
                    Edit_ParamList.Add(":UPDATED_BY", User);
                    Edit_ParamList.Add(":JOB_NO_WHR", Job_no);
                    Edit_ParamList.Add(":MONTH_CODE_WHR", Month_Code);
                    Edit_ParamList.Add(":YEAR_CODE_WHR", Year_Code);
                    Edit_ParamList.Add(":ITEM_SR_NO", CC_SrNo.Text.ToString());
                    int i = objDB.executeNonQuery(sbEdit_Query.ToString(), Edit_ParamList);
                    if (i > 0)
                    {
                        gvContractClosure.EditIndex = -1;
                        lblError.Text = "Data updated Successfully!!";
                    }
                    else
                    {
                        lblError.Text = "Error";
                    }
                }
            }
            else if (e.CommandName == "Insert")
            {
                TextBox Insert_Item_desc = (TextBox)row.FindControl("txtFooter_Item_Desc");
                TextBox Insert_TotalNo = (TextBox)row.FindControl("txt_footer_TotalNo");
                TextBox Insert_ClosedNo = (TextBox)row.FindControl("txt_footer_ClosedNo");
                TextBox Insert_BalanceDate = (TextBox)row.FindControl("txtftr_balance_date");
                TextBox Insert_Remarks = (TextBox)row.FindControl("txtftr_Remarks_Desc_others");

                if (string.IsNullOrEmpty(Insert_Item_desc.Text) == true)
                {
                    lblError.Text = "Item desc can not be empty";
                }
                else
                {
                    StringBuilder sbInsertQuery = new StringBuilder();
                    Dictionary<string, string> insertParamList = new Dictionary<string, string>();
                    sbInsertQuery.Append("INSERT INTO CM_CONTRACT_CLOSURE (JOB_NO, MONTH_CODE, YEAR_CODE,");
                    sbInsertQuery.Append(" ITEM_DESC,ITEM_SR_NO, TOTAL_NO, CLOSED_NO, BALANCE_BY_DATE, REMARKS, ADDED_DATE, ADDED_BY ) VALUES ");
                    sbInsertQuery.Append(" (:JOB_NO_TEXT,:MONTH_CODE_TEXT,:YEAR_CODE_TEXT,:ITEM_DESC, (SELECT NVL (MAX (ITEM_SR_NO), 0) + 1 countdata FROM CM_CONTRACT_CLOSURE ");
                    sbInsertQuery.Append(" WHERE JOB_NO =:JOB_NO_WHR AND MONTH_CODE = :MONTH_CODE_WHR AND YEAR_CODE =:YEAR_CODE_WHR), ");
                    sbInsertQuery.Append(" :TOTAL_NO,:CLOSED_NO,:BALANCE_BY_DATE,:REMARKS, sysdate, :Added_by) ");
                    insertParamList.Add(":JOB_NO_TEXT", Job_no);
                    insertParamList.Add(":MONTH_CODE_TEXT", Month_Code);
                    insertParamList.Add(":YEAR_CODE_TEXT", Year_Code);
                    insertParamList.Add(":ITEM_DESC", Insert_Item_desc.Text.ToString().Trim());
                    insertParamList.Add(":JOB_NO_WHR", Job_no);
                    insertParamList.Add(":MONTH_CODE_WHR", Month_Code);
                    insertParamList.Add(":YEAR_CODE_WHR", Year_Code);
                    insertParamList.Add(":TOTAL_NO", Insert_TotalNo.Text.ToString());
                    insertParamList.Add(":CLOSED_NO", Insert_ClosedNo.Text.ToString());
                    insertParamList.Add(":BALANCE_BY_DATE", Insert_BalanceDate.Text.ToString());
                    insertParamList.Add(":REMARKS", Insert_Remarks.Text.ToString());
                    insertParamList.Add(":Added_by", User);
                    int i = objDB.executeNonQuery(sbInsertQuery.ToString(), insertParamList);
                    if (i > 0)
                    {
                        gvContractClosure.ShowFooter = false;
                        lblError.Text = "Data Inserted Successfully!!";
                    }
                    else
                    {
                        lblError.Text = "Error";
                    }
                }
            }
            else if (e.CommandName == "Add")
            {
                gvContractClosure.ShowFooter = true;
            }
            else if (e.CommandName == "EmptyCancel")
            {
                gvContractClosure.ShowFooter = false;
            }
            else if (e.CommandName == "EmptyInsert")
            {
                TextBox Empty_Item_desc = (TextBox)row.FindControl("txtEmpty_Item_desc");
                TextBox Empty_TotalNo = (TextBox)row.FindControl("txtEmpty_TotalNo");
                TextBox Empty_ClosedNo = (TextBox)row.FindControl("txtEmpty_ClosedNo");
                TextBox Empty_BalanceDate = (TextBox)row.FindControl("txt_empty_BalanceDate");
                TextBox Empty_Remarks = (TextBox)row.FindControl("txtEmpty_CCRemarks");
                if (string.IsNullOrEmpty(Empty_Item_desc.Text) == true)
                {
                    lblError.Text = "Item desc can not be empty";
                }
                else
                {
                    StringBuilder sbEmpty_InsertQuery = new StringBuilder();
                    Dictionary<string, string> Empty_insertParamList = new Dictionary<string, string>();
                    sbEmpty_InsertQuery.Append("INSERT INTO CM_CONTRACT_CLOSURE (JOB_NO, MONTH_CODE, YEAR_CODE,");
                    sbEmpty_InsertQuery.Append(" ITEM_DESC,ITEM_SR_NO, TOTAL_NO, CLOSED_NO, BALANCE_BY_DATE, REMARKS, ADDED_DATE, ADDED_BY ) VALUES ");
                    sbEmpty_InsertQuery.Append(" (:JOB_NO_TEXT,:MONTH_CODE_TEXT,:YEAR_CODE_TEXT,:ITEM_DESC, (SELECT NVL (MAX (ITEM_SR_NO), 0) + 1 countdata FROM CM_CONTRACT_CLOSURE ");
                    sbEmpty_InsertQuery.Append(" WHERE JOB_NO =:JOB_NO_WHR AND MONTH_CODE = :MONTH_CODE_WHR AND YEAR_CODE =:YEAR_CODE_WHR), ");
                    sbEmpty_InsertQuery.Append(" :TOTAL_NO,:CLOSED_NO,:BALANCE_BY_DATE,:REMARKS, sysdate, :Added_by) ");
                    Empty_insertParamList.Add(":JOB_NO_TEXT", Job_no);
                    Empty_insertParamList.Add(":MONTH_CODE_TEXT", Month_Code);
                    Empty_insertParamList.Add(":YEAR_CODE_TEXT", Year_Code);
                    Empty_insertParamList.Add(":ITEM_DESC", Empty_Item_desc.Text.ToString().Trim());
                    Empty_insertParamList.Add(":JOB_NO_WHR", Job_no);
                    Empty_insertParamList.Add(":MONTH_CODE_WHR", Month_Code);
                    Empty_insertParamList.Add(":YEAR_CODE_WHR", Year_Code);
                    Empty_insertParamList.Add(":TOTAL_NO", Empty_TotalNo.Text.ToString());
                    Empty_insertParamList.Add(":CLOSED_NO", Empty_ClosedNo.Text.ToString());
                    Empty_insertParamList.Add(":BALANCE_BY_DATE", Empty_BalanceDate.Text.ToString());
                    Empty_insertParamList.Add(":REMARKS", Empty_Remarks.Text.ToString());
                    Empty_insertParamList.Add(":Added_by", User);
                    int i = objDB.executeNonQuery(sbEmpty_InsertQuery.ToString(), Empty_insertParamList);
                    if (i > 0)
                    {
                        lblError.Text = "Data Inserted Successfully!!";
                    }
                    else
                    {
                        lblError.Text = "Error";
                    }
                }
            }
            else if (e.CommandName == "Delete")
            {
                Label CC_SrNo = (Label)row.FindControl("lblCCItem_srno");
                StringBuilder sbDelete_Query = new StringBuilder();
                Dictionary<string, string> Delete_ParamList = new Dictionary<string, string>();
                sbDelete_Query.Append(" DELETE FROM CM_CONTRACT_CLOSURE ");
                sbDelete_Query.Append(" WHERE JOB_NO =:JOB_NO_WHR AND MONTH_CODE = :MONTH_CODE_WHR AND YEAR_CODE =:YEAR_CODE_WHR AND ITEM_SR_NO=:ITEM_SR_NO ");
                Delete_ParamList.Add(":JOB_NO_WHR", Job_no);
                Delete_ParamList.Add(":MONTH_CODE_WHR", Month_Code);
                Delete_ParamList.Add(":YEAR_CODE_WHR", Year_Code);
                Delete_ParamList.Add(":ITEM_SR_NO", CC_SrNo.Text.ToString());
                int i = objDB.executeNonQuery(sbDelete_Query.ToString(), Delete_ParamList);
                if (i > 0)
                {
                    lblError.Text = "Data Deleted Successfully!!";
                }
                else
                {
                    lblError.Text = "Error";
                }
            }
            //gvContractClosure.EditIndex = -1;
            bindContractClosre_Details();
        }
        catch (Exception ex)
        {
            lblError.Text = ex.ToString();
        }
    }

    protected void gvContractClosure_RowUpdating(object sender, GridViewUpdateEventArgs e)
    {
        //do nothing
    }

    protected void gvContractClosure_RowDeleting(object sender, GridViewDeleteEventArgs e)
    {
        //do nothing
    }

    protected void gvContractClosure_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        string user_role = Session["User_Role"].ToString();
        string Edit_Rights = Session["Edit_Rights"].ToString();
        string Visible_false = Session["Visible_false"].ToString();
        if ((((user_role == "V") || (user_role == "Z") || (user_role == "ID")) && (Edit_Rights == "")) || (Visible_false == "Y"))
        {
            if (e.Row.RowType == DataControlRowType.EmptyDataRow)
            {
                //here you can access the div control
                HtmlGenericControl htmlhideDiv = (HtmlGenericControl)e.Row.FindControl("hideDivContClose");
                htmlhideDiv.Style.Add("Display", "none");
            }
        }
    }

    #endregion

    #region Key_Concerns_with_Client

    protected void bindKeyConcernsClient_Details()
    {
        string Job_no = ddJobNumber.SelectedValue.ToString().Trim();
        string Year_Code = ddlYear.SelectedItem.ToString().Trim();
        string Month_Code = ddlMonth.SelectedValue.ToString().Trim();
        string User = Session["USERID"].ToString().Trim();
        StringBuilder sbQuery = new StringBuilder();
        Dictionary<string, string> paramList = new Dictionary<string, string>();
        sbQuery.Append("SELECT CONCERNS_SR_NO, CONCERNS_DESC, STATUS_FLAG, DECODE (STATUS_FLAG,'O','OPEN','C','CLOSED') STATUS_FLAG_TEXT ");
        sbQuery.Append(" FROM CM_CONCERNS_CLIENT ");
        sbQuery.Append(" where JOB_NO =:JOB_NO_WHR AND MONTH_CODE = :MONTH_CODE_WHR AND YEAR_CODE =:YEAR_CODE_WHR ORDER BY CONCERNS_SR_NO");
        paramList.Add(":JOB_NO_WHR", Job_no);
        paramList.Add(":MONTH_CODE_WHR", Month_Code);
        paramList.Add(":YEAR_CODE_WHR", Year_Code);
        objDB.bindGridView(gvKeyConcerns_Client, sbQuery.ToString(), paramList);
    }

    protected void gvKeyConcerns_Client_RowEditing(object sender, GridViewEditEventArgs e)
    {
        gvKeyConcerns_Client.EditIndex = e.NewEditIndex;
        bindKeyConcernsClient_Details();
    }

    protected void gvKeyConcerns_Client_RowCancelingEdit(object sender, GridViewCancelEditEventArgs e)
    {
        gvKeyConcerns_Client.EditIndex = -1;
        bindKeyConcernsClient_Details();
    }

    protected void gvKeyConcerns_Client_RowCommand(object sender, GridViewCommandEventArgs e)
    {
        try
        {
            lblError.Text = "";
            LinkButton senderBtn = (LinkButton)e.CommandSource;
            GridViewRow row = (GridViewRow)senderBtn.NamingContainer;
            GridView grid = (GridView)row.NamingContainer;
            string Job_no = ddJobNumber.SelectedValue.ToString().Trim();
            string Year_Code = ddlYear.SelectedItem.ToString().Trim();
            string Month_Code = ddlMonth.SelectedValue.ToString().Trim();
            string User = Session["USERID"].ToString().Trim();

            if (e.CommandName == "Update")
            {
                Label KeyConcern_SrNo = (Label)row.FindControl("lblKeyConcern_srno");
                TextBox edit_Concern_Desc = (TextBox)row.FindControl("txtedit_KeyConcern_Desc");
                DropDownList edit_Statusflag = (DropDownList)row.FindControl("ddl_edit_KeyStatusFlag");
                if (string.IsNullOrEmpty(KeyConcern_SrNo.Text) == true)
                {
                    lblError.Text = "Concern Sr no can not be empty";
                }
                else
                {
                    StringBuilder sbEdit_Query = new StringBuilder();
                    Dictionary<string, string> Edit_ParamList = new Dictionary<string, string>();
                    sbEdit_Query.Append(" UPDATE CM_CONCERNS_CLIENT SET CONCERNS_DESC = :CONCERNS_DESC, ");
                    sbEdit_Query.Append(" STATUS_FLAG = :STATUS_FLAG, ");
                    sbEdit_Query.Append(" UPDATED_ON = SYSDATE , UPDATED_BY=:UPDATED_BY ");
                    sbEdit_Query.Append(" WHERE JOB_NO =:JOB_NO_WHR AND MONTH_CODE = :MONTH_CODE_WHR AND YEAR_CODE =:YEAR_CODE_WHR AND CONCERNS_SR_NO=:CONCERNS_SR_NO");
                    Edit_ParamList.Add(":CONCERNS_DESC", edit_Concern_Desc.Text.ToString());
                    Edit_ParamList.Add(":STATUS_FLAG", edit_Statusflag.SelectedValue.ToString());
                    Edit_ParamList.Add(":UPDATED_BY", User);
                    Edit_ParamList.Add(":JOB_NO_WHR", Job_no);
                    Edit_ParamList.Add(":MONTH_CODE_WHR", Month_Code);
                    Edit_ParamList.Add(":YEAR_CODE_WHR", Year_Code);
                    Edit_ParamList.Add(":CONCERNS_SR_NO", KeyConcern_SrNo.Text.ToString());
                    int i = objDB.executeNonQuery(sbEdit_Query.ToString(), Edit_ParamList);
                    if (i > 0)
                    {
                        gvKeyConcerns_Client.EditIndex = -1;
                        lblError.Text = "Data updated Successfully!!";
                    }
                    else
                    {
                        lblError.Text = "Error";
                    }
                }
            }
            else if (e.CommandName == "Insert")
            {
                TextBox ftr_Concern_Desc = (TextBox)row.FindControl("txtFooter_KeyConcern_Desc");
                DropDownList ftr_Statusflag = (DropDownList)row.FindControl("ddl_footer_KeyStatusFlag");
                if (string.IsNullOrEmpty(ftr_Concern_Desc.Text) == true)
                {
                    lblError.Text = "Concern desc can not be empty";
                }
                else
                {
                    StringBuilder sbInsertQuery = new StringBuilder();
                    Dictionary<string, string> insertParamList = new Dictionary<string, string>();
                    sbInsertQuery.Append("INSERT INTO CM_CONCERNS_CLIENT (JOB_NO, MONTH_CODE, YEAR_CODE, CONCERNS_DESC,");
                    sbInsertQuery.Append(" CONCERNS_SR_NO, STATUS_FLAG, ADDED_DATE, ADDED_BY ) VALUES ");
                    sbInsertQuery.Append(" (:JOB_NO_TEXT,:MONTH_CODE_TEXT,:YEAR_CODE_TEXT,:CONCERNS_DESC, (SELECT NVL (MAX (CONCERNS_SR_NO), 0) + 1 countdata FROM CM_CONCERNS_CLIENT ");
                    sbInsertQuery.Append(" WHERE JOB_NO =:JOB_NO_WHR AND MONTH_CODE = :MONTH_CODE_WHR AND YEAR_CODE =:YEAR_CODE_WHR), ");
                    sbInsertQuery.Append(" :STATUS_FLAG, sysdate, :Added_by) ");
                    insertParamList.Add(":JOB_NO_TEXT", Job_no);
                    insertParamList.Add(":MONTH_CODE_TEXT", Month_Code);
                    insertParamList.Add(":YEAR_CODE_TEXT", Year_Code);
                    insertParamList.Add(":CONCERNS_DESC", ftr_Concern_Desc.Text.ToString());
                    insertParamList.Add(":JOB_NO_WHR", Job_no);
                    insertParamList.Add(":MONTH_CODE_WHR", Month_Code);
                    insertParamList.Add(":YEAR_CODE_WHR", Year_Code);
                    insertParamList.Add(":STATUS_FLAG", ftr_Statusflag.SelectedValue.ToString());
                    insertParamList.Add(":Added_by", User);
                    int i = objDB.executeNonQuery(sbInsertQuery.ToString(), insertParamList);
                    if (i > 0)
                    {
                        gvKeyConcerns_Client.ShowFooter = false;
                        lblError.Text = "Data Inserted Successfully!!";
                    }
                    else
                    {
                        lblError.Text = "Error";
                    }
                }
            }
            else if (e.CommandName == "Add")
            {
                gvKeyConcerns_Client.ShowFooter = true;
            }
            else if (e.CommandName == "EmptyCancel")
            {
                gvKeyConcerns_Client.ShowFooter = false;
            }
            else if (e.CommandName == "EmptyInsert")
            {
                TextBox Empty_Concern_Desc = (TextBox)row.FindControl("txtEmpty_Item_desc");
                DropDownList Empty_Statusflag = (DropDownList)row.FindControl("ddl_empty_KeyStatusFlag");
                if (string.IsNullOrEmpty(Empty_Concern_Desc.Text) == true)
                {
                    lblError.Text = "Concern desc can not be empty";
                }
                else
                {
                    StringBuilder sbEmpty_InsertQuery = new StringBuilder();
                    Dictionary<string, string> Empty_insertParamList = new Dictionary<string, string>();
                    sbEmpty_InsertQuery.Append("INSERT INTO CM_CONCERNS_CLIENT (JOB_NO, MONTH_CODE, YEAR_CODE, CONCERNS_DESC,");
                    sbEmpty_InsertQuery.Append(" CONCERNS_SR_NO, STATUS_FLAG, ADDED_DATE, ADDED_BY ) VALUES ");
                    sbEmpty_InsertQuery.Append(" (:JOB_NO_TEXT,:MONTH_CODE_TEXT,:YEAR_CODE_TEXT,:CONCERNS_DESC, (SELECT NVL (MAX (CONCERNS_SR_NO), 0) + 1 countdata FROM CM_CONCERNS_CLIENT ");
                    sbEmpty_InsertQuery.Append(" WHERE JOB_NO =:JOB_NO_WHR AND MONTH_CODE = :MONTH_CODE_WHR AND YEAR_CODE =:YEAR_CODE_WHR), ");
                    sbEmpty_InsertQuery.Append(" :STATUS_FLAG, sysdate, :Added_by) ");
                    Empty_insertParamList.Add(":JOB_NO_TEXT", Job_no);
                    Empty_insertParamList.Add(":MONTH_CODE_TEXT", Month_Code);
                    Empty_insertParamList.Add(":YEAR_CODE_TEXT", Year_Code);
                    Empty_insertParamList.Add(":CONCERNS_DESC", Empty_Concern_Desc.Text.ToString().Trim());
                    Empty_insertParamList.Add(":JOB_NO_WHR", Job_no);
                    Empty_insertParamList.Add(":MONTH_CODE_WHR", Month_Code);
                    Empty_insertParamList.Add(":YEAR_CODE_WHR", Year_Code);
                    Empty_insertParamList.Add(":STATUS_FLAG", Empty_Statusflag.SelectedValue.ToString());
                    Empty_insertParamList.Add(":Added_by", User);
                    int i = objDB.executeNonQuery(sbEmpty_InsertQuery.ToString(), Empty_insertParamList);
                    if (i > 0)
                    {
                        lblError.Text = "Data Inserted Successfully!!";
                    }
                    else
                    {
                        lblError.Text = "Error";
                    }
                }
            }
            else if (e.CommandName == "Delete")
            {
                Label Concern_SrNo = (Label)row.FindControl("lblKeyConcern_srno");
                StringBuilder sbDelete_Query = new StringBuilder();
                Dictionary<string, string> Delete_ParamList = new Dictionary<string, string>();
                sbDelete_Query.Append(" DELETE FROM CM_CONCERNS_CLIENT ");
                sbDelete_Query.Append(" WHERE JOB_NO =:JOB_NO_WHR AND MONTH_CODE = :MONTH_CODE_WHR AND YEAR_CODE =:YEAR_CODE_WHR AND CONCERNS_SR_NO=:CONCERNS_SR_NO ");
                Delete_ParamList.Add(":JOB_NO_WHR", Job_no);
                Delete_ParamList.Add(":MONTH_CODE_WHR", Month_Code);
                Delete_ParamList.Add(":YEAR_CODE_WHR", Year_Code);
                Delete_ParamList.Add(":CONCERNS_SR_NO", Concern_SrNo.Text.ToString());
                int i = objDB.executeNonQuery(sbDelete_Query.ToString(), Delete_ParamList);
                if (i > 0)
                {
                    lblError.Text = "Data Deleted Successfully!!";
                }
                else
                {
                    lblError.Text = "Error";
                }
            }
            //gvKeyConcerns_Client.EditIndex = -1;
            bindKeyConcernsClient_Details();
        }
        catch (Exception ex)
        {
            lblError.Text = ex.ToString();
        }
    }

    protected void gvKeyConcerns_Client_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        if (e.Row.RowType == DataControlRowType.DataRow)
        {
            if ((e.Row.RowState & DataControlRowState.Edit) > 0)
            {
                string str_StatusFlag = "";
                DropDownList ddlEdit_StatusFlag = ((DropDownList)e.Row.FindControl("ddl_edit_KeyStatusFlag"));
                Label lblStatusFlag = ((Label)e.Row.FindControl("lblStatusFlag"));
                str_StatusFlag = lblStatusFlag.Text.ToString().Trim();
                if (str_StatusFlag != string.Empty)
                {
                    ddlEdit_StatusFlag.SelectedValue = str_StatusFlag;
                }
            }
        }
        else if (e.Row.RowType == DataControlRowType.EmptyDataRow)
        {
            string user_role = Session["User_Role"].ToString();
            string Edit_Rights = Session["Edit_Rights"].ToString();
            string Visible_false = Session["Visible_false"].ToString();
            if ((((user_role == "V") || (user_role == "Z") || (user_role == "ID")) && (Edit_Rights == "")) || (Visible_false == "Y"))
            {
                //here you can access the div control
                HtmlGenericControl htmlhideDiv = (HtmlGenericControl)e.Row.FindControl("hideDivConcerns_Client");
                htmlhideDiv.Style.Add("Display", "none");
            }
        }
    }

    protected void gvKeyConcerns_Client_RowUpdating(object sender, GridViewUpdateEventArgs e)
    {
        //do nothing
    }

    protected void gvKeyConcerns_Client_RowDeleting(object sender, GridViewDeleteEventArgs e)
    {
        //do nothing
    }


    #endregion

    #region Key_Obligations_with_Client

    protected void bindKeyObligationsClient_Details()
    {
        string Job_no = ddJobNumber.SelectedValue.ToString().Trim();
        string Year_Code = ddlYear.SelectedItem.ToString().Trim();
        string Month_Code = ddlMonth.SelectedValue.ToString().Trim();
        string User = Session["USERID"].ToString().Trim();
        StringBuilder sbQuery = new StringBuilder();
        Dictionary<string, string> paramList = new Dictionary<string, string>();
        sbQuery.Append("SELECT OBLIGATIONS_SR_NO, OBLIGATIONS_DESC, STATUS_FLAG, DECODE (STATUS_FLAG,'O','OPEN','C','CLOSED') STATUS_FLAG_TEXT ");
        sbQuery.Append(" FROM CM_OBLIGATIONS_CLIENT ");
        sbQuery.Append(" where JOB_NO =:JOB_NO_WHR AND MONTH_CODE = :MONTH_CODE_WHR AND YEAR_CODE =:YEAR_CODE_WHR ORDER BY OBLIGATIONS_SR_NO");
        paramList.Add(":JOB_NO_WHR", Job_no);
        paramList.Add(":MONTH_CODE_WHR", Month_Code);
        paramList.Add(":YEAR_CODE_WHR", Year_Code);
        objDB.bindGridView(gvKeyObligations_Client, sbQuery.ToString(), paramList);
    }

    protected void gvKeyObligations_Client_RowEditing(object sender, GridViewEditEventArgs e)
    {
        gvKeyObligations_Client.EditIndex = e.NewEditIndex;
        bindKeyObligationsClient_Details();
    }

    protected void gvKeyObligations_Client_RowCancelingEdit(object sender, GridViewCancelEditEventArgs e)
    {
        gvKeyObligations_Client.EditIndex = -1;
        bindKeyObligationsClient_Details();
    }

    protected void gvKeyObligations_Client_RowCommand(object sender, GridViewCommandEventArgs e)
    {
        try
        {
            lblError.Text = "";
            LinkButton senderBtn = (LinkButton)e.CommandSource;
            GridViewRow row = (GridViewRow)senderBtn.NamingContainer;
            GridView grid = (GridView)row.NamingContainer;
            string Job_no = ddJobNumber.SelectedValue.ToString().Trim();
            string Year_Code = ddlYear.SelectedItem.ToString().Trim();
            string Month_Code = ddlMonth.SelectedValue.ToString().Trim();
            string User = Session["USERID"].ToString().Trim();

            if (e.CommandName == "Update")
            {
                Label Oblign_SrNo = (Label)row.FindControl("lblOblig_srno");
                TextBox edit_Oblign_Desc = (TextBox)row.FindControl("txtedit_Oblig_Desc");
                DropDownList edit_Statusflag = (DropDownList)row.FindControl("ddl_edit_ObligFlag");
                if (string.IsNullOrEmpty(Oblign_SrNo.Text) == true)
                {
                    lblError.Text = "Obligation Sr no can not be empty";
                }
                else
                {
                    StringBuilder sbEdit_Query = new StringBuilder();
                    Dictionary<string, string> Edit_ParamList = new Dictionary<string, string>();
                    sbEdit_Query.Append(" UPDATE CM_OBLIGATIONS_CLIENT SET OBLIGATIONS_DESC = :OBLIGATIONS_DESC, ");
                    sbEdit_Query.Append(" STATUS_FLAG = :STATUS_FLAG, ");
                    sbEdit_Query.Append(" UPDATED_ON = SYSDATE , UPDATED_BY=:UPDATED_BY ");
                    sbEdit_Query.Append(" WHERE JOB_NO =:JOB_NO_WHR AND MONTH_CODE = :MONTH_CODE_WHR AND YEAR_CODE =:YEAR_CODE_WHR AND OBLIGATIONS_SR_NO=:OBLIGATIONS_SR_NO");
                    Edit_ParamList.Add(":OBLIGATIONS_DESC", edit_Oblign_Desc.Text.ToString());
                    Edit_ParamList.Add(":STATUS_FLAG", edit_Statusflag.SelectedValue.ToString());
                    Edit_ParamList.Add(":UPDATED_BY", User);
                    Edit_ParamList.Add(":JOB_NO_WHR", Job_no);
                    Edit_ParamList.Add(":MONTH_CODE_WHR", Month_Code);
                    Edit_ParamList.Add(":YEAR_CODE_WHR", Year_Code);
                    Edit_ParamList.Add(":OBLIGATIONS_SR_NO", Oblign_SrNo.Text.ToString());
                    int i = objDB.executeNonQuery(sbEdit_Query.ToString(), Edit_ParamList);
                    if (i > 0)
                    {
                        gvKeyObligations_Client.EditIndex = -1;
                        lblError.Text = "Data updated Successfully!!";
                    }
                    else
                    {
                        lblError.Text = "Error";
                    }
                }
            }
            else if (e.CommandName == "Insert")
            {
                TextBox ftr_Oblign_Desc = (TextBox)row.FindControl("txtFooter_Oblig_Desc");
                DropDownList ftr_Statusflag = (DropDownList)row.FindControl("ddl_footer_ObligFlag");
                if (string.IsNullOrEmpty(ftr_Oblign_Desc.Text) == true)
                {
                    lblError.Text = "Obligation desc can not be empty";
                }
                else
                {
                    StringBuilder sbInsertQuery = new StringBuilder();
                    Dictionary<string, string> insertParamList = new Dictionary<string, string>();
                    sbInsertQuery.Append("INSERT INTO CM_OBLIGATIONS_CLIENT (JOB_NO, MONTH_CODE, YEAR_CODE, OBLIGATIONS_DESC,");
                    sbInsertQuery.Append(" OBLIGATIONS_SR_NO, STATUS_FLAG, ADDED_DATE, ADDED_BY ) VALUES ");
                    sbInsertQuery.Append(" (:JOB_NO_TEXT,:MONTH_CODE_TEXT,:YEAR_CODE_TEXT,:CONCERNS_DESC, (SELECT NVL (MAX (OBLIGATIONS_SR_NO), 0) + 1 countdata FROM CM_OBLIGATIONS_CLIENT ");
                    sbInsertQuery.Append(" WHERE JOB_NO =:JOB_NO_WHR AND MONTH_CODE = :MONTH_CODE_WHR AND YEAR_CODE =:YEAR_CODE_WHR), ");
                    sbInsertQuery.Append(" :STATUS_FLAG, sysdate, :Added_by) ");
                    insertParamList.Add(":JOB_NO_TEXT", Job_no);
                    insertParamList.Add(":MONTH_CODE_TEXT", Month_Code);
                    insertParamList.Add(":YEAR_CODE_TEXT", Year_Code);
                    insertParamList.Add(":OBLIGATIONS_DESC", ftr_Oblign_Desc.Text.ToString());
                    insertParamList.Add(":JOB_NO_WHR", Job_no);
                    insertParamList.Add(":MONTH_CODE_WHR", Month_Code);
                    insertParamList.Add(":YEAR_CODE_WHR", Year_Code);
                    insertParamList.Add(":STATUS_FLAG", ftr_Statusflag.SelectedValue.ToString());
                    insertParamList.Add(":Added_by", User);
                    int i = objDB.executeNonQuery(sbInsertQuery.ToString(), insertParamList);
                    if (i > 0)
                    {
                        gvKeyObligations_Client.ShowFooter = false;
                        lblError.Text = "Data Inserted Successfully!!";
                    }
                    else
                    {
                        lblError.Text = "Error";
                    }
                }
            }
            else if (e.CommandName == "Add")
            {
                gvKeyObligations_Client.ShowFooter = true;
            }
            else if (e.CommandName == "EmptyCancel")
            {
                gvKeyObligations_Client.ShowFooter = false;
            }
            else if (e.CommandName == "EmptyInsert")
            {
                TextBox Empty_Oblign_Desc = (TextBox)row.FindControl("txtEmpty_Oblig_desc");
                DropDownList Empty_Statusflag = (DropDownList)row.FindControl("ddl_empty_ObligStatusFlag");
                if (string.IsNullOrEmpty(Empty_Oblign_Desc.Text) == true)
                {
                    lblError.Text = "Concern desc can not be empty";
                }
                else
                {
                    StringBuilder sbEmpty_InsertQuery = new StringBuilder();
                    Dictionary<string, string> Empty_insertParamList = new Dictionary<string, string>();
                    sbEmpty_InsertQuery.Append("INSERT INTO CM_OBLIGATIONS_CLIENT (JOB_NO, MONTH_CODE, YEAR_CODE, OBLIGATIONS_DESC,");
                    sbEmpty_InsertQuery.Append(" OBLIGATIONS_SR_NO, STATUS_FLAG, ADDED_DATE, ADDED_BY ) VALUES ");
                    sbEmpty_InsertQuery.Append(" (:JOB_NO_TEXT,:MONTH_CODE_TEXT,:YEAR_CODE_TEXT,:OBLIGATIONS_DESC, (SELECT NVL (MAX (OBLIGATIONS_SR_NO), 0) + 1 countdata FROM CM_OBLIGATIONS_CLIENT ");
                    sbEmpty_InsertQuery.Append(" WHERE JOB_NO =:JOB_NO_WHR AND MONTH_CODE = :MONTH_CODE_WHR AND YEAR_CODE =:YEAR_CODE_WHR), ");
                    sbEmpty_InsertQuery.Append(" :STATUS_FLAG, sysdate, :Added_by) ");
                    Empty_insertParamList.Add(":JOB_NO_TEXT", Job_no);
                    Empty_insertParamList.Add(":MONTH_CODE_TEXT", Month_Code);
                    Empty_insertParamList.Add(":YEAR_CODE_TEXT", Year_Code);
                    Empty_insertParamList.Add(":OBLIGATIONS_DESC", Empty_Oblign_Desc.Text.ToString().Trim());
                    Empty_insertParamList.Add(":JOB_NO_WHR", Job_no);
                    Empty_insertParamList.Add(":MONTH_CODE_WHR", Month_Code);
                    Empty_insertParamList.Add(":YEAR_CODE_WHR", Year_Code);
                    Empty_insertParamList.Add(":STATUS_FLAG", Empty_Statusflag.SelectedValue.ToString());
                    Empty_insertParamList.Add(":Added_by", User);
                    int i = objDB.executeNonQuery(sbEmpty_InsertQuery.ToString(), Empty_insertParamList);
                    if (i > 0)
                    {
                        lblError.Text = "Data Inserted Successfully!!";
                    }
                    else
                    {
                        lblError.Text = "Error";
                    }
                }
            }
            else if (e.CommandName == "Delete")
            {
                Label Oblign_SrNo = (Label)row.FindControl("lblOblig_srno");
                StringBuilder sbDelete_Query = new StringBuilder();
                Dictionary<string, string> Delete_ParamList = new Dictionary<string, string>();
                sbDelete_Query.Append(" DELETE FROM CM_OBLIGATIONS_CLIENT ");
                sbDelete_Query.Append(" WHERE JOB_NO =:JOB_NO_WHR AND MONTH_CODE = :MONTH_CODE_WHR AND YEAR_CODE =:YEAR_CODE_WHR AND OBLIGATIONS_SR_NO=:OBLIGATIONS_SR_NO ");
                Delete_ParamList.Add(":JOB_NO_WHR", Job_no);
                Delete_ParamList.Add(":MONTH_CODE_WHR", Month_Code);
                Delete_ParamList.Add(":YEAR_CODE_WHR", Year_Code);
                Delete_ParamList.Add(":OBLIGATIONS_SR_NO", Oblign_SrNo.Text.ToString());
                int i = objDB.executeNonQuery(sbDelete_Query.ToString(), Delete_ParamList);
                if (i > 0)
                {
                    lblError.Text = "Data Deleted Successfully!!";
                }
                else
                {
                    lblError.Text = "Error";
                }
            }
            //gvKeyObligations_Client.EditIndex = -1;
            bindKeyObligationsClient_Details();
        }
        catch (Exception ex)
        {
            lblError.Text = ex.ToString();
        }
    }

    protected void gvKeyObligations_Client_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        if (e.Row.RowType == DataControlRowType.DataRow)
        {
            if ((e.Row.RowState & DataControlRowState.Edit) > 0)
            {
                string str_StatusObligFlag = "";
                DropDownList ddlEdit_StatusFlag = ((DropDownList)e.Row.FindControl("ddl_edit_ObligFlag"));
                Label lblObligStatusFlag = ((Label)e.Row.FindControl("lblObligStatusFlag"));
                str_StatusObligFlag = lblObligStatusFlag.Text.ToString().Trim();
                if (str_StatusObligFlag != string.Empty)
                {
                    ddlEdit_StatusFlag.SelectedValue = str_StatusObligFlag;
                }
            }
        }
        else if (e.Row.RowType == DataControlRowType.EmptyDataRow)
        {
            string user_role = Session["User_Role"].ToString();
            string Edit_Rights = Session["Edit_Rights"].ToString();
            string Visible_false = Session["Visible_false"].ToString();
            if ((((user_role == "V") || (user_role == "Z") || (user_role == "ID")) && (Edit_Rights == "")) || (Visible_false == "Y"))
            {
                //here you can access the div control
                HtmlGenericControl htmlhideDiv = (HtmlGenericControl)e.Row.FindControl("hideDivOblign_Client");
                htmlhideDiv.Style.Add("Display", "none");
            }
        }
    }

    protected void gvKeyObligations_Client_RowUpdating(object sender, GridViewUpdateEventArgs e)
    {
        //do nothing
    }

    protected void gvKeyObligations_Client_RowDeleting(object sender, GridViewDeleteEventArgs e)
    {
        //do nothing
    }

    #endregion

    #region Key_Concerns_in_Construction_Phase

    //Bind Grid Key Concerns Engg Phase
    protected void bindKeyConcerns_Details(string Concern_Code, GridView gvConcern_Common)
    {
        string Job_no = ddJobNumber.SelectedValue.ToString().Trim();
        string Year_Code = ddlYear.SelectedItem.ToString().Trim();
        string Month_Code = ddlMonth.SelectedValue.ToString().Trim();
        string User = Session["USERID"].ToString().Trim();
        StringBuilder sbQuery = new StringBuilder();
        Dictionary<string, string> paramList = new Dictionary<string, string>();
        sbQuery.Append("SELECT CONCERNS_SR_NO,CONCERNS_SEQ_NO, CONCERNS_DESC, decode (STATUS_FLAG,'O','Open','C','Closed') STATUS_FLAG_TEXT, STATUS_FLAG, ");
        sbQuery.Append(" TO_CHAR(CRITICAL_MILESTONE_DATE,'dd/Mon/yyyy') CRITICAL_MILESTONE_DATE, TO_CHAR(ACTUAL_DATE,'dd/Mon/yyyy') ACTUAL_DATE, REMARKS ");
        sbQuery.Append(" FROM CM_CONCERNS_ENGG where JOB_NO =:JOB_NO_WHR AND MONTH_CODE = :MONTH_CODE_WHR AND YEAR_CODE =:YEAR_CODE_WHR and CONCERNS_CODE=:CONCERNS_CODE_WHR ORDER BY CONCERNS_SR_NO");
        paramList.Add(":JOB_NO_WHR", Job_no);
        paramList.Add(":MONTH_CODE_WHR", Month_Code);
        paramList.Add(":YEAR_CODE_WHR", Year_Code);
        paramList.Add(":CONCERNS_CODE_WHR", Concern_Code);
        objDB.bindGridView(gvConcern_Common, sbQuery.ToString(), paramList);
    }

    protected void gvKeyConcerns_RowEditing(object sender, GridViewEditEventArgs e)
    {
        gvKeyConcerns.EditIndex = e.NewEditIndex;
        bindKeyConcerns_Details(Constants.CONCERN_ENGG, gvKeyConcerns);
    }

    protected void gvKeyConcerns_RowCancelingEdit(object sender, GridViewCancelEditEventArgs e)
    {
        gvKeyConcerns.EditIndex = -1;
        bindKeyConcerns_Details(Constants.CONCERN_ENGG, gvKeyConcerns);
    }

    protected void gvKeyConcerns_RowCommand(object sender, GridViewCommandEventArgs e)
    {
        gvKeyConcerns_Common_Query(e, Constants.CONCERN_ENGG, gvKeyConcerns);
    }

    protected void gvKeyConcerns_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        gvKeyConcerns_Common_RowData(e, Constants.CONCERN_ENGG, gvKeyConcerns);
    }

    protected void gvKeyConcerns_RowUpdating(object sender, GridViewUpdateEventArgs e)
    {
        //do nothing
    }

    protected void gvKeyConcerns_RowDeleting(object sender, GridViewDeleteEventArgs e)
    {
        //do nothing
    }

    protected void gvKeyConcerns_Common_Query(GridViewCommandEventArgs e, string Concern_code, GridView gvKeyConcerns_Common)
    {
        try
        {
            lblError.Text = "";
            LinkButton senderBtn = (LinkButton)e.CommandSource;
            GridViewRow row = (GridViewRow)senderBtn.NamingContainer;
            GridView grid = (GridView)row.NamingContainer;
            string Job_no = ddJobNumber.SelectedValue.ToString().Trim();
            string Year_Code = ddlYear.SelectedItem.ToString().Trim();
            string Month_Code = ddlMonth.SelectedValue.ToString().Trim();
            string User = Session["USERID"].ToString().Trim();

            if (e.CommandName == "Update")
            {
                string str_Concern_SrNo = null;
                string str_Edit_EnggConcern_Desc = null;
                string str_Edit_Statusflag = null;
                string str_Edit_Milestone_Date = null;
                string str_Edit_Actual_Date = null;
                string str_Edit_Remarks_Desc = null;
                if (Concern_code == Constants.CONCERN_ENGG)
                {
                    str_Concern_SrNo = "lblConcern_srno";
                    str_Edit_EnggConcern_Desc = "txtedit_Concern_Desc";
                    str_Edit_Statusflag = "txt_edit_StatusFlag";
                    str_Edit_Milestone_Date = "txt_editmilestone_date";
                    str_Edit_Actual_Date = "txt_editactual_date";
                    str_Edit_Remarks_Desc = "txtedit_Trend_Desc_others";
                }
                else if (Concern_code == Constants.CONCERN_CONSTR)
                {
                    str_Concern_SrNo = "lblConcern_srno1";
                    str_Edit_EnggConcern_Desc = "txtedit_Concern_Desc1";
                    str_Edit_Statusflag = "txt_edit_StatusFlag1";
                    str_Edit_Milestone_Date = "txt_editmilestone_date1";
                    str_Edit_Actual_Date = "txt_editactual_date1";
                    str_Edit_Remarks_Desc = "txtedit_Trend_Desc_others1";
                }
                else if (Concern_code == Constants.CONCERN_VENDOR)
                {
                    str_Concern_SrNo = "lblConcern_srno2";
                    str_Edit_EnggConcern_Desc = "txtedit_Concern_Desc2";
                    str_Edit_Statusflag = "txt_edit_StatusFlag2";
                    str_Edit_Milestone_Date = "txt_editmilestone_date2";
                    str_Edit_Actual_Date = "txt_editactual_date2";
                    str_Edit_Remarks_Desc = "txtedit_Trend_Desc_others2";
                }
                else if (Concern_code == Constants.CONCERN_CONTRACTOR)
                {
                    str_Concern_SrNo = "lblConcern_srno3";
                    str_Edit_EnggConcern_Desc = "txtedit_Concern_Desc3";
                    str_Edit_Statusflag = "txt_edit_StatusFlag3";
                    str_Edit_Milestone_Date = "txt_editmilestone_date3";
                    str_Edit_Actual_Date = "txt_editactual_date3";
                    str_Edit_Remarks_Desc = "txtedit_Trend_Desc_others3";
                }
                else if (Concern_code == Constants.CONCERN_LICENSOR)
                {
                    str_Concern_SrNo = "lblConcern_srno4";
                    str_Edit_EnggConcern_Desc = "txtedit_Concern_Desc4";
                    str_Edit_Statusflag = "txt_edit_StatusFlag4";
                    str_Edit_Milestone_Date = "txt_editmilestone_date4";
                    str_Edit_Actual_Date = "txt_editactual_date4";
                    str_Edit_Remarks_Desc = "txtedit_Trend_Desc_others4";
                }
                Label Concern_SrNo = (Label)row.FindControl(str_Concern_SrNo);
                TextBox Edit_EnggConcern_Desc = (TextBox)row.FindControl(str_Edit_EnggConcern_Desc);
                DropDownList Edit_Statusflag = (DropDownList)row.FindControl(str_Edit_Statusflag);
                TextBox Edit_Milestone_Date = (TextBox)row.FindControl(str_Edit_Milestone_Date);
                TextBox Edit_Actual_Date = (TextBox)row.FindControl(str_Edit_Actual_Date);
                TextBox Edit_Remarks_Desc = (TextBox)row.FindControl(str_Edit_Remarks_Desc);
                if (string.IsNullOrEmpty(Concern_SrNo.Text) == true)
                {
                    lblError.Text = "Item Sr no can not be empty";
                }
                else
                {
                    StringBuilder sbEdit_Query = new StringBuilder();
                    Dictionary<string, string> Edit_ParamList = new Dictionary<string, string>();
                    sbEdit_Query.Append(" UPDATE CM_CONCERNS_ENGG SET CONCERNS_DESC = :CONCERNS_DESC, ");
                    sbEdit_Query.Append(" STATUS_FLAG = :STATUS_FLAG,CRITICAL_MILESTONE_DATE = :CRITICAL_MILESTONE_DATE,ACTUAL_DATE = :ACTUAL_DATE, ");
                    sbEdit_Query.Append(" REMARKS = :REMARKS, UPDATED_ON = SYSDATE , UPDATED_BY=:UPDATED_BY ");
                    sbEdit_Query.Append(" WHERE JOB_NO =:JOB_NO_WHR AND MONTH_CODE = :MONTH_CODE_WHR AND YEAR_CODE =:YEAR_CODE_WHR AND CONCERNS_SR_NO=:CONCERNS_SR_NO AND CONCERNS_CODE=:CONCERNS_CODE_WHR");
                    Edit_ParamList.Add(":CONCERNS_DESC", Edit_EnggConcern_Desc.Text.ToString());
                    Edit_ParamList.Add(":STATUS_FLAG", Edit_Statusflag.SelectedValue.ToString());
                    Edit_ParamList.Add(":CRITICAL_MILESTONE_DATE", Edit_Milestone_Date.Text.ToString());
                    Edit_ParamList.Add(":ACTUAL_DATE", Edit_Actual_Date.Text.ToString());
                    Edit_ParamList.Add(":REMARKS", Edit_Remarks_Desc.Text.ToString());
                    Edit_ParamList.Add(":UPDATED_BY", User);
                    Edit_ParamList.Add(":JOB_NO_WHR", Job_no);
                    Edit_ParamList.Add(":MONTH_CODE_WHR", Month_Code);
                    Edit_ParamList.Add(":YEAR_CODE_WHR", Year_Code);
                    Edit_ParamList.Add(":CONCERNS_SR_NO", Concern_SrNo.Text.ToString());
                    Edit_ParamList.Add(":CONCERNS_CODE_WHR", Concern_code);
                    int i = objDB.executeNonQuery(sbEdit_Query.ToString(), Edit_ParamList);
                    if (i > 0)
                    {
                        gvKeyConcerns_Common.EditIndex = -1;
                        lblError.Text = "Data updated Successfully!!";
                    }
                    else
                    {
                        lblError.Text = "Error";
                    }
                }
            }
            else if (e.CommandName == "Insert")
            {
                string str_Insert_EnggConcern_Desc = null;
                string str_Insert_Statusflag = null;
                string str_Insert_Milestone_Date = null;
                string str_Insert_Actual_Date = null;
                string str_Insert_Remarks_Desc = null;
                if (Concern_code == Constants.CONCERN_ENGG)
                {
                    str_Insert_EnggConcern_Desc = "txtFooter_Concern_Desc";
                    str_Insert_Statusflag = "txt_footer_StatusFlag";
                    str_Insert_Milestone_Date = "txtftr_milestone_date";
                    str_Insert_Actual_Date = "txtftr_actual_date";
                    str_Insert_Remarks_Desc = "txtftr_Trend_Desc_others";
                }
                else if (Concern_code == Constants.CONCERN_CONSTR)
                {
                    str_Insert_EnggConcern_Desc = "txtFooter_Concern_Desc1";
                    str_Insert_Statusflag = "txt_footer_StatusFlag1";
                    str_Insert_Milestone_Date = "txtftr_milestone_date1";
                    str_Insert_Actual_Date = "txtftr_actual_date1";
                    str_Insert_Remarks_Desc = "txtftr_Trend_Desc_others1";
                }
                else if (Concern_code == Constants.CONCERN_VENDOR)
                {
                    str_Insert_EnggConcern_Desc = "txtFooter_Concern_Desc2";
                    str_Insert_Statusflag = "txt_footer_StatusFlag2";
                    str_Insert_Milestone_Date = "txtftr_milestone_date2";
                    str_Insert_Actual_Date = "txtftr_actual_date2";
                    str_Insert_Remarks_Desc = "txtftr_Trend_Desc_others2";
                }
                else if (Concern_code == Constants.CONCERN_CONTRACTOR)
                {
                    str_Insert_EnggConcern_Desc = "txtFooter_Concern_Desc3";
                    str_Insert_Statusflag = "txt_footer_StatusFlag3";
                    str_Insert_Milestone_Date = "txtftr_milestone_date3";
                    str_Insert_Actual_Date = "txtftr_actual_date3";
                    str_Insert_Remarks_Desc = "txtftr_Trend_Desc_others3";
                }
                else if (Concern_code == Constants.CONCERN_LICENSOR)
                {
                    str_Insert_EnggConcern_Desc = "txtFooter_Concern_Desc4";
                    str_Insert_Statusflag = "txt_footer_StatusFlag4";
                    str_Insert_Milestone_Date = "txtftr_milestone_date4";
                    str_Insert_Actual_Date = "txtftr_actual_date4";
                    str_Insert_Remarks_Desc = "txtftr_Trend_Desc_others4";
                }

                TextBox Insert_EnggConcern_Desc = (TextBox)row.FindControl(str_Insert_EnggConcern_Desc);
                DropDownList Insert_Statusflag = (DropDownList)row.FindControl(str_Insert_Statusflag);
                TextBox Insert_Milestone_Date = (TextBox)row.FindControl(str_Insert_Milestone_Date);
                TextBox Insert_Actual_Date = (TextBox)row.FindControl(str_Insert_Actual_Date);
                TextBox Insert_Remarks_Desc = (TextBox)row.FindControl(str_Insert_Remarks_Desc);
                if (string.IsNullOrEmpty(Insert_EnggConcern_Desc.Text) == true)
                {
                    lblError.Text = "Item desc can not be empty";
                }
                else
                {
                    StringBuilder sbInsertQuery = new StringBuilder();
                    Dictionary<string, string> insertParamList = new Dictionary<string, string>();
                    sbInsertQuery.Append("INSERT INTO CM_CONCERNS_ENGG (JOB_NO, MONTH_CODE, YEAR_CODE,CONCERNS_CODE, CONCERNS_DESC,");
                    sbInsertQuery.Append(" CONCERNS_SR_NO, STATUS_FLAG,CRITICAL_MILESTONE_DATE,ACTUAL_DATE,REMARKS, ADDED_DATE, ADDED_BY ) VALUES ");
                    sbInsertQuery.Append(" (:JOB_NO_TEXT,:MONTH_CODE_TEXT,:YEAR_CODE_TEXT,:CONCERNS_CODE,:CONCERNS_DESC, (SELECT NVL (MAX (CONCERNS_SR_NO), 0) + 1 countdata FROM CM_CONCERNS_ENGG ");
                    sbInsertQuery.Append(" WHERE JOB_NO =:JOB_NO_WHR AND MONTH_CODE = :MONTH_CODE_WHR AND YEAR_CODE =:YEAR_CODE_WHR and CONCERNS_CODE=:CONCERNS_CODE_WHR), ");
                    sbInsertQuery.Append(" :STATUS_FLAG,:CRITICAL_MILESTONE_DATE,:ACTUAL_DATE,:REMARKS, sysdate, :Added_by) ");
                    insertParamList.Add(":JOB_NO_TEXT", Job_no);
                    insertParamList.Add(":MONTH_CODE_TEXT", Month_Code);
                    insertParamList.Add(":YEAR_CODE_TEXT", Year_Code);
                    insertParamList.Add(":CONCERNS_CODE", Concern_code);
                    insertParamList.Add(":CONCERNS_DESC", Insert_EnggConcern_Desc.Text.ToString().Trim());
                    insertParamList.Add(":JOB_NO_WHR", Job_no);
                    insertParamList.Add(":MONTH_CODE_WHR", Month_Code);
                    insertParamList.Add(":YEAR_CODE_WHR", Year_Code);
                    insertParamList.Add(":CONCERNS_CODE_WHR", Concern_code);
                    insertParamList.Add(":STATUS_FLAG", Insert_Statusflag.SelectedValue.ToString());
                    insertParamList.Add(":CRITICAL_MILESTONE_DATE", Insert_Milestone_Date.Text.ToString().Trim());
                    insertParamList.Add(":ACTUAL_DATE", Insert_Actual_Date.Text.ToString().Trim());
                    insertParamList.Add(":REMARKS", Insert_Remarks_Desc.Text.ToString().Trim());
                    insertParamList.Add(":Added_by", User);
                    int i = objDB.executeNonQuery(sbInsertQuery.ToString(), insertParamList);
                    if (i > 0)
                    {
                        gvKeyConcerns_Common.ShowFooter = false;
                        lblError.Text = "Data Inserted Successfully!!";
                    }
                    else
                    {
                        lblError.Text = "Error";
                    }
                }
            }
            else if (e.CommandName == "Add")
            {
                gvKeyConcerns_Common.ShowFooter = true;
            }
            else if (e.CommandName == "EmptyCancel")
            {
                gvKeyConcerns_Common.ShowFooter = false;
            }
            else if (e.CommandName == "EmptyInsert")
            {
                string str_Empty_EnggConcern_Desc = null;
                string str_Empty_Statusflag = null;
                string str_Empty_Milestone_Date = null;
                string str_Empty_Actual_Date = null;
                string str_Empty_Remarks_Desc = null;
                if (Concern_code == Constants.CONCERN_ENGG)
                {
                    str_Empty_EnggConcern_Desc = "txtEmpty_Engg_desc";
                    str_Empty_Statusflag = "ddl_empty_EnggStatusFlag";
                    str_Empty_Milestone_Date = "txtempty_milestone_date";
                    str_Empty_Actual_Date = "txtempty_actual_date";
                    str_Empty_Remarks_Desc = "txtEmpty_EnggRemarks";
                }
                else if (Concern_code == Constants.CONCERN_CONSTR)
                {
                    str_Empty_EnggConcern_Desc = "txtEmpty_Engg_desc1";
                    str_Empty_Statusflag = "ddl_empty_EnggStatusFlag1";
                    str_Empty_Milestone_Date = "txtempty_milestone_date1";
                    str_Empty_Actual_Date = "txtempty_actual_date1";
                    str_Empty_Remarks_Desc = "txtEmpty_EnggRemarks1";
                }
                else if (Concern_code == Constants.CONCERN_VENDOR)
                {
                    str_Empty_EnggConcern_Desc = "txtEmpty_Engg_desc2";
                    str_Empty_Statusflag = "ddl_empty_EnggStatusFlag2";
                    str_Empty_Milestone_Date = "txtempty_milestone_date2";
                    str_Empty_Actual_Date = "txtempty_actual_date2";
                    str_Empty_Remarks_Desc = "txtEmpty_EnggRemarks2";
                }
                else if (Concern_code == Constants.CONCERN_CONTRACTOR)
                {
                    str_Empty_EnggConcern_Desc = "txtEmpty_Engg_desc3";
                    str_Empty_Statusflag = "ddl_empty_EnggStatusFlag3";
                    str_Empty_Milestone_Date = "txtempty_milestone_date3";
                    str_Empty_Actual_Date = "txtempty_actual_date3";
                    str_Empty_Remarks_Desc = "txtEmpty_EnggRemarks3";
                }
                else if (Concern_code == Constants.CONCERN_LICENSOR)
                {
                    str_Empty_EnggConcern_Desc = "txtEmpty_Engg_desc4";
                    str_Empty_Statusflag = "ddl_empty_EnggStatusFlag4";
                    str_Empty_Milestone_Date = "txtempty_milestone_date4";
                    str_Empty_Actual_Date = "txtempty_actual_date4";
                    str_Empty_Remarks_Desc = "txtEmpty_EnggRemarks4";
                }

                TextBox Empty_EnggConcern_Desc = (TextBox)row.FindControl(str_Empty_EnggConcern_Desc);
                DropDownList Empty_Statusflag = (DropDownList)row.FindControl(str_Empty_Statusflag);
                TextBox Empty_Milestone_Date = (TextBox)row.FindControl(str_Empty_Milestone_Date);
                TextBox Empty_Actual_Date = (TextBox)row.FindControl(str_Empty_Actual_Date);
                TextBox Empty_Remarks_Desc = (TextBox)row.FindControl(str_Empty_Remarks_Desc);
                if (string.IsNullOrEmpty(Empty_EnggConcern_Desc.Text) == true)
                {
                    lblError.Text = "Item desc can not be empty";
                }
                else
                {
                    StringBuilder sbEmpty_InsertQuery = new StringBuilder();
                    Dictionary<string, string> Empty_insertParamList = new Dictionary<string, string>();
                    sbEmpty_InsertQuery.Append("INSERT INTO CM_CONCERNS_ENGG (JOB_NO, MONTH_CODE, YEAR_CODE,CONCERNS_CODE, CONCERNS_DESC,");
                    sbEmpty_InsertQuery.Append(" CONCERNS_SR_NO, STATUS_FLAG,CRITICAL_MILESTONE_DATE,ACTUAL_DATE,REMARKS, ADDED_DATE, ADDED_BY ) VALUES ");
                    sbEmpty_InsertQuery.Append(" (:JOB_NO_TEXT,:MONTH_CODE_TEXT,:YEAR_CODE_TEXT,:CONCERNS_CODE,:CONCERNS_DESC, (SELECT NVL (MAX (CONCERNS_SR_NO), 0) + 1 countdata FROM CM_CONCERNS_ENGG ");
                    sbEmpty_InsertQuery.Append(" WHERE JOB_NO =:JOB_NO_WHR AND MONTH_CODE = :MONTH_CODE_WHR AND YEAR_CODE =:YEAR_CODE_WHR and CONCERNS_CODE=:CONCERNS_CODE_WHR), ");
                    sbEmpty_InsertQuery.Append(" :STATUS_FLAG,:CRITICAL_MILESTONE_DATE,:ACTUAL_DATE,:REMARKS, sysdate, :Added_by) ");
                    Empty_insertParamList.Add(":JOB_NO_TEXT", Job_no);
                    Empty_insertParamList.Add(":MONTH_CODE_TEXT", Month_Code);
                    Empty_insertParamList.Add(":YEAR_CODE_TEXT", Year_Code);
                    Empty_insertParamList.Add(":CONCERNS_CODE", Concern_code);
                    Empty_insertParamList.Add(":CONCERNS_DESC", Empty_EnggConcern_Desc.Text.ToString().Trim());
                    Empty_insertParamList.Add(":JOB_NO_WHR", Job_no);
                    Empty_insertParamList.Add(":MONTH_CODE_WHR", Month_Code);
                    Empty_insertParamList.Add(":YEAR_CODE_WHR", Year_Code);
                    Empty_insertParamList.Add(":CONCERNS_CODE_WHR", Concern_code);
                    Empty_insertParamList.Add(":STATUS_FLAG", Empty_Statusflag.SelectedValue.ToString());
                    Empty_insertParamList.Add(":CRITICAL_MILESTONE_DATE", Empty_Milestone_Date.Text.ToString().Trim());
                    Empty_insertParamList.Add(":ACTUAL_DATE", Empty_Actual_Date.Text.ToString().Trim());
                    Empty_insertParamList.Add(":REMARKS", Empty_Remarks_Desc.Text.ToString().Trim());
                    Empty_insertParamList.Add(":Added_by", User);
                    int i = objDB.executeNonQuery(sbEmpty_InsertQuery.ToString(), Empty_insertParamList);
                    if (i > 0)
                    {
                        lblError.Text = "Data Inserted Successfully!!";
                    }
                    else
                    {
                        lblError.Text = "Error";
                    }
                }
            }
            else if (e.CommandName == "Delete")
            {
                string Str_Concern_SrNo = null;
                if (Concern_code == Constants.CONCERN_ENGG)
                {
                    Str_Concern_SrNo = "lblConcern_srno";
                }
                else if (Concern_code == Constants.CONCERN_CONSTR)
                {
                    Str_Concern_SrNo = "lblConcern_srno1";
                }
                else if (Concern_code == Constants.CONCERN_VENDOR)
                {
                    Str_Concern_SrNo = "lblConcern_srno2";
                }
                else if (Concern_code == Constants.CONCERN_CONTRACTOR)
                {
                    Str_Concern_SrNo = "lblConcern_srno3";
                }
                else if (Concern_code == Constants.CONCERN_LICENSOR)
                {
                    Str_Concern_SrNo = "lblConcern_srno4";
                }
                Label Concern_SrNo = (Label)row.FindControl(Str_Concern_SrNo);
                StringBuilder sbDelete_Query = new StringBuilder();
                Dictionary<string, string> Delete_ParamList = new Dictionary<string, string>();
                sbDelete_Query.Append(" DELETE FROM CM_CONCERNS_ENGG ");
                sbDelete_Query.Append(" WHERE JOB_NO =:JOB_NO_WHR AND MONTH_CODE = :MONTH_CODE_WHR AND YEAR_CODE =:YEAR_CODE_WHR AND CONCERNS_SR_NO=:CONCERNS_SR_NO AND CONCERNS_CODE=:CONCERNS_CODE_WHR");
                Delete_ParamList.Add(":JOB_NO_WHR", Job_no);
                Delete_ParamList.Add(":MONTH_CODE_WHR", Month_Code);
                Delete_ParamList.Add(":YEAR_CODE_WHR", Year_Code);
                Delete_ParamList.Add(":CONCERNS_SR_NO", Concern_SrNo.Text.ToString());
                Delete_ParamList.Add(":CONCERNS_CODE_WHR", Concern_code);
                int i = objDB.executeNonQuery(sbDelete_Query.ToString(), Delete_ParamList);
                if (i > 0)
                {
                    lblError.Text = "Data Deleted Successfully!!";
                }
                else
                {
                    lblError.Text = "Error";
                }
            }
            bindKeyConcerns_Details(Concern_code, gvKeyConcerns_Common);
        }
        catch (Exception ex)
        {
            lblError.Text = ex.ToString();
        }
    }

    protected void gvKeyConcerns_Common_RowData(GridViewRowEventArgs e, string Concern_code, GridView gvKeyConcerns_Common)
    {
        if (e.Row.RowType == DataControlRowType.DataRow)
        {
            if ((e.Row.RowState & DataControlRowState.Edit) > 0)
            {
                string str_StatusFlag = "";
                string str_ddlEdit_StatusFlag = null;
                string str_lblStatusFlag = null;
                if (Concern_code == Constants.CONCERN_ENGG)
                {
                    str_ddlEdit_StatusFlag = "txt_edit_StatusFlag";
                    str_lblStatusFlag = "lblM_EngStatusflag";
                }
                else if (Concern_code == Constants.CONCERN_CONSTR)
                {
                    str_ddlEdit_StatusFlag = "txt_edit_StatusFlag1";
                    str_lblStatusFlag = "lblM_EngStatusflag1";
                }
                else if (Concern_code == Constants.CONCERN_VENDOR)
                {
                    str_ddlEdit_StatusFlag = "txt_edit_StatusFlag2";
                    str_lblStatusFlag = "lblM_EngStatusflag2";
                }
                else if (Concern_code == Constants.CONCERN_CONTRACTOR)
                {
                    str_ddlEdit_StatusFlag = "txt_edit_StatusFlag3";
                    str_lblStatusFlag = "lblM_EngStatusflag3";
                }
                else if (Concern_code == Constants.CONCERN_LICENSOR)
                {
                    str_ddlEdit_StatusFlag = "txt_edit_StatusFlag4";
                    str_lblStatusFlag = "lblM_EngStatusflag4";
                }
                DropDownList ddlEdit_StatusFlag = ((DropDownList)e.Row.FindControl(str_ddlEdit_StatusFlag));
                Label lblStatusFlag = ((Label)e.Row.FindControl(str_lblStatusFlag));
                str_StatusFlag = lblStatusFlag.Text.ToString().Trim();
                if (str_StatusFlag != string.Empty)
                {
                    ddlEdit_StatusFlag.SelectedValue = str_StatusFlag;
                }
            }
        }
        else if (e.Row.RowType == DataControlRowType.EmptyDataRow)
        {
            string user_role = Session["User_Role"].ToString();
            string Edit_Rights = Session["Edit_Rights"].ToString();
            string Visible_false = Session["Visible_false"].ToString();
            if ((((user_role == "V") || (user_role == "Z") || (user_role == "ID")) && (Edit_Rights == "")) || (Visible_false == "Y"))
            {
                //here you can access the div control
                HtmlGenericControl htmlhideDiv = (HtmlGenericControl)e.Row.FindControl("hideDivKeyConcerns");
                htmlhideDiv.Style.Add("Display", "none");
            }
        }
    }

    //Bind Grid Key Concerns Construction
    protected void gvKeyConcerns_Constr_RowEditing(object sender, GridViewEditEventArgs e)
    {
        gvKeyConcerns_Constr.EditIndex = e.NewEditIndex;
        bindKeyConcerns_Details(Constants.CONCERN_CONSTR, gvKeyConcerns_Constr);
    }

    protected void gvKeyConcerns_Constr_RowCancelingEdit(object sender, GridViewCancelEditEventArgs e)
    {
        gvKeyConcerns_Constr.EditIndex = -1;
        bindKeyConcerns_Details(Constants.CONCERN_CONSTR, gvKeyConcerns_Constr);
    }

    protected void gvKeyConcerns_Constr_RowCommand(object sender, GridViewCommandEventArgs e)
    {
        gvKeyConcerns_Common_Query(e, Constants.CONCERN_CONSTR, gvKeyConcerns_Constr);
    }

    protected void gvKeyConcerns_Constr_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        gvKeyConcerns_Common_RowData(e, Constants.CONCERN_CONSTR, gvKeyConcerns_Constr);
    }

    protected void gvKeyConcerns_Constr_RowUpdating(object sender, GridViewUpdateEventArgs e)
    {
        //do nothing
    }

    protected void gvKeyConcerns_Constr_RowDeleting(object sender, GridViewDeleteEventArgs e)
    {
        //do nothing
    }

    //Bind Grid Key Concerns Vendor
    protected void gvKeyConcerns_Vend_RowEditing(object sender, GridViewEditEventArgs e)
    {
        gvKeyConcerns_Vend.EditIndex = e.NewEditIndex;
        bindKeyConcerns_Details(Constants.CONCERN_VENDOR, gvKeyConcerns_Vend);
    }

    protected void gvKeyConcerns_Vend_RowCancelingEdit(object sender, GridViewCancelEditEventArgs e)
    {
        gvKeyConcerns_Vend.EditIndex = -1;
        bindKeyConcerns_Details(Constants.CONCERN_VENDOR, gvKeyConcerns_Vend);
    }

    protected void gvKeyConcerns_Vend_RowCommand(object sender, GridViewCommandEventArgs e)
    {
        gvKeyConcerns_Common_Query(e, Constants.CONCERN_VENDOR, gvKeyConcerns_Vend);
    }

    protected void gvKeyConcerns_Vend_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        gvKeyConcerns_Common_RowData(e, Constants.CONCERN_VENDOR, gvKeyConcerns_Vend);
    }

    protected void gvKeyConcerns_Vend_RowUpdating(object sender, GridViewUpdateEventArgs e)
    {
        //do nothing
    }

    protected void gvKeyConcerns_Vend_RowDeleting(object sender, GridViewDeleteEventArgs e)
    {
        //do nothing
    }

    //Bind Grid Key Concerns Contractor
    protected void gvKeyConcerns_Contrctr_RowEditing(object sender, GridViewEditEventArgs e)
    {
        gvKeyConcerns_Contrctr.EditIndex = e.NewEditIndex;
        bindKeyConcerns_Details(Constants.CONCERN_CONTRACTOR, gvKeyConcerns_Contrctr);
    }

    protected void gvKeyConcerns_Contrctr_RowCancelingEdit(object sender, GridViewCancelEditEventArgs e)
    {
        gvKeyConcerns_Contrctr.EditIndex = -1;
        bindKeyConcerns_Details(Constants.CONCERN_CONTRACTOR, gvKeyConcerns_Contrctr);
    }

    protected void gvKeyConcerns_Contrctr_RowCommand(object sender, GridViewCommandEventArgs e)
    {
        gvKeyConcerns_Common_Query(e, Constants.CONCERN_CONTRACTOR, gvKeyConcerns_Contrctr);
    }

    protected void gvKeyConcerns_Contrctr_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        gvKeyConcerns_Common_RowData(e, Constants.CONCERN_CONTRACTOR, gvKeyConcerns_Contrctr);
    }

    protected void gvKeyConcerns_Contrctr_RowUpdating(object sender, GridViewUpdateEventArgs e)
    {
        //do nothing
    }

    protected void gvKeyConcerns_Contrctr_RowDeleting(object sender, GridViewDeleteEventArgs e)
    {
        //do nothing
    }

    //Bind Grid Key Concerns Licensor
    protected void gvKeyConcerns_Licn_RowEditing(object sender, GridViewEditEventArgs e)
    {
        gvKeyConcerns_Licn.EditIndex = e.NewEditIndex;
        bindKeyConcerns_Details(Constants.CONCERN_LICENSOR, gvKeyConcerns_Licn);
    }

    protected void gvKeyConcerns_Licn_RowCancelingEdit(object sender, GridViewCancelEditEventArgs e)
    {
        gvKeyConcerns_Licn.EditIndex = -1;
        bindKeyConcerns_Details(Constants.CONCERN_LICENSOR, gvKeyConcerns_Licn);
    }

    protected void gvKeyConcerns_Licn_RowCommand(object sender, GridViewCommandEventArgs e)
    {
        gvKeyConcerns_Common_Query(e, Constants.CONCERN_LICENSOR, gvKeyConcerns_Licn);
    }

    protected void gvKeyConcerns_Licn_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        gvKeyConcerns_Common_RowData(e, Constants.CONCERN_LICENSOR, gvKeyConcerns_Licn);
    }

    protected void gvKeyConcerns_Licn_RowUpdating(object sender, GridViewUpdateEventArgs e)
    {
        //do nothing
    }

    protected void gvKeyConcerns_Licn_RowDeleting(object sender, GridViewDeleteEventArgs e)
    {
        //do nothing
    }

    #endregion

    #region Button_On_Click Eevnts

    protected void btnProceed_Click(object sender, EventArgs e)
    {
        lblError.Text = "";
        pnl_Detail.Visible = false;
        if (ddJobNumber.SelectedIndex > 0)
        {
            if (ddlYear.SelectedIndex > 0)
            {
                if (ddlMonth.SelectedIndex > 0)
                {
                    Check_Freeze_Month_Data();
                    pnl_Detail.Visible = true;
                    Get_Data();
                    bindGrids();
                }
                else
                {
                    lblError.Text = "Select Month..";
                }
            }
            else
            {
                lblError.Text = "Select Year..";
            }
        }
        else
        {
            lblError.Text = "Select Job..";
        }
    }

    protected void btn_ProjSave_Click(object sender, EventArgs e)
    {
        lblError.Text = "";
        if (ddJobNumber.SelectedIndex > 0)
        {
            if (ddlYear.SelectedIndex > 0)
            {
                if (ddlMonth.SelectedIndex > 0)
                {
                    Page.Validate("SectionA");
                    if (Page.IsValid)
                    {
                        if (Check_Progress_slippage())
                        {
                            lblProjrem.Visible = true;
                            lblProjremarks.Visible = true;
                        }
                        else
                        {
                            lblProjrem.Visible = false;
                            lblProjremarks.Visible = false;
                            try
                            {
                                string Job_no = ddJobNumber.SelectedValue.ToString().Trim();
                                string Year_Code = ddlYear.SelectedItem.ToString().Trim();
                                string Month_Code = ddlMonth.SelectedValue.ToString().Trim();
                                string User = Session["USERID"].ToString().Trim();

                                StringBuilder sbQuery = new StringBuilder();
                                StringBuilder sbInsertQuery = new StringBuilder();
                                StringBuilder sbUpdateQuery = new StringBuilder();
                                Dictionary<string, string> paramList = new Dictionary<string, string>();
                                Dictionary<string, string> insertParamList = new Dictionary<string, string>();
                                Dictionary<string, string> updateParamList = new Dictionary<string, string>();
                                sbQuery.Append("SELECT COUNT(*) FROM CM_PROJECT_DETAILS WHERE JOB_NO =:JOB_NO AND MONTH_CODE = :MONTH_CODE AND YEAR_CODE =:YEAR_CODE ");
                                paramList.Add("JOB_NO", Job_no);
                                paramList.Add("MONTH_CODE", Month_Code);
                                paramList.Add("YEAR_CODE", Year_Code);
                                string str_record = objDB.executeScalar(sbQuery.ToString(), paramList);
                                Int32 count_record = Convert.ToInt32(str_record);
                                if (count_record > 0)
                                {
                                    //Update if exists
                                    sbUpdateQuery.Append("UPDATE CM_PROJECT_DETAILS SET PROJECT_START_DATE=:Start_date,PROJECT_ZERO_DATE=:zero_date,PROJECT_SCH_COMP_DATE=:comp_date,  ");
                                    sbUpdateQuery.Append(" PROGRESS_SCH_SERVICES=:SEVICE_SCH,PROGRESS_ACT_SERVICES=:SEVICE_ACT, ");
                                    sbUpdateQuery.Append(" PROGRESS_SCH_PHYSICAL=:PHYSICAL_SCH,PROGRESS_ACT_PHYSICAL=:PHYSICAL_ACT, ");
                                    sbUpdateQuery.Append(" CONTROL_MAN_MONTHS_HO=:C_MM_HO,CONTROL_MAN_MONTHS_SITE=:C_MM_SITE, ");
                                    sbUpdateQuery.Append(" SPENT_MAN_MONTHS_HO=:Spent_MM_HO,SPENT_MAN_MONTHS_SITE=:Spent_MM_Site, ");
                                    sbUpdateQuery.Append(" TASK_FORCE_HO=:TF_MM_HO,TASK_FORCE_SITE=:TF_MM_Site, ");
                                    sbUpdateQuery.Append(" PROJECT_APPROVED_COST=:APPROVED_COST,PROJECT_COMMITTED_COST=:COMMITTED_COST, ");
                                    sbUpdateQuery.Append(" EIL_SERVICE_LIABILITY=:SERVICE_LIAB,OVERALL_PROJ_LIABILITY=:OVERALL_LIAB, EIL_FEE=:EIL_FEE, BILLED_INVOICE=:BILLED_INVOICE,");
                                    sbUpdateQuery.Append(" AMOUNT_RECEIVED=:AMOUNT_RECEIVED, OUTSTANDING_AMOUNT_3MONTHS=:AMOUNT_3MONTHS,");
                                    sbUpdateQuery.Append(" UPDATED_ON=sysdate,UPDATED_BY=:UPDATED_BY,");
                                    sbUpdateQuery.Append(" REPEAT_ENGG=:REPEAT_ENGG,SAVING_MAN_MONTHS_HO=:SAVING_MAN_MONTHS_HO,SAVING_MAN_MONTHS_SITE=:SAVING_MAN_MONTHS_SITE ");
                                    sbUpdateQuery.Append(" WHERE JOB_NO =:JOB_NO AND MONTH_CODE = :MONTH_CODE AND YEAR_CODE =:YEAR_CODE");
                                    updateParamList.Add(":Start_date", txtProjectStart_Date.Text.ToString().Trim());
                                    updateParamList.Add(":zero_date", txtProjectZero_Date.Text.ToString().Trim());
                                    updateParamList.Add(":comp_date", txtProjectComp_Date.Text.ToString().Trim());
                                    updateParamList.Add(":SEVICE_SCH", txtProg_service_Sch.Text.ToString().Trim());
                                    updateParamList.Add(":SEVICE_ACT", txtProg_service_Act.Text.ToString().Trim());
                                    updateParamList.Add(":PHYSICAL_SCH", txtProg_physical_Sch.Text.ToString().Trim());
                                    updateParamList.Add(":PHYSICAL_ACT", txtProg_physical_Act.Text.ToString().Trim());
                                    updateParamList.Add(":C_MM_HO", txtHO_ConMamonth.Text.ToString().Trim());
                                    updateParamList.Add(":C_MM_SITE", txtSite_ConMamonth.Text.ToString().Trim());
                                    updateParamList.Add(":Spent_MM_HO", txtHO_SpentMamonth.Text.ToString().Trim());
                                    updateParamList.Add(":Spent_MM_Site", txtSite_SpentMamonth.Text.ToString().Trim());
                                    updateParamList.Add(":TF_MM_HO", txtHO_TaskForce.Text.ToString().Trim());
                                    updateParamList.Add(":TF_MM_Site", txtSite_TaskForce.Text.ToString().Trim());
                                    updateParamList.Add(":APPROVED_COST", txtAppCostText.Text.ToString().Trim());
                                    updateParamList.Add(":COMMITTED_COST", txtComCostText.Text.ToString().Trim());
                                    updateParamList.Add(":SERVICE_LIAB", txtServiceLiabilityText.Text.ToString().Trim());
                                    updateParamList.Add(":OVERALL_LIAB", txtOverallLiabilityText.Text.ToString().Trim());
                                    updateParamList.Add(":EIL_FEE", txtFeeText.Text.ToString().Trim());
                                    updateParamList.Add(":BILLED_INVOICE", txtBillText.Text.ToString().Trim());
                                    updateParamList.Add(":AMOUNT_RECEIVED", txtAmtRecText.Text.ToString().Trim());
                                    updateParamList.Add(":AMOUNT_3MONTHS", txtoutmonthAmtText.Text.ToString().Trim());
                                    updateParamList.Add(":UPDATED_BY", User);
                                    updateParamList.Add(":REPEAT_ENGG", ddl_RepeatEngg.SelectedValue.ToString().Trim());
                                    updateParamList.Add(":SAVING_MAN_MONTHS_HO", txt_ho_Saving.Text.ToString().Trim());
                                    updateParamList.Add(":SAVING_MAN_MONTHS_SITE", txt_site_Saving.Text.ToString().Trim());
                                    updateParamList.Add(":JOB_NO", Job_no);
                                    updateParamList.Add(":MONTH_CODE", Month_Code);
                                    updateParamList.Add(":YEAR_CODE", Year_Code);
                                    int i = objDB.executeNonQuery(sbUpdateQuery.ToString(), updateParamList);
                                    if (i > 0)
                                    {
                                        ModalPopupExtender1.Show();
                                    }
                                    else
                                    {
                                        lblError.Text = "Error in Update query";
                                    }
                                }
                                else
                                {
                                    //else Insert
                                    sbInsertQuery.Append("INSERT INTO CM_PROJECT_DETAILS (JOB_NO, MONTH_CODE, YEAR_CODE,PROJECT_START_DATE,PROJECT_ZERO_DATE,PROJECT_SCH_COMP_DATE, PROGRESS_SCH_SERVICES, PROGRESS_ACT_SERVICES, ");
                                    sbInsertQuery.Append(" PROGRESS_SCH_PHYSICAL,PROGRESS_ACT_PHYSICAL, CONTROL_MAN_MONTHS_HO, CONTROL_MAN_MONTHS_SITE, SPENT_MAN_MONTHS_HO, ");
                                    sbInsertQuery.Append(" SPENT_MAN_MONTHS_SITE,TASK_FORCE_HO,TASK_FORCE_SITE,PROJECT_APPROVED_COST,PROJECT_COMMITTED_COST, ");
                                    sbInsertQuery.Append(" EIL_SERVICE_LIABILITY,OVERALL_PROJ_LIABILITY, EIL_FEE,BILLED_INVOICE, AMOUNT_RECEIVED, OUTSTANDING_AMOUNT_3MONTHS, ADDED_ON, ADDED_BY, REPEAT_ENGG,SAVING_MAN_MONTHS_HO,SAVING_MAN_MONTHS_SITE) ");
                                    sbInsertQuery.Append(" VALUES (:JOB_NO,:MONTH_CODE,:YEAR_CODE,:Start_date,:zero_date,:comp_date,:SEVICE_SCH,:SEVICE_ACT,:PHYSICAL_SCH,:PHYSICAL_ACT,:C_MM_HO,:C_MM_SITE,");
                                    sbInsertQuery.Append(" :Spent_MM_HO,:Spent_MM_Site,:TF_MM_HO,:TF_MM_Site,:APPROVED_COST,:COMMITTED_COST, ");
                                    sbInsertQuery.Append(" :SERVICE_LIAB,:OVERALL_LIAB,:EIL_FEE,:BILLED_INVOICE,:AMOUNT_RECEIVED,:AMOUNT_3MONTHS, SYSDATE, :UPLOADED_BY, ");
                                    sbInsertQuery.Append(" :REPEAT_ENGG,:SAVING_MAN_MONTHS_HO,:SAVING_MAN_MONTHS_SITE ) ");
                                    insertParamList.Add(":JOB_NO", Job_no);
                                    insertParamList.Add(":MONTH_CODE", Month_Code);
                                    insertParamList.Add(":YEAR_CODE", Year_Code);
                                    insertParamList.Add(":Start_date", txtProjectStart_Date.Text.ToString().Trim());
                                    insertParamList.Add(":zero_date", txtProjectZero_Date.Text.ToString().Trim());
                                    insertParamList.Add(":comp_date", txtProjectComp_Date.Text.ToString().Trim());
                                    insertParamList.Add(":SEVICE_SCH", txtProg_service_Sch.Text.ToString().Trim());
                                    insertParamList.Add(":SEVICE_ACT", txtProg_service_Act.Text.ToString().Trim());
                                    insertParamList.Add(":PHYSICAL_SCH", txtProg_physical_Sch.Text.ToString().Trim());
                                    insertParamList.Add(":PHYSICAL_ACT", txtProg_physical_Act.Text.ToString().Trim());
                                    insertParamList.Add(":C_MM_HO", txtHO_ConMamonth.Text.ToString().Trim());
                                    insertParamList.Add(":C_MM_SITE", txtSite_ConMamonth.Text.ToString().Trim());
                                    insertParamList.Add(":Spent_MM_HO", txtHO_SpentMamonth.Text.ToString().Trim());
                                    insertParamList.Add(":Spent_MM_Site", txtSite_SpentMamonth.Text.ToString().Trim());
                                    insertParamList.Add(":TF_MM_HO", txtHO_TaskForce.Text.ToString().Trim());
                                    insertParamList.Add(":TF_MM_Site", txtSite_TaskForce.Text.ToString().Trim());
                                    insertParamList.Add(":APPROVED_COST", txtAppCostText.Text.ToString().Trim());
                                    insertParamList.Add(":COMMITTED_COST", txtComCostText.Text.ToString().Trim());
                                    insertParamList.Add(":SERVICE_LIAB", txtServiceLiabilityText.Text.ToString().Trim());
                                    insertParamList.Add(":OVERALL_LIAB", txtOverallLiabilityText.Text.ToString().Trim());
                                    insertParamList.Add(":EIL_FEE", txtFeeText.Text.ToString().Trim());
                                    insertParamList.Add(":BILLED_INVOICE", txtBillText.Text.ToString().Trim());
                                    insertParamList.Add(":AMOUNT_RECEIVED", txtAmtRecText.Text.ToString().Trim());
                                    insertParamList.Add(":AMOUNT_3MONTHS", txtoutmonthAmtText.Text.ToString().Trim());
                                    insertParamList.Add(":UPLOADED_BY", User);
                                    insertParamList.Add(":REPEAT_ENGG", ddl_RepeatEngg.SelectedValue.ToString().Trim());
                                    insertParamList.Add(":SAVING_MAN_MONTHS_HO", txt_ho_Saving.Text.ToString().Trim());
                                    insertParamList.Add(":SAVING_MAN_MONTHS_SITE", txt_site_Saving.Text.ToString().Trim());
                                    int i = objDB.executeNonQuery(sbInsertQuery.ToString(), insertParamList);
                                    if (i > 0)
                                    {
                                        ModalPopupExtender1.Show();
                                    }
                                    else
                                    {
                                        lblError.Text = "Error in insert query";
                                    }
                                }
                            }
                            catch (Exception ex)
                            {
                                lblError.Text = "Error" + ex.ToString();
                            }
                        }
                    }
                }
            }
        }
    }

    protected void btnMilestone_Save_Click(object sender, EventArgs e)
    {
        try
        {
            lblError.Text = "";
            string Job_no = ddJobNumber.SelectedValue.ToString().Trim();
            string Year_Code = ddlYear.SelectedItem.ToString().Trim();
            string Month_Code = ddlMonth.SelectedValue.ToString().Trim();
            string User = Session["USERID"].ToString().Trim();

            StringBuilder sbQuery = new StringBuilder();
            StringBuilder sbInsertQuery = new StringBuilder();
            StringBuilder sbUpdateQuery = new StringBuilder();
            Dictionary<string, string> paramList = new Dictionary<string, string>();
            Dictionary<string, string> insertParamList = new Dictionary<string, string>();
            Dictionary<string, string> updateParamList = new Dictionary<string, string>();
            sbQuery.Append("SELECT COUNT(1) FROM CM_MILESTONE_DETAILS WHERE JOB_NO =:JOB_NO AND MONTH_CODE = :MONTH_CODE AND YEAR_CODE =:YEAR_CODE");
            paramList.Add("JOB_NO", Job_no);
            paramList.Add("MONTH_CODE", Month_Code);
            paramList.Add("YEAR_CODE", Year_Code);
            string str_record = objDB.executeScalar(sbQuery.ToString(), paramList);
            Int32 count_record = Convert.ToInt32(str_record);
            if (count_record > 0)
            {
                //Update if exists
                sbUpdateQuery.Append("UPDATE CM_MILESTONE_DETAILS SET MILESTONE_TOTAL_NO=:Total_no ,MILESTONE_DUE=:Due_no,MILESTONE_ACHIEVED=:Achieved_no,");
                sbUpdateQuery.Append(" MILESTONE_WITH_DATES=:MILESTONE_WITH_DATES, UPDATED_ON=sysdate, UPDATED_BY=:Updated_by ");
                sbUpdateQuery.Append(" where JOB_NO =:JOB_NO AND MONTH_CODE = :MONTH_CODE AND YEAR_CODE =:YEAR_CODE");
                updateParamList.Add(":Total_no", txtMilestone_No.Text.ToString());
                updateParamList.Add(":Due_no", txtMilestone_Due.Text.ToString());
                updateParamList.Add(":Achieved_no", txtMilestone_Achieved.Text.ToString());
                updateParamList.Add(":MILESTONE_WITH_DATES", txtMilestone_Dates.Text.ToString());
                updateParamList.Add(":Updated_by", User);
                updateParamList.Add(":JOB_NO", Job_no);
                updateParamList.Add(":MONTH_CODE", Month_Code);
                updateParamList.Add(":YEAR_CODE", Year_Code);
                int i = objDB.executeNonQuery(sbUpdateQuery.ToString(), updateParamList);
                if (i > 0)
                {
                    lblError.Text = "Records Updated";
                }
                else
                {
                    lblError.Text = "Error in Update query";
                }
            }
            else
            {
                sbInsertQuery.Append("INSERT INTO CM_MILESTONE_DETAILS (JOB_NO, MONTH_CODE, YEAR_CODE, MILESTONE_TOTAL_NO, MILESTONE_DUE,");
                sbInsertQuery.Append(" MILESTONE_ACHIEVED, MILESTONE_WITH_DATES, ADDED_DATE, ADDED_BY) values (:JOB_NO,:MONTH_CODE,:YEAR_CODE,:Total_no,:Due_no,");
                sbInsertQuery.Append(" :Achieved_no,:MILESTONE_WITH_DATES, SYSDATE, :UPLOADED_BY)");
                insertParamList.Add(":JOB_NO", Job_no);
                insertParamList.Add(":MONTH_CODE", Month_Code);
                insertParamList.Add(":YEAR_CODE", Year_Code);
                insertParamList.Add(":Total_no", txtMilestone_No.Text.ToString());
                insertParamList.Add(":Due_no", txtMilestone_Due.Text.ToString());
                insertParamList.Add(":Achieved_no", txtMilestone_Achieved.Text.ToString());
                insertParamList.Add(":MILESTONE_WITH_DATES", txtMilestone_Dates.Text.ToString());
                insertParamList.Add(":UPLOADED_BY", User);
                int i = objDB.executeNonQuery(sbInsertQuery.ToString(), insertParamList);
                if (i > 0)
                {
                    lblError.Text = "Records Inserted";
                }
                else
                {
                    lblError.Text = "Error in Insert query";
                }
            }
        }
        catch (Exception ex)
        {
            lblError.Text = ex.ToString();
        }
    }

    protected void btnMilestone_Add_Click(object sender, EventArgs e)
    {
        lblError.Text = "";
        pnl_Milestone.Visible = true;
        bindMilestone_Details();
    }

    protected void btnMilestone_Close_Click(object sender, EventArgs e)
    {
        lblError.Text = "";
        pnl_Milestone.Visible = false;
    }

    protected void btnSite_Save_Click(object sender, EventArgs e)
    {
        try
        {
            lblError.Text = "";
            string Job_no = ddJobNumber.SelectedValue.ToString().Trim();
            string Year_Code = ddlYear.SelectedItem.ToString().Trim();
            string Month_Code = ddlMonth.SelectedValue.ToString().Trim();
            string User = Session["USERID"].ToString().Trim();

            StringBuilder sbQuery = new StringBuilder();
            StringBuilder sbInsertQuery = new StringBuilder();
            StringBuilder sbUpdateQuery = new StringBuilder();
            Dictionary<string, string> paramList = new Dictionary<string, string>();
            Dictionary<string, string> insertParamList = new Dictionary<string, string>();
            Dictionary<string, string> updateParamList = new Dictionary<string, string>();
            sbQuery.Append("SELECT COUNT(*) FROM CM_SITE_QUERY_DETAILS WHERE JOB_NO =:JOB_NO AND MONTH_CODE = :MONTH_CODE AND YEAR_CODE =:YEAR_CODE");
            paramList.Add("JOB_NO", Job_no);
            paramList.Add("MONTH_CODE", Month_Code);
            paramList.Add("YEAR_CODE", Year_Code);
            string str_record = objDB.executeScalar(sbQuery.ToString(), paramList);
            Int32 count_record = Convert.ToInt32(str_record);
            if (count_record > 0)
            {
                //Update if exists
                sbUpdateQuery.Append("UPDATE CM_SITE_QUERY_DETAILS SET UNIT_PLOT_HANDOVER=:Unit_plot ,CONST_REPORT=:Cont_Report,ODC_STUDY=:ODC_Study,");
                sbUpdateQuery.Append(" OSBL_PROCESS_HOOKUPS=:OSBL_Hook, FABRICATION_YARD=:Fabr_Yard, HOT_PERMITS=:HOT_PERMITS, ");
                sbUpdateQuery.Append(" UTILITIES_HOOKUP=:Utility_Hook, WAREHOUSE=:WAREHOUSE, SHUTDOWN_DATES=:SHUTDOWN_DATES, ");
                sbUpdateQuery.Append(" ARBITRATION_DISPUTED_AMOUNT=:Arbitrn_Amt, GO_DECISION=:GO_DECISION, UPDATED_ON=sysdate, UPDATED_BY=:Updated_by ");
                sbUpdateQuery.Append(" where JOB_NO =:JOB_NO AND MONTH_CODE = :MONTH_CODE AND YEAR_CODE =:YEAR_CODE");
                updateParamList.Add(":Unit_plot", ddlUnitPlot.SelectedValue.ToString());
                updateParamList.Add(":Cont_Report", ddlConstreport.SelectedValue.ToString());
                updateParamList.Add(":ODC_Study", ddlOdcStudy.SelectedValue.ToString());
                updateParamList.Add(":OSBL_Hook", ddlosbl_hookups.SelectedValue.ToString());
                updateParamList.Add(":Fabr_Yard", ddlFabYard.SelectedValue.ToString());
                updateParamList.Add(":HOT_PERMITS", ddl_Hotpermits.SelectedValue.ToString());
                updateParamList.Add(":Utility_Hook", ddlUtilityHookups.SelectedValue.ToString());
                updateParamList.Add(":WAREHOUSE", ddlWarehouse.SelectedValue.ToString());
                updateParamList.Add(":SHUTDOWN_DATES", ddlShutdown_dates.SelectedValue.ToString());
                updateParamList.Add(":Arbitrn_Amt", txtArbitration_Desc.Text.ToString());
                updateParamList.Add(":GO_DECISION", txtGo_desc.Text.ToString());
                updateParamList.Add(":Updated_by", User);
                updateParamList.Add(":JOB_NO", Job_no);
                updateParamList.Add(":MONTH_CODE", Month_Code);
                updateParamList.Add(":YEAR_CODE", Year_Code);
                int i = objDB.executeNonQuery(sbUpdateQuery.ToString(), updateParamList);
                if (i > 0)
                {
                    lblError.Text = "Records Updated";
                }
                else
                {
                    lblError.Text = "Error in Update query";
                }
            }
            else if (count_record == 0)
            {
                sbInsertQuery.Append("INSERT INTO CM_SITE_QUERY_DETAILS (JOB_NO, MONTH_CODE, YEAR_CODE, UNIT_PLOT_HANDOVER, CONST_REPORT, ");
                sbInsertQuery.Append(" ODC_STUDY, OSBL_PROCESS_HOOKUPS, FABRICATION_YARD, HOT_PERMITS, UTILITIES_HOOKUP, WAREHOUSE, SHUTDOWN_DATES,");
                sbInsertQuery.Append(" ARBITRATION_DISPUTED_AMOUNT, GO_DECISION, ADDED_ON, ADDED_BY) values (:JOB_NO,:MONTH_CODE,:YEAR_CODE,");
                sbInsertQuery.Append(" :Unit_plot,:Cont_Report,:ODC_Study,:OSBL_Hook,:Fabr_Yard,:HOT_PERMITS,:Utility_Hook,:WAREHOUSE, ");
                sbInsertQuery.Append(" :SHUTDOWN_DATES,:Arbitrn_Amt,:GO_DECISION, SYSDATE, :ADDED_BY)");
                insertParamList.Add(":JOB_NO", Job_no);
                insertParamList.Add(":MONTH_CODE", Month_Code);
                insertParamList.Add(":YEAR_CODE", Year_Code);
                insertParamList.Add(":Unit_plot", ddlUnitPlot.SelectedValue.ToString());
                insertParamList.Add(":Cont_Report", ddlConstreport.SelectedValue.ToString());
                insertParamList.Add(":ODC_Study", ddlOdcStudy.SelectedValue.ToString());
                insertParamList.Add(":OSBL_Hook", ddlosbl_hookups.SelectedValue.ToString());
                insertParamList.Add(":Fabr_Yard", ddlFabYard.SelectedValue.ToString());
                insertParamList.Add(":HOT_PERMITS", ddl_Hotpermits.SelectedValue.ToString());
                insertParamList.Add(":Utility_Hook", ddlUtilityHookups.SelectedValue.ToString());
                insertParamList.Add(":WAREHOUSE", ddlWarehouse.SelectedValue.ToString());
                insertParamList.Add(":SHUTDOWN_DATES", ddlShutdown_dates.SelectedValue.ToString());
                insertParamList.Add(":Arbitrn_Amt", txtArbitration_Desc.Text.ToString());
                insertParamList.Add(":GO_DECISION", txtGo_desc.Text.ToString());
                insertParamList.Add(":ADDED_BY", User);
                int i = objDB.executeNonQuery(sbInsertQuery.ToString(), insertParamList);
                if (i > 0)
                {
                    lblError.Text = "Records Inserted";
                }
                else
                {
                    lblError.Text = "Error in Insert query";
                }
            }
        }
        catch (Exception ex)
        {
            lblError.Text = ex.ToString();
        }
    }

    protected void btnSite_Cancel_Click(object sender, EventArgs e)
    {
        lblError.Text = "";
    }

    protected void btnFreeze_Click(object sender, EventArgs e)
    {
        lblError.Text = "";
        if (ddJobNumber.SelectedIndex > 0)
        {
            if (ddlYear.SelectedIndex > 0)
            {
                if (ddlMonth.SelectedIndex > 0)
                {
                    Page.Validate("SectionA");
                    if (Page.IsValid)
                    {
                        if (Check_Risk_Count() == true)
                        {
                            lblRiskMandatory.Text = "**Risk and Mitigation field is mandatory in Section-B. Kindly fill the same.If there is no risk, kindly fill (NA-Not applicable)";
                        }
                        else
                        {
                            lblRiskMandatory.Text = "";
                            try
                            {
                                //Run procedure here
                                string Job_no = ddJobNumber.SelectedValue.ToString().Trim();
                                string Month_Code = ddlMonth.SelectedValue.ToString().Trim();
                                string Year_Code = ddlYear.SelectedItem.ToString().Trim();
                                string User = Session["USERID"].ToString().Trim();

                                Dictionary<string, string> paramList = new Dictionary<string, string>();
                                Dictionary<string, int> paramList_int = new Dictionary<string, int>();
                                paramList_int.Add("t_month", Convert.ToInt32(Month_Code));
                                paramList_int.Add("t_year", Convert.ToInt32(Year_Code));
                                paramList_int.Add("err_msg", 0);
                                paramList.Add("t_jobno", Job_no);
                                paramList.Add("t_empno", User);
                                string msg = objDB.executeProcedure_return("COPY_CM_DATA", paramList, paramList_int);
                                if (msg.Equals("0"))
                                {
                                    lblFreeze_msg.Text = "Contract Manager Report has been submited for the selected month successfully!";
                                    tr_freeze.Visible = true;
                                    btnFreeze.Visible = false;
                                    Visible_False();
                                    Get_Project_Info();
                                    populate_Job_Month();
                                    Common.Show("Contract Manager Report has been submited for the selected month successfully!");
                                }
                                else
                                {
                                    lblFreeze_msg.Text = "Error";
                                    Common.Show("Error");
                                }
                            }
                            catch (Exception ex)
                            {
                                lblError.Text = "Error" + ex.ToString();
                            }
                        }
                    }
                }
                else
                {
                    lblError.Text = "Select Month..";
                }
            }
            else
            {
                lblError.Text = "Select Year..";
            }
        }
        else
        {
            lblError.Text = "Select Job..";
        }
    }

    protected void btn_cmr_report_Click(object sender, EventArgs e)
    {
        if (ddJobNumber.SelectedIndex > 0)
        {
            if (ddlYear.SelectedIndex > 0)
            {
                if (ddlMonth.SelectedIndex > 0)
                {
                    lblError.Text = "";
                    string[] paramDetail = { "jobno", ddJobNumber.SelectedValue.ToString(), "month_code", ddlMonth.SelectedValue.ToString(), "year_code", ddlYear.SelectedValue.ToString() };
                    GenerateReport.print("CM_Report", "pdf", "N", Session["USERID"].ToString(), paramDetail);
                }
                else
                {
                    lblError.Text = "Select Month..";
                }
            }
            else
            {
                lblError.Text = "Select Year..";
            }
        }
        else
        {
            lblError.Text = "Select Job..";
        }
    }

    #endregion

    #region Project_Key_Dates_Remarks

    protected void gv_ProjDateRemarks_RowEditing(object sender, GridViewEditEventArgs e)
    {
        gv_ProjDateRemarks.EditIndex = e.NewEditIndex;
        bind_Proj_Common_Remarks("CM_PROJ_KEY_DATES_REMARKS", gv_ProjDateRemarks);
    }

    protected void gv_ProjDateRemarks_RowCancelingEdit(object sender, GridViewCancelEditEventArgs e)
    {
        gv_ProjDateRemarks.EditIndex = -1;
        bind_Proj_Common_Remarks("CM_PROJ_KEY_DATES_REMARKS", gv_ProjDateRemarks);
    }

    protected void gv_ProjDateRemarks_RowCommand(object sender, GridViewCommandEventArgs e)
    {
        gvProjRemarks_Common_RowCommand(e, "CM_PROJ_KEY_DATES_REMARKS", gv_ProjDateRemarks);
        //try
        //{
        //    lblError.Text = "";
        //    LinkButton senderBtn = (LinkButton)e.CommandSource;
        //    GridViewRow row = (GridViewRow)senderBtn.NamingContainer;
        //    GridView grid = (GridView)row.NamingContainer;
        //    string Job_no = ddJobNumber.SelectedValue.ToString().Trim();
        //    string Year_Code = ddlYear.SelectedItem.ToString().Trim();
        //    string Month_Code = ddlMonth.SelectedValue.ToString().Trim();
        //    string User = Session["USERID"].ToString().Trim();

        //    if (e.CommandName == "Update")
        //    {
        //        Label Remarks_SrNo = (Label)row.FindControl("lblM_srno");
        //        TextBox EditRemarksDesc = (TextBox)row.FindControl("txtedit_M_Desc");
        //        if (string.IsNullOrEmpty(EditRemarksDesc.Text) == true)
        //        {
        //            lblError.Text = "Remarks Desc can not be empty";
        //        }
        //        else
        //        {
        //            StringBuilder sbEdit_Query = new StringBuilder();
        //            Dictionary<string, string> Edit_ParamList = new Dictionary<string, string>();
        //            sbEdit_Query.Append(" UPDATE CM_PROJ_KEY_DATES_REMARKS SET  REMARKS = :REMARKS_DESC, ");
        //            sbEdit_Query.Append(" UPDATED_ON = SYSDATE , UPDATED_BY=:UPDATED_BY ");
        //            sbEdit_Query.Append(" WHERE JOB_NO =:JOB_NO_WHR AND MONTH_CODE = :MONTH_CODE_WHR AND YEAR_CODE =:YEAR_CODE_WHR and REMARKS_SR_NO= :REMARKS_SR_NO");
        //            Edit_ParamList.Add(":REMARKS_DESC", EditRemarksDesc.Text.ToString());
        //            Edit_ParamList.Add(":UPDATED_BY", User);
        //            Edit_ParamList.Add(":JOB_NO_WHR", Job_no);
        //            Edit_ParamList.Add(":MONTH_CODE_WHR", Month_Code);
        //            Edit_ParamList.Add(":YEAR_CODE_WHR", Year_Code);
        //            Edit_ParamList.Add(":REMARKS_SR_NO", Remarks_SrNo.Text.ToString());
        //            int i = objDB.executeNonQuery(sbEdit_Query.ToString(), Edit_ParamList);
        //            if (i > 0)
        //            {
        //                gv_ProjDateRemarks.EditIndex = -1;
        //                lblError.Text = "Remarks updated Successfully!!";
        //            }
        //            else
        //            {
        //                lblError.Text = "Error";
        //            }
        //        }
        //    }
        //    else if (e.CommandName == "Add")
        //    {
        //        gv_ProjDateRemarks.ShowFooter = true;
        //    }
        //    else if (e.CommandName == "EmptyCancel")
        //    {
        //        gv_ProjDateRemarks.ShowFooter = false;
        //    }
        //    else if (e.CommandName == "Insert")
        //    {
        //        //Label CaseRowID = (Label)row.FindControl("lblCaseID");
        //        TextBox Ftr_Remarks_desc = (TextBox)row.FindControl("txtFooter_M_Desc");
        //        if (string.IsNullOrEmpty(Ftr_Remarks_desc.Text) == true)
        //        {
        //            lblError.Text = "Remarks Desc can not be empty";
        //        }
        //        else
        //        {
        //            StringBuilder sbFooter_InsertQuery = new StringBuilder();
        //            Dictionary<string, string> Footer_insertParamList = new Dictionary<string, string>();
        //            sbFooter_InsertQuery.Append("INSERT INTO CM_PROJ_KEY_DATES_REMARKS (JOB_NO, MONTH_CODE, YEAR_CODE, REMARKS_SR_NO, REMARKS, ADDED_DATE, ADDED_BY) VALUES ");
        //            sbFooter_InsertQuery.Append("(:JOB_NO_TEXT,:MONTH_CODE_TEXT,:YEAR_CODE_TEXT, (SELECT NVL (MAX (REMARKS_SR_NO), 0) + 1 countdata FROM CM_MILESTONE_REMARKS ");
        //            sbFooter_InsertQuery.Append(" WHERE JOB_NO =:JOB_NO_WHR AND MONTH_CODE = :MONTH_CODE_WHR AND YEAR_CODE =:YEAR_CODE_WHR),:REMARKS_desc, sysdate, :Added_by)");
        //            Footer_insertParamList.Add(":JOB_NO_TEXT", Job_no);
        //            Footer_insertParamList.Add(":MONTH_CODE_TEXT", Month_Code);
        //            Footer_insertParamList.Add(":YEAR_CODE_TEXT", Year_Code);
        //            Footer_insertParamList.Add(":JOB_NO_WHR", Job_no);
        //            Footer_insertParamList.Add(":MONTH_CODE_WHR", Month_Code);
        //            Footer_insertParamList.Add(":YEAR_CODE_WHR", Year_Code);
        //            Footer_insertParamList.Add(":REMARKS_desc", Ftr_Remarks_desc.Text.ToString());
        //            Footer_insertParamList.Add(":Added_by", User);
        //            int i = objDB.executeNonQuery(sbFooter_InsertQuery.ToString(), Footer_insertParamList);
        //            if (i > 0)
        //            {
        //                gv_ProjDateRemarks.ShowFooter = false;
        //                lblError.Text = "Remarks Inserted Successfully!!";
        //            }
        //            else
        //            {
        //                lblError.Text = "Error";
        //            }
        //        }
        //    }
        //    else if (e.CommandName == "EmptyInsert")
        //    {
        //        TextBox Empty_Remarks_desc = (TextBox)row.FindControl("txtEmpty_Milestone");
        //        if (string.IsNullOrEmpty(Empty_Remarks_desc.Text) == true)
        //        {
        //            lblError.Text = "Milestone Desc can not be empty";
        //        }
        //        else
        //        {
        //            StringBuilder sbEmpty_InsertQuery = new StringBuilder();
        //            Dictionary<string, string> Empty_insertParamList = new Dictionary<string, string>();
        //            sbEmpty_InsertQuery.Append("INSERT INTO CM_PROJ_KEY_DATES_REMARKS (JOB_NO, MONTH_CODE, YEAR_CODE, REMARKS_SR_NO, REMARKS,ADDED_DATE, ADDED_BY) VALUES ");
        //            sbEmpty_InsertQuery.Append(" (:JOB_NO_TEXT,:MONTH_CODE_TEXT,:YEAR_CODE_TEXT, (SELECT NVL (MAX (REMARKS_SR_NO), 0) + 1 countdata FROM CM_MILESTONE_REMARKS ");
        //            sbEmpty_InsertQuery.Append(" WHERE JOB_NO =:JOB_NO_WHR AND MONTH_CODE = :MONTH_CODE_WHR AND YEAR_CODE =:YEAR_CODE_WHR),:REMARKS_desc, sysdate, :Added_by) ");
        //            Empty_insertParamList.Add(":JOB_NO_TEXT", Job_no);
        //            Empty_insertParamList.Add(":MONTH_CODE_TEXT", Month_Code);
        //            Empty_insertParamList.Add(":YEAR_CODE_TEXT", Year_Code);
        //            Empty_insertParamList.Add(":JOB_NO_WHR", Job_no);
        //            Empty_insertParamList.Add(":MONTH_CODE_WHR", Month_Code);
        //            Empty_insertParamList.Add(":YEAR_CODE_WHR", Year_Code);
        //            Empty_insertParamList.Add(":REMARKS_desc", Empty_Remarks_desc.Text.ToString());
        //            Empty_insertParamList.Add(":Added_by", User);
        //            int i = objDB.executeNonQuery(sbEmpty_InsertQuery.ToString(), Empty_insertParamList);
        //            if (i > 0)
        //            {
        //                lblError.Text = "Remarks Inserted Successfully!!";
        //            }
        //            else
        //            {
        //                lblError.Text = "Error";
        //            }
        //        }
        //    }
        //    else if (e.CommandName == "Delete")
        //    {
        //        Label REMARKS_SrNo = (Label)row.FindControl("lblM_srno");
        //        StringBuilder sbDelete_Query = new StringBuilder();
        //        Dictionary<string, string> Delete_ParamList = new Dictionary<string, string>();
        //        sbDelete_Query.Append(" DELETE FROM CM_PROJ_KEY_DATES_REMARKS WHERE JOB_NO =:JOB_NO_WHR AND MONTH_CODE = :MONTH_CODE_WHR AND YEAR_CODE =:YEAR_CODE_WHR ");
        //        sbDelete_Query.Append(" and REMARKS_SR_NO= :REMARKS_SR_NO");
        //        Delete_ParamList.Add(":JOB_NO_WHR", Job_no);
        //        Delete_ParamList.Add(":MONTH_CODE_WHR", Month_Code);
        //        Delete_ParamList.Add(":YEAR_CODE_WHR", Year_Code);
        //        Delete_ParamList.Add(":REMARKS_SR_NO", REMARKS_SrNo.Text.ToString());
        //        int i = objDB.executeNonQuery(sbDelete_Query.ToString(), Delete_ParamList);
        //        if (i > 0)
        //        {
        //            lblError.Text = "Remarks Deleted Successfully!!";
        //        }
        //        else
        //        {
        //            lblError.Text = "Error";
        //        }
        //    }
        //    bind_Dates_Remarks();
        //}
        //catch (Exception ex)
        //{
        //    lblError.Text = ex.ToString();
        //}
    }

    protected void gv_ProjDateRemarks_RowUpdating(object sender, GridViewUpdateEventArgs e)
    {
        //do nothing
    }

    protected void gv_ProjDateRemarks_RowDeleting(object sender, GridViewDeleteEventArgs e)
    {
        //do nothing
    }

    protected void gv_ProjDateRemarks_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        //string user_role = Session["User_Role"].ToString();
        //string Edit_Rights = Session["Edit_Rights"].ToString();
        //string Visible_false = Session["Visible_false"].ToString();
        //if ((((user_role == "V") || (user_role == "Z") || (user_role == "ID")) && (Edit_Rights == "")) || (Visible_false == "Y"))
        //{
        //    if (e.Row.RowType == DataControlRowType.EmptyDataRow)
        //    {
        //        //here you can access the div control
        //        HtmlGenericControl htmlhideDiv = (HtmlGenericControl)e.Row.FindControl("hideDivDateRemarks");
        //        htmlhideDiv.Style.Add("Display", "none");
        //    }
        //}
        gvProjRemarks_Common_RowDatabound(e, "hideDivDateRemarks");
    }

    #endregion

    #region Project_Project_Common_Remarks

    protected void bind_Proj_Common_Remarks(string tbl_name, GridView gvProjRemarks_Common)
    {
        string Job_no = ddJobNumber.SelectedValue.ToString().Trim();
        string Year_Code = ddlYear.SelectedItem.ToString().Trim();
        string Month_Code = ddlMonth.SelectedValue.ToString().Trim();
        string User = Session["USERID"].ToString().Trim();
        StringBuilder sbQuery = new StringBuilder();
        Dictionary<string, string> paramList = new Dictionary<string, string>();
        sbQuery.Append("select REMARKS_SR_NO, REMARKS from " + tbl_name + " ");
        sbQuery.Append(" where JOB_NO =:JOB_NO_WHR AND MONTH_CODE = :MONTH_CODE_WHR ");
        sbQuery.Append(" AND YEAR_CODE =:YEAR_CODE_WHR ORDER BY REMARKS_SR_NO");
        //paramList.Add(":tbl_name", tbl_name);
        paramList.Add(":JOB_NO_WHR", Job_no);
        paramList.Add(":MONTH_CODE_WHR", Month_Code);
        paramList.Add(":YEAR_CODE_WHR", Year_Code);
        objDB.bindGridView(gvProjRemarks_Common, sbQuery.ToString(), paramList);
    }

    protected void gvProjRemarks_Common_RowCommand(GridViewCommandEventArgs e, string tbl_name, GridView gvProjRemarks_Common)
    {
        try
        {
            lblError.Text = "";
            LinkButton senderBtn = (LinkButton)e.CommandSource;
            GridViewRow row = (GridViewRow)senderBtn.NamingContainer;
            GridView grid = (GridView)row.NamingContainer;
            string Job_no = ddJobNumber.SelectedValue.ToString().Trim();
            string Year_Code = ddlYear.SelectedItem.ToString().Trim();
            string Month_Code = ddlMonth.SelectedValue.ToString().Trim();
            string User = Session["USERID"].ToString().Trim();

            if (e.CommandName == "Update")
            {
                Label Remarks_SrNo = (Label)row.FindControl("lblM_srno");
                TextBox EditRemarksDesc = (TextBox)row.FindControl("txtedit_M_Desc");
                if (string.IsNullOrEmpty(EditRemarksDesc.Text) == true)
                {
                    lblError.Text = "Remarks Desc can not be empty";
                }
                else
                {
                    StringBuilder sbEdit_Query = new StringBuilder();
                    Dictionary<string, string> Edit_ParamList = new Dictionary<string, string>();
                    sbEdit_Query.Append(" UPDATE " + tbl_name + " SET  REMARKS = :REMARKS_DESC, ");
                    sbEdit_Query.Append(" UPDATED_ON = SYSDATE , UPDATED_BY=:UPDATED_BY ");
                    sbEdit_Query.Append(" WHERE JOB_NO =:JOB_NO_WHR AND MONTH_CODE = :MONTH_CODE_WHR AND YEAR_CODE =:YEAR_CODE_WHR and REMARKS_SR_NO= :REMARKS_SR_NO");
                    //Edit_ParamList.Add(":tbl_name", tbl_name);
                    Edit_ParamList.Add(":REMARKS_DESC", EditRemarksDesc.Text.ToString());
                    Edit_ParamList.Add(":UPDATED_BY", User);
                    Edit_ParamList.Add(":JOB_NO_WHR", Job_no);
                    Edit_ParamList.Add(":MONTH_CODE_WHR", Month_Code);
                    Edit_ParamList.Add(":YEAR_CODE_WHR", Year_Code);
                    Edit_ParamList.Add(":REMARKS_SR_NO", Remarks_SrNo.Text.ToString());
                    int i = objDB.executeNonQuery(sbEdit_Query.ToString(), Edit_ParamList);
                    if (i > 0)
                    {
                        gvProjRemarks_Common.EditIndex = -1;
                        lblError.Text = "Remarks updated Successfully!!";
                    }
                    else
                    {
                        lblError.Text = "Error";
                    }
                }
            }
            else if (e.CommandName == "Add")
            {
                gvProjRemarks_Common.ShowFooter = true;
            }
            else if (e.CommandName == "EmptyCancel")
            {
                gvProjRemarks_Common.ShowFooter = false;
            }
            else if (e.CommandName == "Insert")
            {
                //Label CaseRowID = (Label)row.FindControl("lblCaseID");
                TextBox Ftr_Remarks_desc = (TextBox)row.FindControl("txtFooter_M_Desc");
                if (string.IsNullOrEmpty(Ftr_Remarks_desc.Text) == true)
                {
                    lblError.Text = "Remarks Desc can not be empty";
                }
                else
                {
                    StringBuilder sbFooter_InsertQuery = new StringBuilder();
                    Dictionary<string, string> Footer_insertParamList = new Dictionary<string, string>();
                    sbFooter_InsertQuery.Append("INSERT INTO " + tbl_name + " (JOB_NO, MONTH_CODE, YEAR_CODE, REMARKS_SR_NO, REMARKS, ADDED_DATE, ADDED_BY) VALUES ");
                    sbFooter_InsertQuery.Append("(:JOB_NO_TEXT,:MONTH_CODE_TEXT,:YEAR_CODE_TEXT, (SELECT NVL (MAX (REMARKS_SR_NO), 0) + 1 countdata FROM " + tbl_name + " ");
                    sbFooter_InsertQuery.Append(" WHERE JOB_NO =:JOB_NO_WHR AND MONTH_CODE = :MONTH_CODE_WHR AND YEAR_CODE =:YEAR_CODE_WHR),:REMARKS_desc, sysdate, :Added_by)");
                    //Footer_insertParamList.Add(":tbl_name", tbl_name);
                    Footer_insertParamList.Add(":JOB_NO_TEXT", Job_no);
                    Footer_insertParamList.Add(":MONTH_CODE_TEXT", Month_Code);
                    Footer_insertParamList.Add(":YEAR_CODE_TEXT", Year_Code);
                    Footer_insertParamList.Add(":JOB_NO_WHR", Job_no);
                    Footer_insertParamList.Add(":MONTH_CODE_WHR", Month_Code);
                    Footer_insertParamList.Add(":YEAR_CODE_WHR", Year_Code);
                    Footer_insertParamList.Add(":REMARKS_desc", Ftr_Remarks_desc.Text.ToString());
                    Footer_insertParamList.Add(":Added_by", User);
                    int i = objDB.executeNonQuery(sbFooter_InsertQuery.ToString(), Footer_insertParamList);
                    if (i > 0)
                    {
                        gvProjRemarks_Common.ShowFooter = false;
                        lblError.Text = "Remarks Inserted Successfully!!";
                    }
                    else
                    {
                        lblError.Text = "Error";
                    }
                }
            }
            else if (e.CommandName == "EmptyInsert")
            {
                TextBox Empty_Remarks_desc = (TextBox)row.FindControl("txtEmpty_Milestone");
                if (string.IsNullOrEmpty(Empty_Remarks_desc.Text) == true)
                {
                    lblError.Text = "Milestone Desc can not be empty";
                }
                else
                {
                    StringBuilder sbEmpty_InsertQuery = new StringBuilder();
                    Dictionary<string, string> Empty_insertParamList = new Dictionary<string, string>();
                    sbEmpty_InsertQuery.Append("INSERT INTO " + tbl_name + " (JOB_NO, MONTH_CODE, YEAR_CODE, REMARKS_SR_NO, REMARKS,ADDED_DATE, ADDED_BY) VALUES ");
                    sbEmpty_InsertQuery.Append(" (:JOB_NO_TEXT,:MONTH_CODE_TEXT,:YEAR_CODE_TEXT, (SELECT NVL (MAX (REMARKS_SR_NO), 0) + 1 countdata FROM " + tbl_name + " ");
                    sbEmpty_InsertQuery.Append(" WHERE JOB_NO =:JOB_NO_WHR AND MONTH_CODE = :MONTH_CODE_WHR AND YEAR_CODE =:YEAR_CODE_WHR),:REMARKS_desc, sysdate, :Added_by) ");
                    //Empty_insertParamList.Add(":tbl_name", tbl_name);
                    Empty_insertParamList.Add(":JOB_NO_TEXT", Job_no);
                    Empty_insertParamList.Add(":MONTH_CODE_TEXT", Month_Code);
                    Empty_insertParamList.Add(":YEAR_CODE_TEXT", Year_Code);
                    Empty_insertParamList.Add(":JOB_NO_WHR", Job_no);
                    Empty_insertParamList.Add(":MONTH_CODE_WHR", Month_Code);
                    Empty_insertParamList.Add(":YEAR_CODE_WHR", Year_Code);
                    Empty_insertParamList.Add(":REMARKS_desc", Empty_Remarks_desc.Text.ToString());
                    Empty_insertParamList.Add(":Added_by", User);
                    int i = objDB.executeNonQuery(sbEmpty_InsertQuery.ToString(), Empty_insertParamList);
                    if (i > 0)
                    {
                        lblError.Text = "Remarks Inserted Successfully!!";
                        if ((string.Equals(tbl_name, "CM_PROJ_PROGRESS_REMARKS")) == true)
                        {
                            lblProjrem.Visible = false;
                            lblProjremarks.Visible = false;
                        }
                    }
                    else
                    {
                        lblError.Text = "Error";
                    }
                }
            }
            else if (e.CommandName == "Delete")
            {
                Label REMARKS_SrNo = (Label)row.FindControl("lblM_srno");
                StringBuilder sbDelete_Query = new StringBuilder();
                Dictionary<string, string> Delete_ParamList = new Dictionary<string, string>();
                sbDelete_Query.Append(" DELETE FROM " + tbl_name + " WHERE JOB_NO =:JOB_NO_WHR AND MONTH_CODE = :MONTH_CODE_WHR AND YEAR_CODE =:YEAR_CODE_WHR ");
                sbDelete_Query.Append(" and REMARKS_SR_NO= :REMARKS_SR_NO");
                //Delete_ParamList.Add(":tbl_name", tbl_name);
                Delete_ParamList.Add(":JOB_NO_WHR", Job_no);
                Delete_ParamList.Add(":MONTH_CODE_WHR", Month_Code);
                Delete_ParamList.Add(":YEAR_CODE_WHR", Year_Code);
                Delete_ParamList.Add(":REMARKS_SR_NO", REMARKS_SrNo.Text.ToString());
                int i = objDB.executeNonQuery(sbDelete_Query.ToString(), Delete_ParamList);
                if (i > 0)
                {
                    lblError.Text = "Remarks Deleted Successfully!!";
                }
                else
                {
                    lblError.Text = "Error";
                }
            }
            bind_Proj_Common_Remarks(tbl_name, gvProjRemarks_Common);
        }
        catch (Exception ex)
        {
            lblError.Text = ex.ToString();
        }
    }

    protected void gvProjRemarks_Common_RowDatabound(GridViewRowEventArgs e, string hide_div)
    {
        string user_role = Session["User_Role"].ToString();
        string Edit_Rights = Session["Edit_Rights"].ToString();
        string Visible_false = Session["Visible_false"].ToString();
        if ((((user_role == "V") || (user_role == "Z") || (user_role == "ID")) && (Edit_Rights == "")) || (Visible_false == "Y"))
        {
            if (e.Row.RowType == DataControlRowType.EmptyDataRow)
            {
                //here you can access the div control
                HtmlGenericControl htmlhideDiv = (HtmlGenericControl)e.Row.FindControl(hide_div);
                htmlhideDiv.Style.Add("Display", "none");
            }
        }
    }

    #endregion

    #region Project_Progress_Remarks

    protected void gv_ProjProgressRemarks_RowEditing(object sender, GridViewEditEventArgs e)
    {
        gv_ProjProgressRemarks.EditIndex = e.NewEditIndex;
        bind_Proj_Common_Remarks("CM_PROJ_PROGRESS_REMARKS", gv_ProjProgressRemarks);
    }

    protected void gv_ProjProgressRemarks_RowCancelingEdit(object sender, GridViewCancelEditEventArgs e)
    {
        gv_ProjProgressRemarks.EditIndex = -1;
        bind_Proj_Common_Remarks("CM_PROJ_PROGRESS_REMARKS", gv_ProjProgressRemarks);
    }

    protected void gv_ProjProgressRemarks_RowCommand(object sender, GridViewCommandEventArgs e)
    {
        gvProjRemarks_Common_RowCommand(e, "CM_PROJ_PROGRESS_REMARKS", gv_ProjProgressRemarks);
    }

    protected void gv_ProjProgressRemarks_RowUpdating(object sender, GridViewUpdateEventArgs e)
    {
        //do nothing
    }

    protected void gv_ProjProgressRemarks_RowDeleting(object sender, GridViewDeleteEventArgs e)
    {
        //do nothing
    }

    protected void gv_ProjProgressRemarks_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        gvProjRemarks_Common_RowDatabound(e, "hideDivProgRemarks");
    }

    //Check Project Progress Slippage 5% or more
    public bool Check_Progress_slippage()
    {
        bool chk_flag = false;
        bool slip_flag = false;

        string Job_no = ddJobNumber.SelectedValue.ToString().Trim();
        string Year_Code = ddlYear.SelectedItem.ToString().Trim();
        string Month_Code = ddlMonth.SelectedValue.ToString().Trim();

        double str_pro_service_sch = 0;
        double str_pro_service_act = 0;
        double str_pro_physical_sch = 0;
        double str_pro_physical_act = 0;

        double str_total_service = 0;
        double str_total_physical = 0;

        double str_total_service_1 = 0;
        double str_total_physical_1 = 0;

        str_pro_service_sch = Convert.ToDouble(txtProg_service_Sch.Text);
        str_pro_service_act = Convert.ToDouble(txtProg_service_Act.Text);
        str_pro_physical_sch = Convert.ToDouble(txtProg_physical_Sch.Text);
        str_pro_physical_act = Convert.ToDouble(txtProg_physical_Act.Text);

        str_total_service = str_pro_service_sch - str_pro_service_act;
        str_total_physical = str_pro_physical_sch - str_pro_physical_act;

        str_total_service_1 = str_pro_service_act - str_pro_service_sch;
        str_total_physical_1 = str_pro_physical_act - str_pro_physical_sch;

        if ((str_total_service > 5.0) || (str_total_physical > 5.0) || (str_total_service_1 > 5.0) || (str_total_physical_1 > 5.0))
        {
            slip_flag = true;
        }

        if (slip_flag)
        {
            StringBuilder sbQuery = new StringBuilder();
            Dictionary<string, string> paramList = new Dictionary<string, string>();
            sbQuery.Append("SELECT count (1) FROM CM_PROJ_PROGRESS_REMARKS where JOB_NO = :JOB_NO_WHR AND MONTH_CODE = :MONTH_CODE_WHR AND YEAR_CODE = :YEAR_CODE_WHR ");
            paramList.Add(":JOB_NO_WHR", Job_no);
            paramList.Add(":MONTH_CODE_WHR", Month_Code);
            paramList.Add(":YEAR_CODE_WHR", Year_Code);
            int count = objDB.ExecuteStatementCount(sbQuery.ToString(), paramList);
            if (count == 0)
            {
                chk_flag = true;
            }
        }
        return chk_flag;
    }

    #endregion

    #region Project_Resource_Remarks

    protected void gv_ProjResourceRemarks_RowEditing(object sender, GridViewEditEventArgs e)
    {
        gv_ProjResourceRemarks.EditIndex = e.NewEditIndex;
        bind_Proj_Common_Remarks("CM_PROJ_RESOURCE_REMARKS", gv_ProjResourceRemarks);
    }

    protected void gv_ProjResourceRemarks_RowCancelingEdit(object sender, GridViewCancelEditEventArgs e)
    {
        gv_ProjResourceRemarks.EditIndex = -1;
        bind_Proj_Common_Remarks("CM_PROJ_RESOURCE_REMARKS", gv_ProjResourceRemarks);
    }

    protected void gv_ProjResourceRemarks_RowCommand(object sender, GridViewCommandEventArgs e)
    {
        gvProjRemarks_Common_RowCommand(e, "CM_PROJ_RESOURCE_REMARKS", gv_ProjResourceRemarks);
    }

    protected void gv_ProjResourceRemarks_RowUpdating(object sender, GridViewUpdateEventArgs e)
    {
        //do nothing
    }

    protected void gv_ProjResourceRemarks_RowDeleting(object sender, GridViewDeleteEventArgs e)
    {
        //do nothing
    }

    protected void gv_ProjResourceRemarks_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        gvProjRemarks_Common_RowDatabound(e, "hideDivResourceRemarks");
    }

    #endregion

    #region Project_Finance_Remarks

    protected void gv_ProjFinanceRemarks_RowEditing(object sender, GridViewEditEventArgs e)
    {
        gv_ProjFinanceRemarks.EditIndex = e.NewEditIndex;
        bind_Proj_Common_Remarks("CM_PROJ_FINANCE_REMARKS", gv_ProjFinanceRemarks);
    }

    protected void gv_ProjFinanceRemarks_RowCancelingEdit(object sender, GridViewCancelEditEventArgs e)
    {
        gv_ProjFinanceRemarks.EditIndex = -1;
        bind_Proj_Common_Remarks("CM_PROJ_FINANCE_REMARKS", gv_ProjFinanceRemarks);
    }

    protected void gv_ProjFinanceRemarks_RowCommand(object sender, GridViewCommandEventArgs e)
    {
        gvProjRemarks_Common_RowCommand(e, "CM_PROJ_FINANCE_REMARKS", gv_ProjFinanceRemarks);
    }

    protected void gv_ProjFinanceRemarks_RowUpdating(object sender, GridViewUpdateEventArgs e)
    {
        //do nothing
    }

    protected void gv_ProjFinanceRemarks_RowDeleting(object sender, GridViewDeleteEventArgs e)
    {
        //do nothing
    }

    protected void gv_ProjFinanceRemarks_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        gvProjRemarks_Common_RowDatabound(e, "hideDivFinanceRemarks");
    }

    #endregion

    public bool Check_Service_Progress_slippage()
    {
        bool slip_flag = false;

        string Job_no = ddJobNumber.SelectedValue.ToString().Trim();
        string Year_Code = ddlYear.SelectedItem.ToString().Trim();
        string Month_Code = ddlMonth.SelectedValue.ToString().Trim();

        double str_pro_service_sch = 0;
        double str_pro_service_act = 0;

        double str_total_service = 0;
        double str_total_service_1 = 0;

        str_pro_service_sch = Convert.ToDouble(txtProg_service_Sch.Text);
        str_pro_service_act = Convert.ToDouble(txtProg_service_Act.Text);

        str_total_service = str_pro_service_sch - str_pro_service_act;

        str_total_service_1 = str_pro_service_act - str_pro_service_sch;

        if ((str_total_service > 5.0) || (str_total_service_1 > 5.0))
        {
            slip_flag = true;
        }

        return slip_flag;
    }

    public bool Check_Physical_Progress_slippage()
    {
        bool slip_flag = false;

        string Job_no = ddJobNumber.SelectedValue.ToString().Trim();
        string Year_Code = ddlYear.SelectedItem.ToString().Trim();
        string Month_Code = ddlMonth.SelectedValue.ToString().Trim();

        double str_pro_physical_sch = 0;
        double str_pro_physical_act = 0;

        double str_total_physical = 0;
        double str_total_physical_1 = 0;


        str_pro_physical_sch = Convert.ToDouble(txtProg_physical_Sch.Text);
        str_pro_physical_act = Convert.ToDouble(txtProg_physical_Act.Text);

        str_total_physical = str_pro_physical_sch - str_pro_physical_act;
        str_total_physical_1 = str_pro_physical_act - str_pro_physical_sch;

        if ((str_total_physical > 5.0) || (str_total_physical_1 > 5.0))
        {
            slip_flag = true;
        }
        return slip_flag;
    }

    protected void txtProg_service_Sch_TextChanged(object sender, EventArgs e)
    {
        if (Check_Service_Progress_slippage() == true)
        {
            lblProjrem.Visible = true;
            lblProjremarks.Visible = true;
        }
        else
        {
            lblProjrem.Visible = false;
            lblProjremarks.Visible = false;
        }
    }

    protected void txtProg_service_Act_TextChanged(object sender, EventArgs e)
    {
        if (Check_Service_Progress_slippage() == true)
        {
            lblProjrem.Visible = true;
            lblProjremarks.Visible = true;
        }
        else
        {
            lblProjrem.Visible = false;
            lblProjremarks.Visible = false;
        }
    }

    protected void txtProg_physical_Sch_TextChanged(object sender, EventArgs e)
    {
        if (Check_Physical_Progress_slippage() == true)
        {
            lblProjrem.Visible = true;
            lblProjremarks.Visible = true;
        }
        else
        {
            lblProjrem.Visible = false;
            lblProjremarks.Visible = false;
        }
    }

    protected void txtProg_physical_Act_TextChanged(object sender, EventArgs e)
    {
        if (Check_Physical_Progress_slippage() == true)
        {
            lblProjrem.Visible = true;
            lblProjremarks.Visible = true;
        }
        else
        {
            lblProjrem.Visible = false;
            lblProjremarks.Visible = false;
        }
    }

    protected void ddl_RepeatEngg_SelectedIndexChanged(object sender, EventArgs e)
    {
        if (ddl_RepeatEngg.SelectedValue == "Y")
        {
            tr_saving.Visible = true;
            Reqho_Saving.ValidationGroup = "SectionA";
            Reqsite_Saving.ValidationGroup = "SectionA";
        }
        else
        {
            tr_saving.Visible = false;
            txt_ho_Saving.Text = "";
            txt_site_Saving.Text = "";
            Reqho_Saving.ValidationGroup = "";
            Reqsite_Saving.ValidationGroup = "";
        }
    }

protected void gvRisk_SelectedIndexChanged(object sender, EventArgs e)
    {

    }
    protected void txtEmpty_Hazards_TextChanged(object sender, EventArgs e)
    {

    }
    protected void lnkbtnfootr_add_Click(object sender, EventArgs e)
    {

    }
}